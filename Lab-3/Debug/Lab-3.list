
Lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003398  08003398  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003398  08003398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000100  20000100  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dd3d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f76  00000000  00000000  0002dd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  0002fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  000309b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022925  00000000  00000000  000315a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f3f0  00000000  00000000  00053ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3af8  00000000  00000000  000632bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136db5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034dc  00000000  00000000  00136e08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003368 	.word	0x08003368

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003368 	.word	0x08003368

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <MX_GPIO_Init+0x84>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a1d      	ldr	r2, [pc, #116]	; (8000574 <MX_GPIO_Init+0x84>)
 8000500:	f043 0310 	orr.w	r3, r3, #16
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <MX_GPIO_Init+0x84>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0310 	and.w	r3, r3, #16
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_GPIO_Init+0x84>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a16      	ldr	r2, [pc, #88]	; (8000574 <MX_GPIO_Init+0x84>)
 800051c:	f043 0304 	orr.w	r3, r3, #4
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_GPIO_Init+0x84>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0304 	and.w	r3, r3, #4
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_GPIO_Init+0x84>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <MX_GPIO_Init+0x84>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_GPIO_Init+0x84>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_GPIO_Init+0x84>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a08      	ldr	r2, [pc, #32]	; (8000574 <MX_GPIO_Init+0x84>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_GPIO_Init+0x84>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 facc 	bl	8000b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f80a 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f7ff ffb4 	bl	80004f0 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000588:	f000 fa22 	bl	80009d0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800058c:	f000 f8e8 	bl	8000760 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000590:	f000 f96a 	bl	8000868 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	e7fe      	b.n	8000594 <main+0x1c>
	...

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	; 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fed6 	bl	8003358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <SystemClock_Config+0xd8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	4a2a      	ldr	r2, [pc, #168]	; (8000670 <SystemClock_Config+0xd8>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <SystemClock_Config+0xd8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <SystemClock_Config+0xdc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a24      	ldr	r2, [pc, #144]	; (8000674 <SystemClock_Config+0xdc>)
 80005e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemClock_Config+0xdc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2310      	movs	r3, #16
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000604:	2300      	movs	r3, #0
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000608:	2308      	movs	r3, #8
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800060c:	23b4      	movs	r3, #180	; 0xb4
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000614:	2304      	movs	r3, #4
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fe8d 	bl	800133c <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 f826 	bl	8000678 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800062c:	f000 fe36 	bl	800129c <HAL_PWREx_EnableOverDrive>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000636:	f000 f81f 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000646:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800064a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800064c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000650:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	2105      	movs	r1, #5
 8000658:	4618      	mov	r0, r3
 800065a:	f001 f8e7 	bl	800182c <HAL_RCC_ClockConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000664:	f000 f808 	bl	8000678 <Error_Handler>
  }
}
 8000668:	bf00      	nop
 800066a:	3750      	adds	r7, #80	; 0x50
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <HAL_MspInit+0x4c>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <HAL_MspInit+0x4c>)
 8000694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000698:	6453      	str	r3, [r2, #68]	; 0x44
 800069a:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <HAL_MspInit+0x4c>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_MspInit+0x4c>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a08      	ldr	r2, [pc, #32]	; (80006d0 <HAL_MspInit+0x4c>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_MspInit+0x4c>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800

080006d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <NMI_Handler+0x4>

080006da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <HardFault_Handler+0x4>

080006e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <MemManage_Handler+0x4>

080006e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <BusFault_Handler+0x4>

080006ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <UsageFault_Handler+0x4>

080006f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000720:	f000 fa4c 	bl	8000bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <USART6_IRQHandler+0x10>)
 800072e:	f001 ff29 	bl	8002584 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000b8 	.word	0x200000b8

0800073c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <SystemInit+0x20>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000746:	4a05      	ldr	r2, [pc, #20]	; (800075c <SystemInit+0x20>)
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b092      	sub	sp, #72	; 0x48
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000766:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
 8000780:	615a      	str	r2, [r3, #20]
 8000782:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2220      	movs	r2, #32
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fde4 	bl	8003358 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000790:	4b33      	ldr	r3, [pc, #204]	; (8000860 <MX_TIM1_Init+0x100>)
 8000792:	4a34      	ldr	r2, [pc, #208]	; (8000864 <MX_TIM1_Init+0x104>)
 8000794:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16000;
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <MX_TIM1_Init+0x100>)
 8000798:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800079c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <MX_TIM1_Init+0x100>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <MX_TIM1_Init+0x100>)
 80007a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <MX_TIM1_Init+0x100>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <MX_TIM1_Init+0x100>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <MX_TIM1_Init+0x100>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007be:	4828      	ldr	r0, [pc, #160]	; (8000860 <MX_TIM1_Init+0x100>)
 80007c0:	f001 fa63 	bl	8001c8a <HAL_TIM_PWM_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007ca:	f7ff ff55 	bl	8000678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007da:	4619      	mov	r1, r3
 80007dc:	4820      	ldr	r0, [pc, #128]	; (8000860 <MX_TIM1_Init+0x100>)
 80007de:	f001 fdb5 	bl	800234c <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 80007e8:	f7ff ff46 	bl	8000678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ec:	2360      	movs	r3, #96	; 0x60
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007f8:	2300      	movs	r3, #0
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080c:	2200      	movs	r2, #0
 800080e:	4619      	mov	r1, r3
 8000810:	4813      	ldr	r0, [pc, #76]	; (8000860 <MX_TIM1_Init+0x100>)
 8000812:	f001 fa89 	bl	8001d28 <HAL_TIM_PWM_ConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800081c:	f7ff ff2c 	bl	8000678 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <MX_TIM1_Init+0x100>)
 8000844:	f001 fdfe 	bl	8002444 <HAL_TIMEx_ConfigBreakDeadTime>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800084e:	f7ff ff13 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000852:	4803      	ldr	r0, [pc, #12]	; (8000860 <MX_TIM1_Init+0x100>)
 8000854:	f000 f882 	bl	800095c <HAL_TIM_MspPostInit>

}
 8000858:	bf00      	nop
 800085a:	3748      	adds	r7, #72	; 0x48
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000028 	.word	0x20000028
 8000864:	40010000 	.word	0x40010000

08000868 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_TIM6_Init+0x64>)
 8000878:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <MX_TIM6_Init+0x68>)
 800087a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800087c:	4b13      	ldr	r3, [pc, #76]	; (80008cc <MX_TIM6_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_TIM6_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_TIM6_Init+0x64>)
 800088a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_TIM6_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <MX_TIM6_Init+0x64>)
 8000898:	f001 f9a8 	bl	8001bec <HAL_TIM_Base_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80008a2:	f7ff fee9 	bl	8000678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008ae:	463b      	mov	r3, r7
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_TIM6_Init+0x64>)
 80008b4:	f001 fd4a 	bl	800234c <HAL_TIMEx_MasterConfigSynchronization>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80008be:	f7ff fedb 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000070 	.word	0x20000070
 80008d0:	40001000 	.word	0x40001000

080008d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <HAL_TIM_PWM_MspInit+0x3c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d10d      	bne.n	8000902 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_TIM_PWM_MspInit+0x40>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a09      	ldr	r2, [pc, #36]	; (8000914 <HAL_TIM_PWM_MspInit+0x40>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b07      	ldr	r3, [pc, #28]	; (8000914 <HAL_TIM_PWM_MspInit+0x40>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40010000 	.word	0x40010000
 8000914:	40023800 	.word	0x40023800

08000918 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <HAL_TIM_Base_MspInit+0x3c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d10d      	bne.n	8000946 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <HAL_TIM_Base_MspInit+0x40>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a09      	ldr	r2, [pc, #36]	; (8000958 <HAL_TIM_Base_MspInit+0x40>)
 8000934:	f043 0310 	orr.w	r3, r3, #16
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <HAL_TIM_Base_MspInit+0x40>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 0310 	and.w	r3, r3, #16
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40001000 	.word	0x40001000
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <HAL_TIM_MspPostInit+0x68>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d11e      	bne.n	80009bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_TIM_MspPostInit+0x6c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <HAL_TIM_MspPostInit+0x6c>)
 8000988:	f043 0310 	orr.w	r3, r3, #16
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_TIM_MspPostInit+0x6c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0310 	and.w	r3, r3, #16
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800099a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800099e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4619      	mov	r1, r3
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <HAL_TIM_MspPostInit+0x70>)
 80009b8:	f000 fac4 	bl	8000f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009bc:	bf00      	nop
 80009be:	3720      	adds	r7, #32
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40010000 	.word	0x40010000
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000

080009d0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009d6:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_USART6_UART_Init+0x50>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_USART6_UART_Init+0x4c>)
 8000a08:	f001 fd6e 	bl	80024e8 <HAL_UART_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a12:	f7ff fe31 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200000b8 	.word	0x200000b8
 8000a20:	40011400 	.word	0x40011400

08000a24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <HAL_UART_MspInit+0x94>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d133      	bne.n	8000aae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_UART_MspInit+0x98>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <HAL_UART_MspInit+0x98>)
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <HAL_UART_MspInit+0x98>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <HAL_UART_MspInit+0x98>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <HAL_UART_MspInit+0x98>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_UART_MspInit+0x98>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a7e:	23c0      	movs	r3, #192	; 0xc0
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <HAL_UART_MspInit+0x9c>)
 8000a9a:	f000 fa53 	bl	8000f44 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2047      	movs	r0, #71	; 0x47
 8000aa4:	f000 f985 	bl	8000db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000aa8:	2047      	movs	r0, #71	; 0x47
 8000aaa:	f000 f99e 	bl	8000dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000aae:	bf00      	nop
 8000ab0:	3728      	adds	r7, #40	; 0x28
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40011400 	.word	0x40011400
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020800 	.word	0x40020800

08000ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac8:	480d      	ldr	r0, [pc, #52]	; (8000b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aca:	490e      	ldr	r1, [pc, #56]	; (8000b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ae0:	4c0b      	ldr	r4, [pc, #44]	; (8000b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aee:	f7ff fe25 	bl	800073c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000af2:	f002 fc0d 	bl	8003310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af6:	f7ff fd3f 	bl	8000578 <main>
  bx  lr    
 8000afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000afc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b08:	080033a8 	.word	0x080033a8
  ldr r2, =_sbss
 8000b0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b10:	20000100 	.word	0x20000100

08000b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC_IRQHandler>
	...

08000b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <HAL_Init+0x40>)
 8000b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_Init+0x40>)
 8000b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <HAL_Init+0x40>)
 8000b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b40:	2003      	movs	r0, #3
 8000b42:	f000 f92b 	bl	8000d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b46:	200f      	movs	r0, #15
 8000b48:	f000 f808 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b4c:	f7ff fd9a 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023c00 	.word	0x40023c00

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x54>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_InitTick+0x58>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f943 	bl	8000e06 <HAL_SYSTICK_Config>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00e      	b.n	8000ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d80a      	bhi.n	8000ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f000 f90b 	bl	8000db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_InitTick+0x5c>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e000      	b.n	8000ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000004 	.word	0x20000004

08000bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc0:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x20>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x24>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <HAL_IncTick+0x24>)
 8000bce:	6013      	str	r3, [r2, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000008 	.word	0x20000008
 8000be0:	200000fc 	.word	0x200000fc

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200000fc 	.word	0x200000fc

08000bfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <__NVIC_SetPriorityGrouping+0x44>)
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	60d3      	str	r3, [r2, #12]
}
 8000c34:	bf00      	nop
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <__NVIC_GetPriorityGrouping+0x18>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	f003 0307 	and.w	r3, r3, #7
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 021f 	and.w	r2, r3, #31
 8000c78:	4907      	ldr	r1, [pc, #28]	; (8000c98 <__NVIC_EnableIRQ+0x38>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	095b      	lsrs	r3, r3, #5
 8000c80:	2001      	movs	r0, #1
 8000c82:	fa00 f202 	lsl.w	r2, r0, r2
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	; (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d68:	d301      	bcc.n	8000d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e00f      	b.n	8000d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <SysTick_Config+0x40>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d76:	210f      	movs	r1, #15
 8000d78:	f04f 30ff 	mov.w	r0, #4294967295
 8000d7c:	f7ff ff8e 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <SysTick_Config+0x40>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <SysTick_Config+0x40>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	e000e010 	.word	0xe000e010

08000d9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff29 	bl	8000bfc <__NVIC_SetPriorityGrouping>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
 8000dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc4:	f7ff ff3e 	bl	8000c44 <__NVIC_GetPriorityGrouping>
 8000dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	f7ff ff8e 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff5d 	bl	8000c9c <__NVIC_SetPriority>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff31 	bl	8000c60 <__NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff ffa2 	bl	8000d58 <SysTick_Config>
 8000e14:	4603      	mov	r3, r0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b084      	sub	sp, #16
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff feda 	bl	8000be4 <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d008      	beq.n	8000e50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	e052      	b.n	8000ef6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0216 	bic.w	r2, r2, #22
 8000e5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	695a      	ldr	r2, [r3, #20]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d103      	bne.n	8000e80 <HAL_DMA_Abort+0x62>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d007      	beq.n	8000e90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 0208 	bic.w	r2, r2, #8
 8000e8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0201 	bic.w	r2, r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ea0:	e013      	b.n	8000eca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ea2:	f7ff fe9f 	bl	8000be4 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b05      	cmp	r3, #5
 8000eae:	d90c      	bls.n	8000eca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2203      	movs	r2, #3
 8000eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e015      	b.n	8000ef6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1e4      	bne.n	8000ea2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000edc:	223f      	movs	r2, #63	; 0x3f
 8000ede:	409a      	lsls	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d004      	beq.n	8000f1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e00c      	b.n	8000f36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2205      	movs	r2, #5
 8000f20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0201 	bic.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	e177      	b.n	8001250 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8166 	bne.w	800124a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d005      	beq.n	8000f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d130      	bne.n	8000ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	f003 0201 	and.w	r2, r3, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b03      	cmp	r3, #3
 8001002:	d017      	beq.n	8001034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d123      	bne.n	8001088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80c0 	beq.w	800124a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	4a65      	ldr	r2, [pc, #404]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	; 0x44
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_GPIO_Init+0x324>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e6:	4a61      	ldr	r2, [pc, #388]	; (800126c <HAL_GPIO_Init+0x328>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a58      	ldr	r2, [pc, #352]	; (8001270 <HAL_GPIO_Init+0x32c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d037      	beq.n	8001182 <HAL_GPIO_Init+0x23e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a57      	ldr	r2, [pc, #348]	; (8001274 <HAL_GPIO_Init+0x330>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d031      	beq.n	800117e <HAL_GPIO_Init+0x23a>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a56      	ldr	r2, [pc, #344]	; (8001278 <HAL_GPIO_Init+0x334>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d02b      	beq.n	800117a <HAL_GPIO_Init+0x236>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a55      	ldr	r2, [pc, #340]	; (800127c <HAL_GPIO_Init+0x338>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d025      	beq.n	8001176 <HAL_GPIO_Init+0x232>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a54      	ldr	r2, [pc, #336]	; (8001280 <HAL_GPIO_Init+0x33c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d01f      	beq.n	8001172 <HAL_GPIO_Init+0x22e>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a53      	ldr	r2, [pc, #332]	; (8001284 <HAL_GPIO_Init+0x340>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d019      	beq.n	800116e <HAL_GPIO_Init+0x22a>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_GPIO_Init+0x344>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d013      	beq.n	800116a <HAL_GPIO_Init+0x226>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a51      	ldr	r2, [pc, #324]	; (800128c <HAL_GPIO_Init+0x348>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d00d      	beq.n	8001166 <HAL_GPIO_Init+0x222>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a50      	ldr	r2, [pc, #320]	; (8001290 <HAL_GPIO_Init+0x34c>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d007      	beq.n	8001162 <HAL_GPIO_Init+0x21e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4f      	ldr	r2, [pc, #316]	; (8001294 <HAL_GPIO_Init+0x350>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d101      	bne.n	800115e <HAL_GPIO_Init+0x21a>
 800115a:	2309      	movs	r3, #9
 800115c:	e012      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800115e:	230a      	movs	r3, #10
 8001160:	e010      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001162:	2308      	movs	r3, #8
 8001164:	e00e      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001166:	2307      	movs	r3, #7
 8001168:	e00c      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800116a:	2306      	movs	r3, #6
 800116c:	e00a      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800116e:	2305      	movs	r3, #5
 8001170:	e008      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001172:	2304      	movs	r3, #4
 8001174:	e006      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001176:	2303      	movs	r3, #3
 8001178:	e004      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800117a:	2302      	movs	r3, #2
 800117c:	e002      	b.n	8001184 <HAL_GPIO_Init+0x240>
 800117e:	2301      	movs	r3, #1
 8001180:	e000      	b.n	8001184 <HAL_GPIO_Init+0x240>
 8001182:	2300      	movs	r3, #0
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	f002 0203 	and.w	r2, r2, #3
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	4093      	lsls	r3, r2
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001194:	4935      	ldr	r1, [pc, #212]	; (800126c <HAL_GPIO_Init+0x328>)
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	3302      	adds	r3, #2
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c6:	4a34      	ldr	r2, [pc, #208]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4013      	ands	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011f0:	4a29      	ldr	r2, [pc, #164]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <HAL_GPIO_Init+0x354>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800121a:	4a1f      	ldr	r2, [pc, #124]	; (8001298 <HAL_GPIO_Init+0x354>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_GPIO_Init+0x354>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <HAL_GPIO_Init+0x354>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	f67f ae84 	bls.w	8000f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	3724      	adds	r7, #36	; 0x24
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800
 800126c:	40013800 	.word	0x40013800
 8001270:	40020000 	.word	0x40020000
 8001274:	40020400 	.word	0x40020400
 8001278:	40020800 	.word	0x40020800
 800127c:	40020c00 	.word	0x40020c00
 8001280:	40021000 	.word	0x40021000
 8001284:	40021400 	.word	0x40021400
 8001288:	40021800 	.word	0x40021800
 800128c:	40021c00 	.word	0x40021c00
 8001290:	40022000 	.word	0x40022000
 8001294:	40022400 	.word	0x40022400
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b20      	ldr	r3, [pc, #128]	; (800132c <HAL_PWREx_EnableOverDrive+0x90>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a1f      	ldr	r2, [pc, #124]	; (800132c <HAL_PWREx_EnableOverDrive+0x90>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b1d      	ldr	r3, [pc, #116]	; (800132c <HAL_PWREx_EnableOverDrive+0x90>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_PWREx_EnableOverDrive+0x94>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012c8:	f7ff fc8c 	bl	8000be4 <HAL_GetTick>
 80012cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012ce:	e009      	b.n	80012e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012d0:	f7ff fc88 	bl	8000be4 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012de:	d901      	bls.n	80012e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e01f      	b.n	8001324 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_PWREx_EnableOverDrive+0x98>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f0:	d1ee      	bne.n	80012d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_PWREx_EnableOverDrive+0x9c>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012f8:	f7ff fc74 	bl	8000be4 <HAL_GetTick>
 80012fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012fe:	e009      	b.n	8001314 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001300:	f7ff fc70 	bl	8000be4 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800130e:	d901      	bls.n	8001314 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e007      	b.n	8001324 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <HAL_PWREx_EnableOverDrive+0x98>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001320:	d1ee      	bne.n	8001300 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800
 8001330:	420e0040 	.word	0x420e0040
 8001334:	40007000 	.word	0x40007000
 8001338:	420e0044 	.word	0x420e0044

0800133c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e267      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d075      	beq.n	8001446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135a:	4b88      	ldr	r3, [pc, #544]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00c      	beq.n	8001380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001366:	4b85      	ldr	r3, [pc, #532]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d112      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001372:	4b82      	ldr	r3, [pc, #520]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800137e:	d10b      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	4b7e      	ldr	r3, [pc, #504]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d05b      	beq.n	8001444 <HAL_RCC_OscConfig+0x108>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d157      	bne.n	8001444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e242      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d106      	bne.n	80013b0 <HAL_RCC_OscConfig+0x74>
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a75      	ldr	r2, [pc, #468]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e01d      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x98>
 80013ba:	4b70      	ldr	r3, [pc, #448]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6f      	ldr	r2, [pc, #444]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b6d      	ldr	r3, [pc, #436]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6c      	ldr	r2, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013d4:	4b69      	ldr	r3, [pc, #420]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a68      	ldr	r2, [pc, #416]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b66      	ldr	r3, [pc, #408]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a65      	ldr	r2, [pc, #404]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fbf6 	bl	8000be4 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fbf2 	bl	8000be4 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e207      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b5b      	ldr	r3, [pc, #364]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0xc0>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fbe2 	bl	8000be4 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fbde 	bl	8000be4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1f3      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	4b51      	ldr	r3, [pc, #324]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0xe8>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d063      	beq.n	800151a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001452:	4b4a      	ldr	r3, [pc, #296]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001466:	2b08      	cmp	r3, #8
 8001468:	d11c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d116      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e1c7      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b3b      	ldr	r3, [pc, #236]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4937      	ldr	r1, [pc, #220]	; (800157c <HAL_RCC_OscConfig+0x240>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	e03a      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_RCC_OscConfig+0x244>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb97 	bl	8000be4 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fb93 	bl	8000be4 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1a8      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b28      	ldr	r3, [pc, #160]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4925      	ldr	r1, [pc, #148]	; (800157c <HAL_RCC_OscConfig+0x240>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <HAL_RCC_OscConfig+0x244>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb76 	bl	8000be4 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fb72 	bl	8000be4 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e187      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d036      	beq.n	8001594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d016      	beq.n	800155c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_RCC_OscConfig+0x248>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fb56 	bl	8000be4 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fb52 	bl	8000be4 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e167      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_RCC_OscConfig+0x240>)
 8001550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x200>
 800155a:	e01b      	b.n	8001594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_RCC_OscConfig+0x248>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fb3f 	bl	8000be4 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	e00e      	b.n	8001588 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fb3b 	bl	8000be4 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d907      	bls.n	8001588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e150      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
 800157c:	40023800 	.word	0x40023800
 8001580:	42470000 	.word	0x42470000
 8001584:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800158a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ea      	bne.n	800156a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8097 	beq.w	80016d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a6:	4b81      	ldr	r3, [pc, #516]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10f      	bne.n	80015d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b7d      	ldr	r3, [pc, #500]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a7c      	ldr	r2, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b7a      	ldr	r3, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ce:	2301      	movs	r3, #1
 80015d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b77      	ldr	r3, [pc, #476]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015de:	4b74      	ldr	r3, [pc, #464]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a73      	ldr	r2, [pc, #460]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fafb 	bl	8000be4 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff faf7 	bl	8000be4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e10c      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <HAL_RCC_OscConfig+0x474>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x2ea>
 8001618:	4b64      	ldr	r3, [pc, #400]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161c:	4a63      	ldr	r2, [pc, #396]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6713      	str	r3, [r2, #112]	; 0x70
 8001624:	e01c      	b.n	8001660 <HAL_RCC_OscConfig+0x324>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b05      	cmp	r3, #5
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x30c>
 800162e:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001632:	4a5e      	ldr	r2, [pc, #376]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6713      	str	r3, [r2, #112]	; 0x70
 800163a:	4b5c      	ldr	r3, [pc, #368]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	4a5b      	ldr	r2, [pc, #364]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6713      	str	r3, [r2, #112]	; 0x70
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0x324>
 8001648:	4b58      	ldr	r3, [pc, #352]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164c:	4a57      	ldr	r2, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	; 0x70
 8001654:	4b55      	ldr	r3, [pc, #340]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a54      	ldr	r2, [pc, #336]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 800165a:	f023 0304 	bic.w	r3, r3, #4
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d015      	beq.n	8001694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fabc 	bl	8000be4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff fab8 	bl	8000be4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e0cb      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001686:	4b49      	ldr	r3, [pc, #292]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0ee      	beq.n	8001670 <HAL_RCC_OscConfig+0x334>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff faa6 	bl	8000be4 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7ff faa2 	bl	8000be4 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0b5      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b2:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ee      	bne.n	800169c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c4:	4b39      	ldr	r3, [pc, #228]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	4a38      	ldr	r2, [pc, #224]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80a1 	beq.w	800181c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016da:	4b34      	ldr	r3, [pc, #208]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d05c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d141      	bne.n	8001772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fa76 	bl	8000be4 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fa72 	bl	8000be4 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e087      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69da      	ldr	r2, [r3, #28]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001728:	019b      	lsls	r3, r3, #6
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	3b01      	subs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	491b      	ldr	r1, [pc, #108]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff fa4b 	bl	8000be4 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff fa47 	bl	8000be4 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e05c      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x416>
 8001770:	e054      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <HAL_RCC_OscConfig+0x478>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fa34 	bl	8000be4 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fa30 	bl	8000be4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e045      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_RCC_OscConfig+0x470>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x444>
 800179e:	e03d      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e038      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000
 80017b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <HAL_RCC_OscConfig+0x4ec>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d028      	beq.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d121      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d11a      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d111      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	3b01      	subs	r3, #1
 8001802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0cc      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 030f 	and.w	r3, r3, #15
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d90c      	bls.n	8001868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b8      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001880:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800188a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	494d      	ldr	r1, [pc, #308]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d044      	beq.n	800194c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d119      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e067      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190a:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f023 0203 	bic.w	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4934      	ldr	r1, [pc, #208]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800191c:	f7ff f962 	bl	8000be4 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	e00a      	b.n	800193a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff f95e 	bl	8000be4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e04f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 020c 	and.w	r2, r3, #12
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	429a      	cmp	r2, r3
 800194a:	d1eb      	bne.n	8001924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d20c      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4916      	ldr	r1, [pc, #88]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490e      	ldr	r1, [pc, #56]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b2:	f000 f821 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	490a      	ldr	r1, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f8c2 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023c00 	.word	0x40023c00
 80019e8:	40023800 	.word	0x40023800
 80019ec:	08003380 	.word	0x08003380
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019fc:	b090      	sub	sp, #64	; 0x40
 80019fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	637b      	str	r3, [r7, #52]	; 0x34
 8001a04:	2300      	movs	r3, #0
 8001a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a08:	2300      	movs	r3, #0
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d00d      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x40>
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	f200 80a1 	bhi.w	8001b64 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x34>
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2a:	e09b      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001a30:	e09b      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a32:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a36:	e098      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a38:	4b4f      	ldr	r3, [pc, #316]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a42:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d028      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	2200      	movs	r2, #0
 8001a56:	623b      	str	r3, [r7, #32]
 8001a58:	627a      	str	r2, [r7, #36]	; 0x24
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a60:	2100      	movs	r1, #0
 8001a62:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a64:	fb03 f201 	mul.w	r2, r3, r1
 8001a68:	2300      	movs	r3, #0
 8001a6a:	fb00 f303 	mul.w	r3, r0, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a43      	ldr	r2, [pc, #268]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a72:	fba0 1202 	umull	r1, r2, r0, r2
 8001a76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a78:	460a      	mov	r2, r1
 8001a7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a7e:	4413      	add	r3, r2
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a84:	2200      	movs	r2, #0
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	61fa      	str	r2, [r7, #28]
 8001a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a92:	f7fe fbab 	bl	80001ec <__aeabi_uldivmod>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a9e:	e053      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa0:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	099b      	lsrs	r3, r3, #6
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	617a      	str	r2, [r7, #20]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ab2:	f04f 0b00 	mov.w	fp, #0
 8001ab6:	4652      	mov	r2, sl
 8001ab8:	465b      	mov	r3, fp
 8001aba:	f04f 0000 	mov.w	r0, #0
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	0159      	lsls	r1, r3, #5
 8001ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac8:	0150      	lsls	r0, r2, #5
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	ebb2 080a 	subs.w	r8, r2, sl
 8001ad2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ae2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ae6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001aea:	ebb2 0408 	subs.w	r4, r2, r8
 8001aee:	eb63 0509 	sbc.w	r5, r3, r9
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	00eb      	lsls	r3, r5, #3
 8001afc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b00:	00e2      	lsls	r2, r4, #3
 8001b02:	4614      	mov	r4, r2
 8001b04:	461d      	mov	r5, r3
 8001b06:	eb14 030a 	adds.w	r3, r4, sl
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	eb45 030b 	adc.w	r3, r5, fp
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b1e:	4629      	mov	r1, r5
 8001b20:	028b      	lsls	r3, r1, #10
 8001b22:	4621      	mov	r1, r4
 8001b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b28:	4621      	mov	r1, r4
 8001b2a:	028a      	lsls	r2, r1, #10
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b32:	2200      	movs	r2, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	60fa      	str	r2, [r7, #12]
 8001b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b3c:	f7fe fb56 	bl	80001ec <__aeabi_uldivmod>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4613      	mov	r3, r2
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	3301      	adds	r3, #1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001b58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b62:	e002      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3740      	adds	r7, #64	; 0x40
 8001b70:	46bd      	mov	sp, r7
 8001b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	017d7840 	.word	0x017d7840

08001b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b88:	4b03      	ldr	r3, [pc, #12]	; (8001b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000000 	.word	0x20000000

08001b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	; (8001bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	08003390 	.word	0x08003390

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bc8:	f7ff ffdc 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0b5b      	lsrs	r3, r3, #13
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4903      	ldr	r1, [pc, #12]	; (8001be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	08003390 	.word	0x08003390

08001bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e041      	b.n	8001c82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7fe fe80 	bl	8000918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3304      	adds	r3, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	f000 f93e 	bl	8001eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e041      	b.n	8001d20 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7fe fe0f 	bl	80008d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f000 f8ef 	bl	8001eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e0ae      	b.n	8001ea4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	f200 809f 	bhi.w	8001e94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d91 	.word	0x08001d91
 8001d60:	08001e95 	.word	0x08001e95
 8001d64:	08001e95 	.word	0x08001e95
 8001d68:	08001e95 	.word	0x08001e95
 8001d6c:	08001dd1 	.word	0x08001dd1
 8001d70:	08001e95 	.word	0x08001e95
 8001d74:	08001e95 	.word	0x08001e95
 8001d78:	08001e95 	.word	0x08001e95
 8001d7c:	08001e13 	.word	0x08001e13
 8001d80:	08001e95 	.word	0x08001e95
 8001d84:	08001e95 	.word	0x08001e95
 8001d88:	08001e95 	.word	0x08001e95
 8001d8c:	08001e53 	.word	0x08001e53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f928 	bl	8001fec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	699a      	ldr	r2, [r3, #24]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0208 	orr.w	r2, r2, #8
 8001daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0204 	bic.w	r2, r2, #4
 8001dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6999      	ldr	r1, [r3, #24]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	619a      	str	r2, [r3, #24]
      break;
 8001dce:	e064      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68b9      	ldr	r1, [r7, #8]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 f978 	bl	80020cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699a      	ldr	r2, [r3, #24]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6999      	ldr	r1, [r3, #24]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	021a      	lsls	r2, r3, #8
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	619a      	str	r2, [r3, #24]
      break;
 8001e10:	e043      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68b9      	ldr	r1, [r7, #8]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 f9cd 	bl	80021b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	69da      	ldr	r2, [r3, #28]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0208 	orr.w	r2, r2, #8
 8001e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	69da      	ldr	r2, [r3, #28]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0204 	bic.w	r2, r2, #4
 8001e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	69d9      	ldr	r1, [r3, #28]
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	61da      	str	r2, [r3, #28]
      break;
 8001e50:	e023      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68b9      	ldr	r1, [r7, #8]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fa21 	bl	80022a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	69da      	ldr	r2, [r3, #28]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	69d9      	ldr	r1, [r3, #28]
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	021a      	lsls	r2, r3, #8
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	61da      	str	r2, [r3, #28]
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	75fb      	strb	r3, [r7, #23]
      break;
 8001e98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a40      	ldr	r2, [pc, #256]	; (8001fc0 <TIM_Base_SetConfig+0x114>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d013      	beq.n	8001eec <TIM_Base_SetConfig+0x40>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eca:	d00f      	beq.n	8001eec <TIM_Base_SetConfig+0x40>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a3d      	ldr	r2, [pc, #244]	; (8001fc4 <TIM_Base_SetConfig+0x118>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00b      	beq.n	8001eec <TIM_Base_SetConfig+0x40>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3c      	ldr	r2, [pc, #240]	; (8001fc8 <TIM_Base_SetConfig+0x11c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <TIM_Base_SetConfig+0x40>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3b      	ldr	r2, [pc, #236]	; (8001fcc <TIM_Base_SetConfig+0x120>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d003      	beq.n	8001eec <TIM_Base_SetConfig+0x40>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a3a      	ldr	r2, [pc, #232]	; (8001fd0 <TIM_Base_SetConfig+0x124>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d108      	bne.n	8001efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a2f      	ldr	r2, [pc, #188]	; (8001fc0 <TIM_Base_SetConfig+0x114>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d02b      	beq.n	8001f5e <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0c:	d027      	beq.n	8001f5e <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a2c      	ldr	r2, [pc, #176]	; (8001fc4 <TIM_Base_SetConfig+0x118>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d023      	beq.n	8001f5e <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a2b      	ldr	r2, [pc, #172]	; (8001fc8 <TIM_Base_SetConfig+0x11c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01f      	beq.n	8001f5e <TIM_Base_SetConfig+0xb2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a2a      	ldr	r2, [pc, #168]	; (8001fcc <TIM_Base_SetConfig+0x120>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01b      	beq.n	8001f5e <TIM_Base_SetConfig+0xb2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a29      	ldr	r2, [pc, #164]	; (8001fd0 <TIM_Base_SetConfig+0x124>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d017      	beq.n	8001f5e <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a28      	ldr	r2, [pc, #160]	; (8001fd4 <TIM_Base_SetConfig+0x128>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d013      	beq.n	8001f5e <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <TIM_Base_SetConfig+0x12c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d00f      	beq.n	8001f5e <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <TIM_Base_SetConfig+0x130>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00b      	beq.n	8001f5e <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a25      	ldr	r2, [pc, #148]	; (8001fe0 <TIM_Base_SetConfig+0x134>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d007      	beq.n	8001f5e <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a24      	ldr	r2, [pc, #144]	; (8001fe4 <TIM_Base_SetConfig+0x138>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d003      	beq.n	8001f5e <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a23      	ldr	r2, [pc, #140]	; (8001fe8 <TIM_Base_SetConfig+0x13c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d108      	bne.n	8001f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <TIM_Base_SetConfig+0x114>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d003      	beq.n	8001fa4 <TIM_Base_SetConfig+0xf8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a0c      	ldr	r2, [pc, #48]	; (8001fd0 <TIM_Base_SetConfig+0x124>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d103      	bne.n	8001fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691a      	ldr	r2, [r3, #16]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	615a      	str	r2, [r3, #20]
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	40000800 	.word	0x40000800
 8001fcc:	40000c00 	.word	0x40000c00
 8001fd0:	40010400 	.word	0x40010400
 8001fd4:	40014000 	.word	0x40014000
 8001fd8:	40014400 	.word	0x40014400
 8001fdc:	40014800 	.word	0x40014800
 8001fe0:	40001800 	.word	0x40001800
 8001fe4:	40001c00 	.word	0x40001c00
 8001fe8:	40002000 	.word	0x40002000

08001fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f023 0201 	bic.w	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f023 0302 	bic.w	r3, r3, #2
 8002034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a20      	ldr	r2, [pc, #128]	; (80020c4 <TIM_OC1_SetConfig+0xd8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <TIM_OC1_SetConfig+0x64>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <TIM_OC1_SetConfig+0xdc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d10c      	bne.n	800206a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f023 0308 	bic.w	r3, r3, #8
 8002056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <TIM_OC1_SetConfig+0xd8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d003      	beq.n	800207a <TIM_OC1_SetConfig+0x8e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <TIM_OC1_SetConfig+0xdc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d111      	bne.n	800209e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	621a      	str	r2, [r3, #32]
}
 80020b8:	bf00      	nop
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40010400 	.word	0x40010400

080020cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	f023 0210 	bic.w	r2, r3, #16
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4313      	orrs	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f023 0320 	bic.w	r3, r3, #32
 8002116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a22      	ldr	r2, [pc, #136]	; (80021b0 <TIM_OC2_SetConfig+0xe4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <TIM_OC2_SetConfig+0x68>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a21      	ldr	r2, [pc, #132]	; (80021b4 <TIM_OC2_SetConfig+0xe8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d10d      	bne.n	8002150 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800213a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800214e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <TIM_OC2_SetConfig+0xe4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d003      	beq.n	8002160 <TIM_OC2_SetConfig+0x94>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a16      	ldr	r2, [pc, #88]	; (80021b4 <TIM_OC2_SetConfig+0xe8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d113      	bne.n	8002188 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800216e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	621a      	str	r2, [r3, #32]
}
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40010000 	.word	0x40010000
 80021b4:	40010400 	.word	0x40010400

080021b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0303 	bic.w	r3, r3, #3
 80021ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a21      	ldr	r2, [pc, #132]	; (8002298 <TIM_OC3_SetConfig+0xe0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d003      	beq.n	800221e <TIM_OC3_SetConfig+0x66>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a20      	ldr	r2, [pc, #128]	; (800229c <TIM_OC3_SetConfig+0xe4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d10d      	bne.n	800223a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a16      	ldr	r2, [pc, #88]	; (8002298 <TIM_OC3_SetConfig+0xe0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <TIM_OC3_SetConfig+0x92>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a15      	ldr	r2, [pc, #84]	; (800229c <TIM_OC3_SetConfig+0xe4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d113      	bne.n	8002272 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	621a      	str	r2, [r3, #32]
}
 800228c:	bf00      	nop
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40010000 	.word	0x40010000
 800229c:	40010400 	.word	0x40010400

080022a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	031b      	lsls	r3, r3, #12
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <TIM_OC4_SetConfig+0xa4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d003      	beq.n	8002308 <TIM_OC4_SetConfig+0x68>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a11      	ldr	r2, [pc, #68]	; (8002348 <TIM_OC4_SetConfig+0xa8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d109      	bne.n	800231c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800230e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	019b      	lsls	r3, r3, #6
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	621a      	str	r2, [r3, #32]
}
 8002336:	bf00      	nop
 8002338:	371c      	adds	r7, #28
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40010000 	.word	0x40010000
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002360:	2302      	movs	r3, #2
 8002362:	e05a      	b.n	800241a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a21      	ldr	r2, [pc, #132]	; (8002428 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d022      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b0:	d01d      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d018      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a1b      	ldr	r2, [pc, #108]	; (8002430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a1a      	ldr	r2, [pc, #104]	; (8002434 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d00e      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a18      	ldr	r2, [pc, #96]	; (8002438 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a17      	ldr	r2, [pc, #92]	; (800243c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d004      	beq.n	80023ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a15      	ldr	r2, [pc, #84]	; (8002440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10c      	bne.n	8002408 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40010000 	.word	0x40010000
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800
 8002434:	40000c00 	.word	0x40000c00
 8002438:	40010400 	.word	0x40010400
 800243c:	40014000 	.word	0x40014000
 8002440:	40001800 	.word	0x40001800

08002444 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800245c:	2302      	movs	r3, #2
 800245e:	e03d      	b.n	80024dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4313      	orrs	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e03f      	b.n	800257a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fa88 	bl	8000a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	; 0x24
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800252a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fc7b 	bl	8002e28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002540:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695a      	ldr	r2, [r3, #20]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002550:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002560:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b0ba      	sub	sp, #232	; 0xe8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_UART_IRQHandler+0x66>
 80025d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fb65 	bl	8002cb2 <UART_Receive_IT>
      return;
 80025e8:	e256      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80de 	beq.w	80027b0 <HAL_UART_IRQHandler+0x22c>
 80025f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d106      	bne.n	800260e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002604:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80d1 	beq.w	80027b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800260e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_UART_IRQHandler+0xae>
 800261a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0201 	orr.w	r2, r3, #1
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_UART_IRQHandler+0xd2>
 800263e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f043 0202 	orr.w	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_UART_IRQHandler+0xf6>
 8002662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f043 0204 	orr.w	r2, r3, #4
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800267a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d011      	beq.n	80026aa <HAL_UART_IRQHandler+0x126>
 8002686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800268a:	f003 0320 	and.w	r3, r3, #32
 800268e:	2b00      	cmp	r3, #0
 8002690:	d105      	bne.n	800269e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f043 0208 	orr.w	r2, r3, #8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 81ed 	beq.w	8002a8e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_UART_IRQHandler+0x14e>
 80026c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 faf0 	bl	8002cb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <HAL_UART_IRQHandler+0x17a>
 80026f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d04f      	beq.n	800279e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f9f8 	bl	8002af4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d141      	bne.n	8002796 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3314      	adds	r3, #20
 8002718:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002720:	e853 3f00 	ldrex	r3, [r3]
 8002724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800272c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	3314      	adds	r3, #20
 800273a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800273e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002746:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800274a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800274e:	e841 2300 	strex	r3, r2, [r1]
 8002752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1d9      	bne.n	8002712 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002762:	2b00      	cmp	r3, #0
 8002764:	d013      	beq.n	800278e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	4a7d      	ldr	r2, [pc, #500]	; (8002960 <HAL_UART_IRQHandler+0x3dc>)
 800276c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fbc3 	bl	8000efe <HAL_DMA_Abort_IT>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002788:	4610      	mov	r0, r2
 800278a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800278c:	e00e      	b.n	80027ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f99a 	bl	8002ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002794:	e00a      	b.n	80027ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f996 	bl	8002ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800279c:	e006      	b.n	80027ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f992 	bl	8002ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027aa:	e170      	b.n	8002a8e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ac:	bf00      	nop
    return;
 80027ae:	e16e      	b.n	8002a8e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	f040 814a 	bne.w	8002a4e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8143 	beq.w	8002a4e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 813c 	beq.w	8002a4e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	f040 80b4 	bne.w	8002964 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002808:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8140 	beq.w	8002a92 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800281a:	429a      	cmp	r2, r3
 800281c:	f080 8139 	bcs.w	8002a92 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002826:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002832:	f000 8088 	beq.w	8002946 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	330c      	adds	r3, #12
 800283c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002844:	e853 3f00 	ldrex	r3, [r3]
 8002848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800284c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002862:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800286e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800287a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1d9      	bne.n	8002836 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3314      	adds	r3, #20
 8002888:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3314      	adds	r3, #20
 80028a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028b2:	e841 2300 	strex	r3, r2, [r1]
 80028b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e1      	bne.n	8002882 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3314      	adds	r3, #20
 80028c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3314      	adds	r3, #20
 80028de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028ea:	e841 2300 	strex	r3, r2, [r1]
 80028ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1e3      	bne.n	80028be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	330c      	adds	r3, #12
 800290a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290e:	e853 3f00 	ldrex	r3, [r3]
 8002912:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002916:	f023 0310 	bic.w	r3, r3, #16
 800291a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	330c      	adds	r3, #12
 8002924:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002928:	65ba      	str	r2, [r7, #88]	; 0x58
 800292a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800292e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e3      	bne.n	8002904 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe fa6c 	bl	8000e1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800294e:	b29b      	uxth	r3, r3
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	b29b      	uxth	r3, r3
 8002954:	4619      	mov	r1, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f8c0 	bl	8002adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800295c:	e099      	b.n	8002a92 <HAL_UART_IRQHandler+0x50e>
 800295e:	bf00      	nop
 8002960:	08002bbb 	.word	0x08002bbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800296c:	b29b      	uxth	r3, r3
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 808b 	beq.w	8002a96 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 8086 	beq.w	8002a96 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	330c      	adds	r3, #12
 8002990:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	e853 3f00 	ldrex	r3, [r3]
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800299a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029ae:	647a      	str	r2, [r7, #68]	; 0x44
 80029b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e3      	bne.n	800298a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3314      	adds	r3, #20
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	e853 3f00 	ldrex	r3, [r3]
 80029d0:	623b      	str	r3, [r7, #32]
   return(result);
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3314      	adds	r3, #20
 80029e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029e6:	633a      	str	r2, [r7, #48]	; 0x30
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1e3      	bne.n	80029c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	e853 3f00 	ldrex	r3, [r3]
 8002a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0310 	bic.w	r3, r3, #16
 8002a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	330c      	adds	r3, #12
 8002a28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a2c:	61fa      	str	r2, [r7, #28]
 8002a2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	69b9      	ldr	r1, [r7, #24]
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	e841 2300 	strex	r3, r2, [r1]
 8002a38:	617b      	str	r3, [r7, #20]
   return(result);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e3      	bne.n	8002a08 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f848 	bl	8002adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a4c:	e023      	b.n	8002a96 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_UART_IRQHandler+0x4ea>
 8002a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8bb 	bl	8002be2 <UART_Transmit_IT>
    return;
 8002a6c:	e014      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00e      	beq.n	8002a98 <HAL_UART_IRQHandler+0x514>
 8002a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d008      	beq.n	8002a98 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f8fb 	bl	8002c82 <UART_EndTransmit_IT>
    return;
 8002a8c:	e004      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
    return;
 8002a8e:	bf00      	nop
 8002a90:	e002      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
      return;
 8002a92:	bf00      	nop
 8002a94:	e000      	b.n	8002a98 <HAL_UART_IRQHandler+0x514>
      return;
 8002a96:	bf00      	nop
  }
}
 8002a98:	37e8      	adds	r7, #232	; 0xe8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop

08002aa0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b095      	sub	sp, #84	; 0x54
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	330c      	adds	r3, #12
 8002b02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b06:	e853 3f00 	ldrex	r3, [r3]
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b1c:	643a      	str	r2, [r7, #64]	; 0x40
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b24:	e841 2300 	strex	r3, r2, [r1]
 8002b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e5      	bne.n	8002afc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	3314      	adds	r3, #20
 8002b36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	e853 3f00 	ldrex	r3, [r3]
 8002b3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	3314      	adds	r3, #20
 8002b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b58:	e841 2300 	strex	r3, r2, [r1]
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e5      	bne.n	8002b30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d119      	bne.n	8002ba0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	330c      	adds	r3, #12
 8002b72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	e853 3f00 	ldrex	r3, [r3]
 8002b7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f023 0310 	bic.w	r3, r3, #16
 8002b82:	647b      	str	r3, [r7, #68]	; 0x44
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	330c      	adds	r3, #12
 8002b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b8c:	61ba      	str	r2, [r7, #24]
 8002b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b90:	6979      	ldr	r1, [r7, #20]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	e841 2300 	strex	r3, r2, [r1]
 8002b98:	613b      	str	r3, [r7, #16]
   return(result);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1e5      	bne.n	8002b6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bae:	bf00      	nop
 8002bb0:	3754      	adds	r7, #84	; 0x54
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7ff ff77 	bl	8002ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b21      	cmp	r3, #33	; 0x21
 8002bf4:	d13e      	bne.n	8002c74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfe:	d114      	bne.n	8002c2a <UART_Transmit_IT+0x48>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d110      	bne.n	8002c2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	1c9a      	adds	r2, r3, #2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	621a      	str	r2, [r3, #32]
 8002c28:	e008      	b.n	8002c3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	1c59      	adds	r1, r3, #1
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6211      	str	r1, [r2, #32]
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10f      	bne.n	8002c70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
 8002c72:	e000      	b.n	8002c76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
  }
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fefc 	bl	8002aa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b08c      	sub	sp, #48	; 0x30
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b22      	cmp	r3, #34	; 0x22
 8002cc4:	f040 80ab 	bne.w	8002e1e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd0:	d117      	bne.n	8002d02 <UART_Receive_IT+0x50>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d113      	bne.n	8002d02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	1c9a      	adds	r2, r3, #2
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
 8002d00:	e026      	b.n	8002d50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d14:	d007      	beq.n	8002d26 <UART_Receive_IT+0x74>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <UART_Receive_IT+0x82>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d106      	bne.n	8002d34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	701a      	strb	r2, [r3, #0]
 8002d32:	e008      	b.n	8002d46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d15a      	bne.n	8002e1a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0220 	bic.w	r2, r2, #32
 8002d72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68da      	ldr	r2, [r3, #12]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0201 	bic.w	r2, r2, #1
 8002d92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d135      	bne.n	8002e10 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	330c      	adds	r3, #12
 8002db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	613b      	str	r3, [r7, #16]
   return(result);
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f023 0310 	bic.w	r3, r3, #16
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dca:	623a      	str	r2, [r7, #32]
 8002dcc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	69f9      	ldr	r1, [r7, #28]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e5      	bne.n	8002daa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0310 	and.w	r3, r3, #16
 8002de8:	2b10      	cmp	r3, #16
 8002dea:	d10a      	bne.n	8002e02 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e06:	4619      	mov	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff fe67 	bl	8002adc <HAL_UARTEx_RxEventCallback>
 8002e0e:	e002      	b.n	8002e16 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff fe4f 	bl	8002ab4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e002      	b.n	8002e20 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e000      	b.n	8002e20 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
  }
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3730      	adds	r7, #48	; 0x30
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b0c0      	sub	sp, #256	; 0x100
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	68d9      	ldr	r1, [r3, #12]
 8002e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	ea40 0301 	orr.w	r3, r0, r1
 8002e50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e80:	f021 010c 	bic.w	r1, r1, #12
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea2:	6999      	ldr	r1, [r3, #24]
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	ea40 0301 	orr.w	r3, r0, r1
 8002eae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b8f      	ldr	r3, [pc, #572]	; (80030f4 <UART_SetConfig+0x2cc>)
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d005      	beq.n	8002ec8 <UART_SetConfig+0xa0>
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	4b8d      	ldr	r3, [pc, #564]	; (80030f8 <UART_SetConfig+0x2d0>)
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d104      	bne.n	8002ed2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ec8:	f7fe fe7c 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8002ecc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ed0:	e003      	b.n	8002eda <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ed2:	f7fe fe63 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8002ed6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee4:	f040 810c 	bne.w	8003100 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eec:	2200      	movs	r2, #0
 8002eee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ef2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ef6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002efa:	4622      	mov	r2, r4
 8002efc:	462b      	mov	r3, r5
 8002efe:	1891      	adds	r1, r2, r2
 8002f00:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f02:	415b      	adcs	r3, r3
 8002f04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	eb12 0801 	adds.w	r8, r2, r1
 8002f10:	4629      	mov	r1, r5
 8002f12:	eb43 0901 	adc.w	r9, r3, r1
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	eb18 0303 	adds.w	r3, r8, r3
 8002f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f38:	462b      	mov	r3, r5
 8002f3a:	eb49 0303 	adc.w	r3, r9, r3
 8002f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f56:	460b      	mov	r3, r1
 8002f58:	18db      	adds	r3, r3, r3
 8002f5a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	eb42 0303 	adc.w	r3, r2, r3
 8002f62:	657b      	str	r3, [r7, #84]	; 0x54
 8002f64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f6c:	f7fd f93e 	bl	80001ec <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4b61      	ldr	r3, [pc, #388]	; (80030fc <UART_SetConfig+0x2d4>)
 8002f76:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	011c      	lsls	r4, r3, #4
 8002f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f82:	2200      	movs	r2, #0
 8002f84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f90:	4642      	mov	r2, r8
 8002f92:	464b      	mov	r3, r9
 8002f94:	1891      	adds	r1, r2, r2
 8002f96:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f98:	415b      	adcs	r3, r3
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	eb12 0a01 	adds.w	sl, r2, r1
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	eb43 0b01 	adc.w	fp, r3, r1
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fc0:	4692      	mov	sl, r2
 8002fc2:	469b      	mov	fp, r3
 8002fc4:	4643      	mov	r3, r8
 8002fc6:	eb1a 0303 	adds.w	r3, sl, r3
 8002fca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	eb4b 0303 	adc.w	r3, fp, r3
 8002fd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fe4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fe8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fec:	460b      	mov	r3, r1
 8002fee:	18db      	adds	r3, r3, r3
 8002ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	eb42 0303 	adc.w	r3, r2, r3
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ffe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003002:	f7fd f8f3 	bl	80001ec <__aeabi_uldivmod>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4611      	mov	r1, r2
 800300c:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <UART_SetConfig+0x2d4>)
 800300e:	fba3 2301 	umull	r2, r3, r3, r1
 8003012:	095b      	lsrs	r3, r3, #5
 8003014:	2264      	movs	r2, #100	; 0x64
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	1acb      	subs	r3, r1, r3
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003022:	4b36      	ldr	r3, [pc, #216]	; (80030fc <UART_SetConfig+0x2d4>)
 8003024:	fba3 2302 	umull	r2, r3, r3, r2
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003030:	441c      	add	r4, r3
 8003032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003036:	2200      	movs	r2, #0
 8003038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800303c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003040:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003044:	4642      	mov	r2, r8
 8003046:	464b      	mov	r3, r9
 8003048:	1891      	adds	r1, r2, r2
 800304a:	63b9      	str	r1, [r7, #56]	; 0x38
 800304c:	415b      	adcs	r3, r3
 800304e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003050:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003054:	4641      	mov	r1, r8
 8003056:	1851      	adds	r1, r2, r1
 8003058:	6339      	str	r1, [r7, #48]	; 0x30
 800305a:	4649      	mov	r1, r9
 800305c:	414b      	adcs	r3, r1
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800306c:	4659      	mov	r1, fp
 800306e:	00cb      	lsls	r3, r1, #3
 8003070:	4651      	mov	r1, sl
 8003072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003076:	4651      	mov	r1, sl
 8003078:	00ca      	lsls	r2, r1, #3
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	4603      	mov	r3, r0
 8003080:	4642      	mov	r2, r8
 8003082:	189b      	adds	r3, r3, r2
 8003084:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003088:	464b      	mov	r3, r9
 800308a:	460a      	mov	r2, r1
 800308c:	eb42 0303 	adc.w	r3, r2, r3
 8003090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030a8:	460b      	mov	r3, r1
 80030aa:	18db      	adds	r3, r3, r3
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ae:	4613      	mov	r3, r2
 80030b0:	eb42 0303 	adc.w	r3, r2, r3
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030be:	f7fd f895 	bl	80001ec <__aeabi_uldivmod>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4b0d      	ldr	r3, [pc, #52]	; (80030fc <UART_SetConfig+0x2d4>)
 80030c8:	fba3 1302 	umull	r1, r3, r3, r2
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	2164      	movs	r1, #100	; 0x64
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	3332      	adds	r3, #50	; 0x32
 80030da:	4a08      	ldr	r2, [pc, #32]	; (80030fc <UART_SetConfig+0x2d4>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	f003 0207 	and.w	r2, r3, #7
 80030e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4422      	add	r2, r4
 80030ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030f0:	e105      	b.n	80032fe <UART_SetConfig+0x4d6>
 80030f2:	bf00      	nop
 80030f4:	40011000 	.word	0x40011000
 80030f8:	40011400 	.word	0x40011400
 80030fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003104:	2200      	movs	r2, #0
 8003106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800310a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800310e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003112:	4642      	mov	r2, r8
 8003114:	464b      	mov	r3, r9
 8003116:	1891      	adds	r1, r2, r2
 8003118:	6239      	str	r1, [r7, #32]
 800311a:	415b      	adcs	r3, r3
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003122:	4641      	mov	r1, r8
 8003124:	1854      	adds	r4, r2, r1
 8003126:	4649      	mov	r1, r9
 8003128:	eb43 0501 	adc.w	r5, r3, r1
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	00eb      	lsls	r3, r5, #3
 8003136:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800313a:	00e2      	lsls	r2, r4, #3
 800313c:	4614      	mov	r4, r2
 800313e:	461d      	mov	r5, r3
 8003140:	4643      	mov	r3, r8
 8003142:	18e3      	adds	r3, r4, r3
 8003144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003148:	464b      	mov	r3, r9
 800314a:	eb45 0303 	adc.w	r3, r5, r3
 800314e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800315e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800316e:	4629      	mov	r1, r5
 8003170:	008b      	lsls	r3, r1, #2
 8003172:	4621      	mov	r1, r4
 8003174:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003178:	4621      	mov	r1, r4
 800317a:	008a      	lsls	r2, r1, #2
 800317c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003180:	f7fd f834 	bl	80001ec <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4b60      	ldr	r3, [pc, #384]	; (800330c <UART_SetConfig+0x4e4>)
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	011c      	lsls	r4, r3, #4
 8003192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003196:	2200      	movs	r2, #0
 8003198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800319c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031a4:	4642      	mov	r2, r8
 80031a6:	464b      	mov	r3, r9
 80031a8:	1891      	adds	r1, r2, r2
 80031aa:	61b9      	str	r1, [r7, #24]
 80031ac:	415b      	adcs	r3, r3
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b4:	4641      	mov	r1, r8
 80031b6:	1851      	adds	r1, r2, r1
 80031b8:	6139      	str	r1, [r7, #16]
 80031ba:	4649      	mov	r1, r9
 80031bc:	414b      	adcs	r3, r1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031cc:	4659      	mov	r1, fp
 80031ce:	00cb      	lsls	r3, r1, #3
 80031d0:	4651      	mov	r1, sl
 80031d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031d6:	4651      	mov	r1, sl
 80031d8:	00ca      	lsls	r2, r1, #3
 80031da:	4610      	mov	r0, r2
 80031dc:	4619      	mov	r1, r3
 80031de:	4603      	mov	r3, r0
 80031e0:	4642      	mov	r2, r8
 80031e2:	189b      	adds	r3, r3, r2
 80031e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e8:	464b      	mov	r3, r9
 80031ea:	460a      	mov	r2, r1
 80031ec:	eb42 0303 	adc.w	r3, r2, r3
 80031f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80031fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	f04f 0300 	mov.w	r3, #0
 8003208:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800320c:	4649      	mov	r1, r9
 800320e:	008b      	lsls	r3, r1, #2
 8003210:	4641      	mov	r1, r8
 8003212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003216:	4641      	mov	r1, r8
 8003218:	008a      	lsls	r2, r1, #2
 800321a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800321e:	f7fc ffe5 	bl	80001ec <__aeabi_uldivmod>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4b39      	ldr	r3, [pc, #228]	; (800330c <UART_SetConfig+0x4e4>)
 8003228:	fba3 1302 	umull	r1, r3, r3, r2
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	2164      	movs	r1, #100	; 0x64
 8003230:	fb01 f303 	mul.w	r3, r1, r3
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	3332      	adds	r3, #50	; 0x32
 800323a:	4a34      	ldr	r2, [pc, #208]	; (800330c <UART_SetConfig+0x4e4>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003246:	441c      	add	r4, r3
 8003248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800324c:	2200      	movs	r2, #0
 800324e:	673b      	str	r3, [r7, #112]	; 0x70
 8003250:	677a      	str	r2, [r7, #116]	; 0x74
 8003252:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003256:	4642      	mov	r2, r8
 8003258:	464b      	mov	r3, r9
 800325a:	1891      	adds	r1, r2, r2
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	415b      	adcs	r3, r3
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003266:	4641      	mov	r1, r8
 8003268:	1851      	adds	r1, r2, r1
 800326a:	6039      	str	r1, [r7, #0]
 800326c:	4649      	mov	r1, r9
 800326e:	414b      	adcs	r3, r1
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800327e:	4659      	mov	r1, fp
 8003280:	00cb      	lsls	r3, r1, #3
 8003282:	4651      	mov	r1, sl
 8003284:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003288:	4651      	mov	r1, sl
 800328a:	00ca      	lsls	r2, r1, #3
 800328c:	4610      	mov	r0, r2
 800328e:	4619      	mov	r1, r3
 8003290:	4603      	mov	r3, r0
 8003292:	4642      	mov	r2, r8
 8003294:	189b      	adds	r3, r3, r2
 8003296:	66bb      	str	r3, [r7, #104]	; 0x68
 8003298:	464b      	mov	r3, r9
 800329a:	460a      	mov	r2, r1
 800329c:	eb42 0303 	adc.w	r3, r2, r3
 80032a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	663b      	str	r3, [r7, #96]	; 0x60
 80032ac:	667a      	str	r2, [r7, #100]	; 0x64
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032ba:	4649      	mov	r1, r9
 80032bc:	008b      	lsls	r3, r1, #2
 80032be:	4641      	mov	r1, r8
 80032c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c4:	4641      	mov	r1, r8
 80032c6:	008a      	lsls	r2, r1, #2
 80032c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032cc:	f7fc ff8e 	bl	80001ec <__aeabi_uldivmod>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <UART_SetConfig+0x4e4>)
 80032d6:	fba3 1302 	umull	r1, r3, r3, r2
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2164      	movs	r1, #100	; 0x64
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	3332      	adds	r3, #50	; 0x32
 80032e8:	4a08      	ldr	r2, [pc, #32]	; (800330c <UART_SetConfig+0x4e4>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	f003 020f 	and.w	r2, r3, #15
 80032f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4422      	add	r2, r4
 80032fc:	609a      	str	r2, [r3, #8]
}
 80032fe:	bf00      	nop
 8003300:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003304:	46bd      	mov	sp, r7
 8003306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330a:	bf00      	nop
 800330c:	51eb851f 	.word	0x51eb851f

08003310 <__libc_init_array>:
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	4d0d      	ldr	r5, [pc, #52]	; (8003348 <__libc_init_array+0x38>)
 8003314:	4c0d      	ldr	r4, [pc, #52]	; (800334c <__libc_init_array+0x3c>)
 8003316:	1b64      	subs	r4, r4, r5
 8003318:	10a4      	asrs	r4, r4, #2
 800331a:	2600      	movs	r6, #0
 800331c:	42a6      	cmp	r6, r4
 800331e:	d109      	bne.n	8003334 <__libc_init_array+0x24>
 8003320:	4d0b      	ldr	r5, [pc, #44]	; (8003350 <__libc_init_array+0x40>)
 8003322:	4c0c      	ldr	r4, [pc, #48]	; (8003354 <__libc_init_array+0x44>)
 8003324:	f000 f820 	bl	8003368 <_init>
 8003328:	1b64      	subs	r4, r4, r5
 800332a:	10a4      	asrs	r4, r4, #2
 800332c:	2600      	movs	r6, #0
 800332e:	42a6      	cmp	r6, r4
 8003330:	d105      	bne.n	800333e <__libc_init_array+0x2e>
 8003332:	bd70      	pop	{r4, r5, r6, pc}
 8003334:	f855 3b04 	ldr.w	r3, [r5], #4
 8003338:	4798      	blx	r3
 800333a:	3601      	adds	r6, #1
 800333c:	e7ee      	b.n	800331c <__libc_init_array+0xc>
 800333e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003342:	4798      	blx	r3
 8003344:	3601      	adds	r6, #1
 8003346:	e7f2      	b.n	800332e <__libc_init_array+0x1e>
 8003348:	080033a0 	.word	0x080033a0
 800334c:	080033a0 	.word	0x080033a0
 8003350:	080033a0 	.word	0x080033a0
 8003354:	080033a4 	.word	0x080033a4

08003358 <memset>:
 8003358:	4402      	add	r2, r0
 800335a:	4603      	mov	r3, r0
 800335c:	4293      	cmp	r3, r2
 800335e:	d100      	bne.n	8003362 <memset+0xa>
 8003360:	4770      	bx	lr
 8003362:	f803 1b01 	strb.w	r1, [r3], #1
 8003366:	e7f9      	b.n	800335c <memset+0x4>

08003368 <_init>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr

08003374 <_fini>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr
