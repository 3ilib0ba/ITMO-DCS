
Lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000487c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b38  08004b38  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b40  08004b40  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08004b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a0  2**0
                  CONTENTS
 10 .bss          000001d8  200001a0  200001a0  000201a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000378  20000378  000201a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f410  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b5  00000000  00000000  0002f5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00031b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb8  00000000  00000000  00032968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f13  00000000  00000000  00033620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a02  00000000  00000000  00057533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8033  00000000  00000000  00067f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ff68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c64  00000000  00000000  0013ffb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004a14 	.word	0x08004a14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	08004a14 	.word	0x08004a14

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <MX_GPIO_Init+0x84>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <MX_GPIO_Init+0x84>)
 80005b4:	f043 0310 	orr.w	r3, r3, #16
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_GPIO_Init+0x84>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0310 	and.w	r3, r3, #16
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_GPIO_Init+0x84>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <MX_GPIO_Init+0x84>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_GPIO_Init+0x84>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_GPIO_Init+0x84>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <MX_GPIO_Init+0x84>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_GPIO_Init+0x84>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_GPIO_Init+0x84>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <MX_GPIO_Init+0x84>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_GPIO_Init+0x84>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fe42 	bl	80012b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f812 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f7ff ffb4 	bl	80005a4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800063c:	f000 fd98 	bl	8001170 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000640:	f000 fc58 	bl	8000ef4 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000644:	f000 fcda 	bl	8000ffc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	set_default_value_for_sound();
 8000648:	f000 f96c 	bl	8000924 <set_default_value_for_sound>
	set_default_value_for_uart();
 800064c:	f000 fafe 	bl	8000c4c <set_default_value_for_uart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		parse_symbol_if_available();
 8000650:	f000 f875 	bl	800073e <parse_symbol_if_available>
		send_message_by_uart_if_available();
 8000654:	f000 fad6 	bl	8000c04 <send_message_by_uart_if_available>
	while (1) {
 8000658:	e7fa      	b.n	8000650 <main+0x24>
	...

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fd44 	bl	80040f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a28      	ldr	r2, [pc, #160]	; (800072c <SystemClock_Config+0xd0>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <SystemClock_Config+0xd4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd4>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80006d4:	2340      	movs	r3, #64	; 0x40
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 f9a9 	bl	8001a3c <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f0:	f000 f820 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 80006fc:	23c0      	movs	r3, #192	; 0xc0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000706:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fc0a 	bl	8001f2c <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071e:	f000 f809 	bl	8000734 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>

0800073e <parse_symbol_if_available>:
#include "my_sound.h"
#include "my_uart.h"

//public functions start

void parse_symbol_if_available() {
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
	char* symb = read_char_by_uart();
 8000744:	f000 fa40 	bl	8000bc8 <read_char_by_uart>
 8000748:	6078      	str	r0, [r7, #4]
	if (symb == NULL)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d005      	beq.n	800075c <parse_symbol_if_available+0x1e>
		return;
	parse_symbol(*symb);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f805 	bl	8000764 <parse_symbol>
 800075a:	e000      	b.n	800075e <parse_symbol_if_available+0x20>
		return;
 800075c:	bf00      	nop
}
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <parse_symbol>:

//public functions start
void parse_symbol(char symbol){
 8000764:	b580      	push	{r7, lr}
 8000766:	b09c      	sub	sp, #112	; 0x70
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	char answer[100];
	if (symbol >= '1' && symbol <= '7') {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b30      	cmp	r3, #48	; 0x30
 8000772:	d909      	bls.n	8000788 <parse_symbol+0x24>
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b37      	cmp	r3, #55	; 0x37
 8000778:	d806      	bhi.n	8000788 <parse_symbol+0x24>
		uint32_t note_index = symbol - '1';
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3b31      	subs	r3, #49	; 0x31
 800077e:	66fb      	str	r3, [r7, #108]	; 0x6c
		play(note_index);
 8000780:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000782:	f000 f90f 	bl	80009a4 <play>
	if (symbol >= '1' && symbol <= '7') {
 8000786:	e064      	b.n	8000852 <parse_symbol+0xee>
	} else {
		switch (symbol) {
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	2b61      	cmp	r3, #97	; 0x61
 800078c:	d02f      	beq.n	80007ee <parse_symbol+0x8a>
 800078e:	2b61      	cmp	r3, #97	; 0x61
 8000790:	dc52      	bgt.n	8000838 <parse_symbol+0xd4>
 8000792:	2b41      	cmp	r3, #65	; 0x41
 8000794:	d03c      	beq.n	8000810 <parse_symbol+0xac>
 8000796:	2b41      	cmp	r3, #65	; 0x41
 8000798:	dc4e      	bgt.n	8000838 <parse_symbol+0xd4>
 800079a:	2b2d      	cmp	r3, #45	; 0x2d
 800079c:	d016      	beq.n	80007cc <parse_symbol+0x68>
 800079e:	2b2d      	cmp	r3, #45	; 0x2d
 80007a0:	dc4a      	bgt.n	8000838 <parse_symbol+0xd4>
 80007a2:	2b0d      	cmp	r3, #13
 80007a4:	d045      	beq.n	8000832 <parse_symbol+0xce>
 80007a6:	2b2b      	cmp	r3, #43	; 0x2b
 80007a8:	d146      	bne.n	8000838 <parse_symbol+0xd4>
		case '+':
			octave_increase_if_available();
 80007aa:	f000 f97b 	bl	8000aa4 <octave_increase_if_available>
			sprintf(answer, "New octave_index is: %d",
 80007ae:	f000 f8d1 	bl	8000954 <get_current_octave_number>
 80007b2:	4602      	mov	r2, r0
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	4928      	ldr	r1, [pc, #160]	; (800085c <parse_symbol+0xf8>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 fd94 	bl	80042e8 <siprintf>
					get_current_octave_number());
			append_to_sending_buffer_by_uart(answer);
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fa51 	bl	8000c6c <append_to_sending_buffer_by_uart>
			break;
 80007ca:	e042      	b.n	8000852 <parse_symbol+0xee>
		case '-':
			octave_decrease_if_available();
 80007cc:	f000 f958 	bl	8000a80 <octave_decrease_if_available>
			sprintf(answer, "New octave_index is: %d",
 80007d0:	f000 f8c0 	bl	8000954 <get_current_octave_number>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	4920      	ldr	r1, [pc, #128]	; (800085c <parse_symbol+0xf8>)
 80007dc:	4618      	mov	r0, r3
 80007de:	f003 fd83 	bl	80042e8 <siprintf>
					get_current_octave_number());
			append_to_sending_buffer_by_uart(answer);
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fa40 	bl	8000c6c <append_to_sending_buffer_by_uart>
			break;
 80007ec:	e031      	b.n	8000852 <parse_symbol+0xee>
		case 'a':
			duration_decrease_if_available();
 80007ee:	f000 f96b 	bl	8000ac8 <duration_decrease_if_available>
			sprintf(answer, "New duration is: %d ms", get_current_duration());
 80007f2:	f000 f8bb 	bl	800096c <get_current_duration>
 80007f6:	4602      	mov	r2, r0
 80007f8:	f107 0308 	add.w	r3, r7, #8
 80007fc:	4918      	ldr	r1, [pc, #96]	; (8000860 <parse_symbol+0xfc>)
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 fd72 	bl	80042e8 <siprintf>
			append_to_sending_buffer_by_uart(answer);
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fa2f 	bl	8000c6c <append_to_sending_buffer_by_uart>
			break;
 800080e:	e020      	b.n	8000852 <parse_symbol+0xee>
		case 'A':
			duration_increase_if_available();
 8000810:	f000 f972 	bl	8000af8 <duration_increase_if_available>
			sprintf(answer, "New duration is: %d ms", get_current_duration());
 8000814:	f000 f8aa 	bl	800096c <get_current_duration>
 8000818:	4602      	mov	r2, r0
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4910      	ldr	r1, [pc, #64]	; (8000860 <parse_symbol+0xfc>)
 8000820:	4618      	mov	r0, r3
 8000822:	f003 fd61 	bl	80042e8 <siprintf>
			append_to_sending_buffer_by_uart(answer);
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fa1e 	bl	8000c6c <append_to_sending_buffer_by_uart>
			break;
 8000830:	e00f      	b.n	8000852 <parse_symbol+0xee>
		case '\r':
			start_all_playing();
 8000832:	f000 f907 	bl	8000a44 <start_all_playing>
			break;
 8000836:	e00c      	b.n	8000852 <parse_symbol+0xee>
		default:
			sprintf(answer, "Incorrect symbol %u", symbol);
 8000838:	79fa      	ldrb	r2, [r7, #7]
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	4909      	ldr	r1, [pc, #36]	; (8000864 <parse_symbol+0x100>)
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fd51 	bl	80042e8 <siprintf>
			append_to_sending_buffer_by_uart(answer);
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fa0e 	bl	8000c6c <append_to_sending_buffer_by_uart>
			break;
 8000850:	bf00      	nop
		}
	}
}
 8000852:	bf00      	nop
 8000854:	3770      	adds	r7, #112	; 0x70
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	08004a2c 	.word	0x08004a2c
 8000860:	08004a44 	.word	0x08004a44
 8000864:	08004a5c 	.word	0x08004a5c

08000868 <restart_timer>:
uint32_t octave_index = 4;
uint32_t duration = 1000;
uint8_t is_all_playing = 0;
char *note_name[] = { "До", "Ре", "Ми", "Фа", "Соль", "Ля", "Си" };

void restart_timer() {
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
	TIM6->CNT = 0;
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <restart_timer+0x14>)
 800086e:	2200      	movs	r2, #0
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	40001000 	.word	0x40001000

08000880 <mute>:

void mute() {
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <mute+0x14>)
 8000886:	2200      	movs	r2, #0
 8000888:	635a      	str	r2, [r3, #52]	; 0x34
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40010000 	.word	0x40010000

08000898 <unmute>:

void unmute() {
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = TIM1->ARR / 2;
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <unmute+0x18>)
 800089e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a0:	4a03      	ldr	r2, [pc, #12]	; (80008b0 <unmute+0x18>)
 80008a2:	085b      	lsrs	r3, r3, #1
 80008a4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40010000 	.word	0x40010000

080008b4 <set_frequency>:

void set_frequency(uint32_t freq_millis) {
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	TIM1->PSC = (125000) / ((freq_millis / 1000) * (TIM1->ARR + 1)) -1;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <set_frequency+0x34>)
 80008c0:	fba2 2303 	umull	r2, r3, r2, r3
 80008c4:	099b      	lsrs	r3, r3, #6
 80008c6:	4a09      	ldr	r2, [pc, #36]	; (80008ec <set_frequency+0x38>)
 80008c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80008ca:	3201      	adds	r2, #1
 80008cc:	fb02 f303 	mul.w	r3, r2, r3
 80008d0:	4a07      	ldr	r2, [pc, #28]	; (80008f0 <set_frequency+0x3c>)
 80008d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <set_frequency+0x38>)
 80008d8:	3b01      	subs	r3, #1
 80008da:	6293      	str	r3, [r2, #40]	; 0x28
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	10624dd3 	.word	0x10624dd3
 80008ec:	40010000 	.word	0x40010000
 80008f0:	0001e848 	.word	0x0001e848

080008f4 <get_frequency_by_index>:

uint32_t get_frequency_by_index(uint32_t index) {
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	return freqs[index + (octave_index * OCTAVE_SIZE)];
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <get_frequency_by_index+0x28>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2207      	movs	r2, #7
 8000902:	fb03 f202 	mul.w	r2, r3, r2
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <get_frequency_by_index+0x2c>)
 800090c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	200000fc 	.word	0x200000fc
 8000920:	20000000 	.word	0x20000000

08000924 <set_default_value_for_sound>:

//public functions start

void set_default_value_for_sound() {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000928:	2100      	movs	r1, #0
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <set_default_value_for_sound+0x20>)
 800092c:	f001 fdee 	bl	800250c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <set_default_value_for_sound+0x24>)
 8000932:	f001 fd2b 	bl	800238c <HAL_TIM_Base_Start_IT>
	TIM6->ARR = duration;
 8000936:	4a05      	ldr	r2, [pc, #20]	; (800094c <set_default_value_for_sound+0x28>)
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <set_default_value_for_sound+0x2c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000290 	.word	0x20000290
 8000948:	200002d8 	.word	0x200002d8
 800094c:	40001000 	.word	0x40001000
 8000950:	20000100 	.word	0x20000100

08000954 <get_current_octave_number>:

uint32_t get_current_octave_number() {
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
	return octave_index + 1;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <get_current_octave_number+0x14>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	200000fc 	.word	0x200000fc

0800096c <get_current_duration>:
uint32_t get_current_duration() {
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
	return duration;
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <get_current_duration+0x14>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000100 	.word	0x20000100

08000984 <get_note_name>:
char* get_note_name(uint32_t index) {
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	return note_name[index];
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <get_note_name+0x1c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	20000104 	.word	0x20000104

080009a4 <play>:

void play(uint32_t note_index) {
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b09d      	sub	sp, #116	; 0x74
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	int freq = get_frequency_by_index(note_index);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ffa1 	bl	80008f4 <get_frequency_by_index>
 80009b2:	4603      	mov	r3, r0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (freq > 0) {
 80009b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dd1a      	ble.n	80009f2 <play+0x4e>
		set_frequency(freq);
 80009bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff78 	bl	80008b4 <set_frequency>
		restart_timer();
 80009c4:	f7ff ff50 	bl	8000868 <restart_timer>
		unmute();
 80009c8:	f7ff ff66 	bl	8000898 <unmute>
		char answer[100];
		sprintf(answer, "Note: %s, octave: %d", get_note_name(note_index),
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ffd9 	bl	8000984 <get_note_name>
 80009d2:	4604      	mov	r4, r0
 80009d4:	f7ff ffbe 	bl	8000954 <get_current_octave_number>
 80009d8:	4603      	mov	r3, r0
 80009da:	f107 0008 	add.w	r0, r7, #8
 80009de:	4622      	mov	r2, r4
 80009e0:	4913      	ldr	r1, [pc, #76]	; (8000a30 <play+0x8c>)
 80009e2:	f003 fc81 	bl	80042e8 <siprintf>
				get_current_octave_number());
		append_to_sending_buffer_by_uart(answer);
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	4618      	mov	r0, r3
 80009ec:	f000 f93e 	bl	8000c6c <append_to_sending_buffer_by_uart>
					note_name[note_index], octave_index + 1);
			append_to_sending_buffer_by_uart(answer);
		}
	}

}
 80009f0:	e01a      	b.n	8000a28 <play+0x84>
		if (is_all_playing) {
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <play+0x90>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d005      	beq.n	8000a06 <play+0x62>
			mute();
 80009fa:	f7ff ff41 	bl	8000880 <mute>
			is_all_playing = 0;
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <play+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
}
 8000a04:	e010      	b.n	8000a28 <play+0x84>
			sprintf(answer, "There is no note: %s in octave: %d!",
 8000a06:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <play+0x94>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <play+0x98>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	f107 0008 	add.w	r0, r7, #8
 8000a18:	4909      	ldr	r1, [pc, #36]	; (8000a40 <play+0x9c>)
 8000a1a:	f003 fc65 	bl	80042e8 <siprintf>
			append_to_sending_buffer_by_uart(answer);
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f922 	bl	8000c6c <append_to_sending_buffer_by_uart>
}
 8000a28:	bf00      	nop
 8000a2a:	3774      	adds	r7, #116	; 0x74
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	08004aac 	.word	0x08004aac
 8000a34:	200001c0 	.word	0x200001c0
 8000a38:	20000104 	.word	0x20000104
 8000a3c:	200000fc 	.word	0x200000fc
 8000a40:	08004ac4 	.word	0x08004ac4

08000a44 <start_all_playing>:

void start_all_playing() {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	is_all_playing = 1;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <start_all_playing+0x30>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
	if (octave_index > 0)
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <start_all_playing+0x34>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <start_all_playing+0x1a>
		note_index = 0;
 8000a56:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <start_all_playing+0x38>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	e002      	b.n	8000a64 <start_all_playing+0x20>
	else
		note_index = 2;
 8000a5e:	4b07      	ldr	r3, [pc, #28]	; (8000a7c <start_all_playing+0x38>)
 8000a60:	2202      	movs	r2, #2
 8000a62:	601a      	str	r2, [r3, #0]
	play(note_index);
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <start_all_playing+0x38>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff9b 	bl	80009a4 <play>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200001c0 	.word	0x200001c0
 8000a78:	200000fc 	.word	0x200000fc
 8000a7c:	200001bc 	.word	0x200001bc

08000a80 <octave_decrease_if_available>:

void octave_decrease_if_available() {
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	if (octave_index > 0)
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <octave_decrease_if_available+0x20>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d004      	beq.n	8000a96 <octave_decrease_if_available+0x16>
		octave_index--;
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <octave_decrease_if_available+0x20>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <octave_decrease_if_available+0x20>)
 8000a94:	6013      	str	r3, [r2, #0]
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	200000fc 	.word	0x200000fc

08000aa4 <octave_increase_if_available>:

void octave_increase_if_available() {
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
	if (octave_index < 8)
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <octave_increase_if_available+0x20>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b07      	cmp	r3, #7
 8000aae:	d804      	bhi.n	8000aba <octave_increase_if_available+0x16>
		octave_index++;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <octave_increase_if_available+0x20>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	4a03      	ldr	r2, [pc, #12]	; (8000ac4 <octave_increase_if_available+0x20>)
 8000ab8:	6013      	str	r3, [r2, #0]
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	200000fc 	.word	0x200000fc

08000ac8 <duration_decrease_if_available>:

void duration_decrease_if_available() {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	if (duration > 100) {
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <duration_decrease_if_available+0x28>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b64      	cmp	r3, #100	; 0x64
 8000ad2:	d90a      	bls.n	8000aea <duration_decrease_if_available+0x22>
		duration -= 100;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <duration_decrease_if_available+0x28>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	3b64      	subs	r3, #100	; 0x64
 8000ada:	4a05      	ldr	r2, [pc, #20]	; (8000af0 <duration_decrease_if_available+0x28>)
 8000adc:	6013      	str	r3, [r2, #0]
		TIM6->ARR = duration;
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <duration_decrease_if_available+0x2c>)
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <duration_decrease_if_available+0x28>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
		restart_timer();
 8000ae6:	f7ff febf 	bl	8000868 <restart_timer>
	}
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000100 	.word	0x20000100
 8000af4:	40001000 	.word	0x40001000

08000af8 <duration_increase_if_available>:

void duration_increase_if_available() {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	if (duration < 5000) {
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <duration_increase_if_available+0x2c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f241 3287 	movw	r2, #4999	; 0x1387
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d80a      	bhi.n	8000b1e <duration_increase_if_available+0x26>
		duration += 100;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <duration_increase_if_available+0x2c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3364      	adds	r3, #100	; 0x64
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <duration_increase_if_available+0x2c>)
 8000b10:	6013      	str	r3, [r2, #0]
		TIM6->ARR = duration;
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <duration_increase_if_available+0x30>)
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <duration_increase_if_available+0x2c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	62d3      	str	r3, [r2, #44]	; 0x2c
		restart_timer();
 8000b1a:	f7ff fea5 	bl	8000868 <restart_timer>
	}
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000100 	.word	0x20000100
 8000b28:	40001000 	.word	0x40001000

08000b2c <HAL_TIM_PeriodElapsedCallback>:
//public functions start

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d118      	bne.n	8000b70 <HAL_TIM_PeriodElapsedCallback+0x44>
		mute();
 8000b3e:	f7ff fe9f 	bl	8000880 <mute>
		if (is_all_playing){
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d012      	beq.n	8000b70 <HAL_TIM_PeriodElapsedCallback+0x44>
			note_index++;
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b52:	6013      	str	r3, [r2, #0]
			if (note_index < OCTAVE_SIZE)
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2207      	movs	r2, #7
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d205      	bcs.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x3e>
				play(note_index);
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff1e 	bl	80009a4 <play>
			else
				is_all_playing = 0;
		}
	}
}
 8000b68:	e002      	b.n	8000b70 <HAL_TIM_PeriodElapsedCallback+0x44>
				is_all_playing = 0;
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40001000 	.word	0x40001000
 8000b7c:	200001c0 	.word	0x200001c0
 8000b80:	200001bc 	.word	0x200001bc

08000b84 <concat>:

#include "my_string.h"

//public functions start

char* concat(char *s1, char *s2) {
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
	char *result = malloc(strlen(s1) + strlen(s2) + 1);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff fb2e 	bl	80001f0 <strlen>
 8000b94:	4604      	mov	r4, r0
 8000b96:	6838      	ldr	r0, [r7, #0]
 8000b98:	f7ff fb2a 	bl	80001f0 <strlen>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4423      	add	r3, r4
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 faa0 	bl	80040e8 <malloc>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	60fb      	str	r3, [r7, #12]
	strcpy(result, s1);
 8000bac:	6879      	ldr	r1, [r7, #4]
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f003 fbc9 	bl	8004346 <strcpy>
	strcat(result, s2);
 8000bb4:	6839      	ldr	r1, [r7, #0]
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f003 fbb6 	bl	8004328 <strcat>
	return result;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd90      	pop	{r4, r7, pc}
	...

08000bc8 <read_char_by_uart>:
char *cur_read_char = read_buffer;
char *transmit_from_pointer = write_buffer;
char *write_to_pointer = write_buffer;

//public functions start
char* read_char_by_uart() {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
	char* ans = NULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
	if (cur_process_char != cur_read_char) {
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <read_char_by_uart+0x30>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <read_char_by_uart+0x34>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d006      	beq.n	8000bec <read_char_by_uart+0x24>
		ans = cur_process_char;
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <read_char_by_uart+0x30>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	607b      	str	r3, [r7, #4]
		next(&cur_process_char, read_buffer);
 8000be4:	4906      	ldr	r1, [pc, #24]	; (8000c00 <read_char_by_uart+0x38>)
 8000be6:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <read_char_by_uart+0x30>)
 8000be8:	f000 f8bc 	bl	8000d64 <next>
	}
	return ans;
 8000bec:	687b      	ldr	r3, [r7, #4]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000120 	.word	0x20000120
 8000bfc:	20000124 	.word	0x20000124
 8000c00:	200001c4 	.word	0x200001c4

08000c04 <send_message_by_uart_if_available>:

void send_message_by_uart_if_available() {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
	if (!is_writing_now) {
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <send_message_by_uart_if_available+0x38>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	f083 0301 	eor.w	r3, r3, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d00f      	beq.n	8000c36 <send_message_by_uart_if_available+0x32>
		if (transmit_from_pointer != write_to_pointer) {
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <send_message_by_uart_if_available+0x3c>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <send_message_by_uart_if_available+0x40>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d009      	beq.n	8000c36 <send_message_by_uart_if_available+0x32>
			is_writing_now = true;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <send_message_by_uart_if_available+0x38>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart6, (uint8_t*) transmit_from_pointer,
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <send_message_by_uart_if_available+0x3c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <send_message_by_uart_if_available+0x44>)
 8000c32:	f002 faca 	bl	80031ca <HAL_UART_Transmit_IT>
					sizeof(char));
		}
	}
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200001c1 	.word	0x200001c1
 8000c40:	20000128 	.word	0x20000128
 8000c44:	2000012c 	.word	0x2000012c
 8000c48:	20000320 	.word	0x20000320

08000c4c <set_default_value_for_uart>:

void set_default_value_for_uart() {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, (uint8_t*) cur_read_char, sizeof(char));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <set_default_value_for_uart+0x18>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	4619      	mov	r1, r3
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <set_default_value_for_uart+0x1c>)
 8000c5a:	f002 fafb 	bl	8003254 <HAL_UART_Receive_IT>
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000124 	.word	0x20000124
 8000c68:	20000320 	.word	0x20000320

08000c6c <append_to_sending_buffer_by_uart>:

void append_to_sending_buffer_by_uart(char *str) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
//	char *str_with_newline = concat("\r\n", str);
	char *str_with_newline = concat(str, "\r\n");
 8000c74:	4910      	ldr	r1, [pc, #64]	; (8000cb8 <append_to_sending_buffer_by_uart+0x4c>)
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ff84 	bl	8000b84 <concat>
 8000c7c:	6138      	str	r0, [r7, #16]
	int size = sizeof(char) * strlen(str_with_newline);
 8000c7e:	6938      	ldr	r0, [r7, #16]
 8000c80:	f7ff fab6 	bl	80001f0 <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; str_with_newline[i] != '\0'; i++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	e009      	b.n	8000ca2 <append_to_sending_buffer_by_uart+0x36>
		write_char_to_buff(str_with_newline[i]);
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	4413      	add	r3, r2
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f84e 	bl	8000d38 <write_char_to_buff>
	for (size_t i = 0; str_with_newline[i] != '\0'; i++) {
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1ef      	bne.n	8000c8e <append_to_sending_buffer_by_uart+0x22>
	}
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	08004ae8 	.word	0x08004ae8

08000cbc <HAL_UART_RxCpltCallback>:

//Callback of interrupt by uart

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart6.Instance) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HAL_UART_RxCpltCallback+0x34>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d10a      	bne.n	8000ce6 <HAL_UART_RxCpltCallback+0x2a>
		next(&cur_read_char, read_buffer);
 8000cd0:	4908      	ldr	r1, [pc, #32]	; (8000cf4 <HAL_UART_RxCpltCallback+0x38>)
 8000cd2:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <HAL_UART_RxCpltCallback+0x3c>)
 8000cd4:	f000 f846 	bl	8000d64 <next>
		HAL_UART_Receive_IT(&huart6, (uint8_t*) cur_read_char, sizeof(char));
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <HAL_UART_RxCpltCallback+0x3c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <HAL_UART_RxCpltCallback+0x34>)
 8000ce2:	f002 fab7 	bl	8003254 <HAL_UART_Receive_IT>
	}
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000320 	.word	0x20000320
 8000cf4:	200001c4 	.word	0x200001c4
 8000cf8:	20000124 	.word	0x20000124

08000cfc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart6.Instance) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <HAL_UART_TxCpltCallback+0x2c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d106      	bne.n	8000d1e <HAL_UART_TxCpltCallback+0x22>
		is_writing_now = false;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_UART_TxCpltCallback+0x30>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	701a      	strb	r2, [r3, #0]
		next(&transmit_from_pointer, write_buffer);
 8000d16:	4906      	ldr	r1, [pc, #24]	; (8000d30 <HAL_UART_TxCpltCallback+0x34>)
 8000d18:	4806      	ldr	r0, [pc, #24]	; (8000d34 <HAL_UART_TxCpltCallback+0x38>)
 8000d1a:	f000 f823 	bl	8000d64 <next>
	}
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000320 	.word	0x20000320
 8000d2c:	200001c1 	.word	0x200001c1
 8000d30:	20000228 	.word	0x20000228
 8000d34:	20000128 	.word	0x20000128

08000d38 <write_char_to_buff>:
//public functions end

void write_char_to_buff(char c) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
	*write_to_pointer = c;
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <write_char_to_buff+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	79fa      	ldrb	r2, [r7, #7]
 8000d48:	701a      	strb	r2, [r3, #0]
	next(&write_to_pointer, write_buffer);
 8000d4a:	4905      	ldr	r1, [pc, #20]	; (8000d60 <write_char_to_buff+0x28>)
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <write_char_to_buff+0x24>)
 8000d4e:	f000 f809 	bl	8000d64 <next>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2000012c 	.word	0x2000012c
 8000d60:	20000228 	.word	0x20000228

08000d64 <next>:

void next(char **pointer, char *buffer) {
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	if (*pointer >= buffer + 100)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	3364      	adds	r3, #100	; 0x64
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d303      	bcc.n	8000d82 <next+0x1e>
		*pointer = buffer;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	601a      	str	r2, [r3, #0]
	else
		(*pointer)++;
}
 8000d80:	e004      	b.n	8000d8c <next+0x28>
		(*pointer)++;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	601a      	str	r2, [r3, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_MspInit+0x4c>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800

08000de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <NMI_Handler+0x4>

08000dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <HardFault_Handler+0x4>

08000df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <MemManage_Handler+0x4>

08000dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dfe:	e7fe      	b.n	8000dfe <BusFault_Handler+0x4>

08000e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <UsageFault_Handler+0x4>

08000e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e34:	f000 fa92 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <TIM6_DAC_IRQHandler+0x10>)
 8000e42:	f001 fc2b 	bl	800269c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200002d8 	.word	0x200002d8

08000e50 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <USART6_IRQHandler+0x10>)
 8000e56:	f002 fa2d 	bl	80032b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000320 	.word	0x20000320

08000e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e6c:	4a14      	ldr	r2, [pc, #80]	; (8000ec0 <_sbrk+0x5c>)
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <_sbrk+0x60>)
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d102      	bne.n	8000e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <_sbrk+0x64>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <_sbrk+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d207      	bcs.n	8000ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e94:	f003 f8fe 	bl	8004094 <__errno>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e009      	b.n	8000eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <_sbrk+0x64>)
 8000eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3718      	adds	r7, #24
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20030000 	.word	0x20030000
 8000ec4:	00000400 	.word	0x00000400
 8000ec8:	2000028c 	.word	0x2000028c
 8000ecc:	20000378 	.word	0x20000378

08000ed0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <SystemInit+0x20>)
 8000ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <SystemInit+0x20>)
 8000edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b092      	sub	sp, #72	; 0x48
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
 8000f14:	615a      	str	r2, [r3, #20]
 8000f16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f003 f8ea 	bl	80040f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f24:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000f26:	4a34      	ldr	r2, [pc, #208]	; (8000ff8 <MX_TIM1_Init+0x104>)
 8000f28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 62500;
 8000f2a:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000f2c:	f24f 4224 	movw	r2, #62500	; 0xf424
 8000f30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3;
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f50:	4828      	ldr	r0, [pc, #160]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000f52:	f001 fa8b 	bl	800246c <HAL_TIM_PWM_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000f5c:	f7ff fbea 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4821      	ldr	r0, [pc, #132]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000f70:	f001 fffc 	bl	8002f6c <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f7a:	f7ff fbdb 	bl	8000734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7e:	2360      	movs	r3, #96	; 0x60
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f86:	2300      	movs	r3, #0
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f92:	2300      	movs	r3, #0
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000fa4:	f001 fc82 	bl	80028ac <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000fae:	f7ff fbc1 	bl	8000734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000fd6:	f002 f845 	bl	8003064 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000fe0:	f7ff fba8 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MX_TIM1_Init+0x100>)
 8000fe6:	f000 f889 	bl	80010fc <HAL_TIM_MspPostInit>

}
 8000fea:	bf00      	nop
 8000fec:	3748      	adds	r7, #72	; 0x48
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000290 	.word	0x20000290
 8000ff8:	40010000 	.word	0x40010000

08000ffc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001002:	463b      	mov	r3, r7
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_TIM6_Init+0x64>)
 800100c:	4a15      	ldr	r2, [pc, #84]	; (8001064 <MX_TIM6_Init+0x68>)
 800100e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 500;
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_TIM6_Init+0x64>)
 8001012:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001016:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_TIM6_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <MX_TIM6_Init+0x64>)
 8001020:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001024:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_TIM6_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <MX_TIM6_Init+0x64>)
 800102e:	f001 f95d 	bl	80022ec <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001038:	f7ff fb7c 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_TIM6_Init+0x64>)
 800104a:	f001 ff8f 	bl	8002f6c <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001054:	f7ff fb6e 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200002d8 	.word	0x200002d8
 8001064:	40001000 	.word	0x40001000

08001068 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10d      	bne.n	8001096 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_TIM_PWM_MspInit+0x40>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <HAL_TIM_PWM_MspInit+0x40>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6453      	str	r3, [r2, #68]	; 0x44
 800108a:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <HAL_TIM_PWM_MspInit+0x40>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40010000 	.word	0x40010000
 80010a8:	40023800 	.word	0x40023800

080010ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_TIM_Base_MspInit+0x48>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d115      	bne.n	80010ea <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_TIM_Base_MspInit+0x4c>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <HAL_TIM_Base_MspInit+0x4c>)
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_TIM_Base_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2036      	movs	r0, #54	; 0x36
 80010e0:	f000 fa37 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010e4:	2036      	movs	r0, #54	; 0x36
 80010e6:	f000 fa50 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40001000 	.word	0x40001000
 80010f8:	40023800 	.word	0x40023800

080010fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a12      	ldr	r2, [pc, #72]	; (8001164 <HAL_TIM_MspPostInit+0x68>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d11e      	bne.n	800115c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_TIM_MspPostInit+0x6c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_TIM_MspPostInit+0x6c>)
 8001128:	f043 0310 	orr.w	r3, r3, #16
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_TIM_MspPostInit+0x6c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800113a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800113e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800114c:	2301      	movs	r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4619      	mov	r1, r3
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <HAL_TIM_MspPostInit+0x70>)
 8001158:	f000 fac4 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800115c:	bf00      	nop
 800115e:	3720      	adds	r7, #32
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40010000 	.word	0x40010000
 8001168:	40023800 	.word	0x40023800
 800116c:	40021000 	.word	0x40021000

08001170 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_USART6_UART_Init+0x4c>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_USART6_UART_Init+0x50>)
 8001178:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 3906;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_USART6_UART_Init+0x4c>)
 800117c:	f640 7242 	movw	r2, #3906	; 0xf42
 8001180:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_USART6_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_USART6_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_USART6_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_USART6_UART_Init+0x4c>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_USART6_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_USART6_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_USART6_UART_Init+0x4c>)
 80011a8:	f001 ffc2 	bl	8003130 <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011b2:	f7ff fabf 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000320 	.word	0x20000320
 80011c0:	40011400 	.word	0x40011400

080011c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <HAL_UART_MspInit+0x94>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d133      	bne.n	800124e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_UART_MspInit+0x98>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a1b      	ldr	r2, [pc, #108]	; (800125c <HAL_UART_MspInit+0x98>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_UART_MspInit+0x98>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_UART_MspInit+0x98>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a14      	ldr	r2, [pc, #80]	; (800125c <HAL_UART_MspInit+0x98>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_UART_MspInit+0x98>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800121e:	23c0      	movs	r3, #192	; 0xc0
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800122e:	2308      	movs	r3, #8
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <HAL_UART_MspInit+0x9c>)
 800123a:	f000 fa53 	bl	80016e4 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2047      	movs	r0, #71	; 0x47
 8001244:	f000 f985 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001248:	2047      	movs	r0, #71	; 0x47
 800124a:	f000 f99e 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40011400 	.word	0x40011400
 800125c:	40023800 	.word	0x40023800
 8001260:	40020800 	.word	0x40020800

08001264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800129c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800126a:	490e      	ldr	r1, [pc, #56]	; (80012a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001280:	4c0b      	ldr	r4, [pc, #44]	; (80012b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800128e:	f7ff fe1f 	bl	8000ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001292:	f002 ff05 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001296:	f7ff f9c9 	bl	800062c <main>
  bx  lr    
 800129a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 80012a8:	08004b48 	.word	0x08004b48
  ldr r2, =_sbss
 80012ac:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80012b0:	20000378 	.word	0x20000378

080012b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC_IRQHandler>
	...

080012b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0d      	ldr	r2, [pc, #52]	; (80012f8 <HAL_Init+0x40>)
 80012c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_Init+0x40>)
 80012ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a07      	ldr	r2, [pc, #28]	; (80012f8 <HAL_Init+0x40>)
 80012da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f000 f92b 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e6:	200f      	movs	r0, #15
 80012e8:	f000 f808 	bl	80012fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fd54 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023c00 	.word	0x40023c00

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f943 	bl	80015a6 <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f90b 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000130 	.word	0x20000130
 8001354:	20000138 	.word	0x20000138
 8001358:	20000134 	.word	0x20000134

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000138 	.word	0x20000138
 8001380:	20000364 	.word	0x20000364

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000364 	.word	0x20000364

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ce:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	60d3      	str	r3, [r2, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff29 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff3e 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff31 	bl	8001400 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa2 	bl	80014f8 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff feda 	bl	8001384 <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d008      	beq.n	80015f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e052      	b.n	8001696 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0216 	bic.w	r2, r2, #22
 80015fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	695a      	ldr	r2, [r3, #20]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800160e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	2b00      	cmp	r3, #0
 8001616:	d103      	bne.n	8001620 <HAL_DMA_Abort+0x62>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161c:	2b00      	cmp	r3, #0
 800161e:	d007      	beq.n	8001630 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0208 	bic.w	r2, r2, #8
 800162e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001640:	e013      	b.n	800166a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001642:	f7ff fe9f 	bl	8001384 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b05      	cmp	r3, #5
 800164e:	d90c      	bls.n	800166a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2220      	movs	r2, #32
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2203      	movs	r2, #3
 800165a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e015      	b.n	8001696 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1e4      	bne.n	8001642 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167c:	223f      	movs	r2, #63	; 0x3f
 800167e:	409a      	lsls	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d004      	beq.n	80016bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e00c      	b.n	80016d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2205      	movs	r2, #5
 80016c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e177      	b.n	80019f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8166 	bne.w	80019ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d005      	beq.n	8001736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001732:	2b02      	cmp	r3, #2
 8001734:	d130      	bne.n	8001798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f003 0201 	and.w	r2, r3, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d017      	beq.n	80017d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d123      	bne.n	8001828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	08da      	lsrs	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3208      	adds	r2, #8
 80017e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	69b9      	ldr	r1, [r7, #24]
 8001824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80c0 	beq.w	80019ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b66      	ldr	r3, [pc, #408]	; (8001a08 <HAL_GPIO_Init+0x324>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a65      	ldr	r2, [pc, #404]	; (8001a08 <HAL_GPIO_Init+0x324>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_GPIO_Init+0x324>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001886:	4a61      	ldr	r2, [pc, #388]	; (8001a0c <HAL_GPIO_Init+0x328>)
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_GPIO_Init+0x32c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d037      	beq.n	8001922 <HAL_GPIO_Init+0x23e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a57      	ldr	r2, [pc, #348]	; (8001a14 <HAL_GPIO_Init+0x330>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d031      	beq.n	800191e <HAL_GPIO_Init+0x23a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a56      	ldr	r2, [pc, #344]	; (8001a18 <HAL_GPIO_Init+0x334>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d02b      	beq.n	800191a <HAL_GPIO_Init+0x236>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a55      	ldr	r2, [pc, #340]	; (8001a1c <HAL_GPIO_Init+0x338>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d025      	beq.n	8001916 <HAL_GPIO_Init+0x232>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <HAL_GPIO_Init+0x33c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d01f      	beq.n	8001912 <HAL_GPIO_Init+0x22e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a53      	ldr	r2, [pc, #332]	; (8001a24 <HAL_GPIO_Init+0x340>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d019      	beq.n	800190e <HAL_GPIO_Init+0x22a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a52      	ldr	r2, [pc, #328]	; (8001a28 <HAL_GPIO_Init+0x344>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <HAL_GPIO_Init+0x226>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a51      	ldr	r2, [pc, #324]	; (8001a2c <HAL_GPIO_Init+0x348>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d00d      	beq.n	8001906 <HAL_GPIO_Init+0x222>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a50      	ldr	r2, [pc, #320]	; (8001a30 <HAL_GPIO_Init+0x34c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d007      	beq.n	8001902 <HAL_GPIO_Init+0x21e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <HAL_GPIO_Init+0x350>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_GPIO_Init+0x21a>
 80018fa:	2309      	movs	r3, #9
 80018fc:	e012      	b.n	8001924 <HAL_GPIO_Init+0x240>
 80018fe:	230a      	movs	r3, #10
 8001900:	e010      	b.n	8001924 <HAL_GPIO_Init+0x240>
 8001902:	2308      	movs	r3, #8
 8001904:	e00e      	b.n	8001924 <HAL_GPIO_Init+0x240>
 8001906:	2307      	movs	r3, #7
 8001908:	e00c      	b.n	8001924 <HAL_GPIO_Init+0x240>
 800190a:	2306      	movs	r3, #6
 800190c:	e00a      	b.n	8001924 <HAL_GPIO_Init+0x240>
 800190e:	2305      	movs	r3, #5
 8001910:	e008      	b.n	8001924 <HAL_GPIO_Init+0x240>
 8001912:	2304      	movs	r3, #4
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x240>
 8001916:	2303      	movs	r3, #3
 8001918:	e004      	b.n	8001924 <HAL_GPIO_Init+0x240>
 800191a:	2302      	movs	r3, #2
 800191c:	e002      	b.n	8001924 <HAL_GPIO_Init+0x240>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_GPIO_Init+0x240>
 8001922:	2300      	movs	r3, #0
 8001924:	69fa      	ldr	r2, [r7, #28]
 8001926:	f002 0203 	and.w	r2, r2, #3
 800192a:	0092      	lsls	r2, r2, #2
 800192c:	4093      	lsls	r3, r2
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001934:	4935      	ldr	r1, [pc, #212]	; (8001a0c <HAL_GPIO_Init+0x328>)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	089b      	lsrs	r3, r3, #2
 800193a:	3302      	adds	r3, #2
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_GPIO_Init+0x354>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001966:	4a34      	ldr	r2, [pc, #208]	; (8001a38 <HAL_GPIO_Init+0x354>)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_GPIO_Init+0x354>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001990:	4a29      	ldr	r2, [pc, #164]	; (8001a38 <HAL_GPIO_Init+0x354>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_GPIO_Init+0x354>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ba:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_GPIO_Init+0x354>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_GPIO_Init+0x354>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <HAL_GPIO_Init+0x354>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3301      	adds	r3, #1
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	f67f ae84 	bls.w	8001700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40013800 	.word	0x40013800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40020400 	.word	0x40020400
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020c00 	.word	0x40020c00
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40021400 	.word	0x40021400
 8001a28:	40021800 	.word	0x40021800
 8001a2c:	40021c00 	.word	0x40021c00
 8001a30:	40022000 	.word	0x40022000
 8001a34:	40022400 	.word	0x40022400
 8001a38:	40013c00 	.word	0x40013c00

08001a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e267      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d075      	beq.n	8001b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a5a:	4b88      	ldr	r3, [pc, #544]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d00c      	beq.n	8001a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a66:	4b85      	ldr	r3, [pc, #532]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d112      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a72:	4b82      	ldr	r3, [pc, #520]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7e:	d10b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b7e      	ldr	r3, [pc, #504]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d05b      	beq.n	8001b44 <HAL_RCC_OscConfig+0x108>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d157      	bne.n	8001b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e242      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x74>
 8001aa2:	4b76      	ldr	r3, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xb0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x98>
 8001aba:	4b70      	ldr	r3, [pc, #448]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6f      	ldr	r2, [pc, #444]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b6d      	ldr	r3, [pc, #436]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6c      	ldr	r2, [pc, #432]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xb0>
 8001ad4:	4b69      	ldr	r3, [pc, #420]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a68      	ldr	r2, [pc, #416]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fc46 	bl	8001384 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fc42 	bl	8001384 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e207      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xc0>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fc32 	bl	8001384 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fc2e 	bl	8001384 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1f3      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0xe8>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d063      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5e:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6a:	4b44      	ldr	r3, [pc, #272]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x152>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1c7      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4937      	ldr	r1, [pc, #220]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_RCC_OscConfig+0x244>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fbe7 	bl	8001384 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff fbe3 	bl	8001384 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1a8      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4925      	ldr	r1, [pc, #148]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x244>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fbc6 	bl	8001384 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fbc2 	bl	8001384 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e187      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d036      	beq.n	8001c94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d016      	beq.n	8001c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_RCC_OscConfig+0x248>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff fba6 	bl	8001384 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fba2 	bl	8001384 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e167      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x200>
 8001c5a:	e01b      	b.n	8001c94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_OscConfig+0x248>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fb8f 	bl	8001384 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	e00e      	b.n	8001c88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fb8b 	bl	8001384 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d907      	bls.n	8001c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e150      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	42470000 	.word	0x42470000
 8001c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ea      	bne.n	8001c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8097 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca6:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10f      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b7d      	ldr	r3, [pc, #500]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a7c      	ldr	r2, [pc, #496]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b7a      	ldr	r3, [pc, #488]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b77      	ldr	r3, [pc, #476]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d118      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cde:	4b74      	ldr	r3, [pc, #464]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a73      	ldr	r2, [pc, #460]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cea:	f7ff fb4b 	bl	8001384 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf2:	f7ff fb47 	bl	8001384 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e10c      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2ea>
 8001d18:	4b64      	ldr	r3, [pc, #400]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	4a63      	ldr	r2, [pc, #396]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6713      	str	r3, [r2, #112]	; 0x70
 8001d24:	e01c      	b.n	8001d60 <HAL_RCC_OscConfig+0x324>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x30c>
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	4a5e      	ldr	r2, [pc, #376]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a5b      	ldr	r2, [pc, #364]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0x324>
 8001d48:	4b58      	ldr	r3, [pc, #352]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a57      	ldr	r2, [pc, #348]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
 8001d54:	4b55      	ldr	r3, [pc, #340]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	4a54      	ldr	r2, [pc, #336]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d5a:	f023 0304 	bic.w	r3, r3, #4
 8001d5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d015      	beq.n	8001d94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff fb0c 	bl	8001384 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff fb08 	bl	8001384 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0cb      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0ee      	beq.n	8001d70 <HAL_RCC_OscConfig+0x334>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7ff faf6 	bl	8001384 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff faf2 	bl	8001384 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0b5      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a38      	ldr	r2, [pc, #224]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80a1 	beq.w	8001f1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dda:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d05c      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d141      	bne.n	8001e72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fac6 	bl	8001384 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff fac2 	bl	8001384 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e087      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	019b      	lsls	r3, r3, #6
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	491b      	ldr	r1, [pc, #108]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fa9b 	bl	8001384 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff fa97 	bl	8001384 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e05c      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x416>
 8001e70:	e054      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fa84 	bl	8001384 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff fa80 	bl	8001384 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e045      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x444>
 8001e9e:	e03d      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e038      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x4ec>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d028      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d121      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d11a      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ee8:	4013      	ands	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d111      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	3b01      	subs	r3, #1
 8001f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0cc      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d90c      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b65      	ldr	r3, [pc, #404]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f98:	4b53      	ldr	r3, [pc, #332]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	494d      	ldr	r1, [pc, #308]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d044      	beq.n	800204c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d119      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fea:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e067      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0203 	bic.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4934      	ldr	r1, [pc, #208]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800201c:	f7ff f9b2 	bl	8001384 <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	e00a      	b.n	800203a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7ff f9ae 	bl	8001384 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e04f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 020c 	and.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1eb      	bne.n	8002024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d20c      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e032      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4916      	ldr	r1, [pc, #88]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	490e      	ldr	r1, [pc, #56]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020b2:	f000 f821 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	490a      	ldr	r1, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	5ccb      	ldrb	r3, [r1, r3]
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f912 	bl	80012fc <HAL_InitTick>

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00
 80020e8:	40023800 	.word	0x40023800
 80020ec:	08004aec 	.word	0x08004aec
 80020f0:	20000130 	.word	0x20000130
 80020f4:	20000134 	.word	0x20000134

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020fc:	b090      	sub	sp, #64	; 0x40
 80020fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
 8002104:	2300      	movs	r3, #0
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002108:	2300      	movs	r3, #0
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d00d      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x40>
 800211c:	2b08      	cmp	r3, #8
 800211e:	f200 80a1 	bhi.w	8002264 <HAL_RCC_GetSysClockFreq+0x16c>
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x34>
 8002126:	2b04      	cmp	r3, #4
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x3a>
 800212a:	e09b      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_GetSysClockFreq+0x184>)
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002130:	e09b      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_GetSysClockFreq+0x188>)
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002136:	e098      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002138:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002142:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d028      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	099b      	lsrs	r3, r3, #6
 8002154:	2200      	movs	r2, #0
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	627a      	str	r2, [r7, #36]	; 0x24
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002160:	2100      	movs	r1, #0
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCC_GetSysClockFreq+0x188>)
 8002164:	fb03 f201 	mul.w	r2, r3, r1
 8002168:	2300      	movs	r3, #0
 800216a:	fb00 f303 	mul.w	r3, r0, r3
 800216e:	4413      	add	r3, r2
 8002170:	4a43      	ldr	r2, [pc, #268]	; (8002280 <HAL_RCC_GetSysClockFreq+0x188>)
 8002172:	fba0 1202 	umull	r1, r2, r0, r2
 8002176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002178:	460a      	mov	r2, r1
 800217a:	62ba      	str	r2, [r7, #40]	; 0x28
 800217c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800217e:	4413      	add	r3, r2
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	2200      	movs	r2, #0
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	61fa      	str	r2, [r7, #28]
 800218a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800218e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002192:	f7fe f885 	bl	80002a0 <__aeabi_uldivmod>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4613      	mov	r3, r2
 800219c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800219e:	e053      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a0:	4b35      	ldr	r3, [pc, #212]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	2200      	movs	r2, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	617a      	str	r2, [r7, #20]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021b2:	f04f 0b00 	mov.w	fp, #0
 80021b6:	4652      	mov	r2, sl
 80021b8:	465b      	mov	r3, fp
 80021ba:	f04f 0000 	mov.w	r0, #0
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	0159      	lsls	r1, r3, #5
 80021c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c8:	0150      	lsls	r0, r2, #5
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	ebb2 080a 	subs.w	r8, r2, sl
 80021d2:	eb63 090b 	sbc.w	r9, r3, fp
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021ea:	ebb2 0408 	subs.w	r4, r2, r8
 80021ee:	eb63 0509 	sbc.w	r5, r3, r9
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	00eb      	lsls	r3, r5, #3
 80021fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002200:	00e2      	lsls	r2, r4, #3
 8002202:	4614      	mov	r4, r2
 8002204:	461d      	mov	r5, r3
 8002206:	eb14 030a 	adds.w	r3, r4, sl
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	eb45 030b 	adc.w	r3, r5, fp
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800221e:	4629      	mov	r1, r5
 8002220:	028b      	lsls	r3, r1, #10
 8002222:	4621      	mov	r1, r4
 8002224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002228:	4621      	mov	r1, r4
 800222a:	028a      	lsls	r2, r1, #10
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002232:	2200      	movs	r2, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	60fa      	str	r2, [r7, #12]
 8002238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800223c:	f7fe f830 	bl	80002a0 <__aeabi_uldivmod>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4613      	mov	r3, r2
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	3301      	adds	r3, #1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002262:	e002      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_GetSysClockFreq+0x184>)
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800226c:	4618      	mov	r0, r3
 800226e:	3740      	adds	r7, #64	; 0x40
 8002270:	46bd      	mov	sp, r7
 8002272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	00f42400 	.word	0x00f42400
 8002280:	017d7840 	.word	0x017d7840

08002284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_RCC_GetHCLKFreq+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000130 	.word	0x20000130

0800229c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022a0:	f7ff fff0 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	0a9b      	lsrs	r3, r3, #10
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	4903      	ldr	r1, [pc, #12]	; (80022c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40023800 	.word	0x40023800
 80022c0:	08004afc 	.word	0x08004afc

080022c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022c8:	f7ff ffdc 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	0b5b      	lsrs	r3, r3, #13
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	4903      	ldr	r1, [pc, #12]	; (80022e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40023800 	.word	0x40023800
 80022e8:	08004afc 	.word	0x08004afc

080022ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e041      	b.n	8002382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe feca 	bl	80010ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f000 fba8 	bl	8002a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d001      	beq.n	80023a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e04e      	b.n	8002442 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a23      	ldr	r2, [pc, #140]	; (8002450 <HAL_TIM_Base_Start_IT+0xc4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d022      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x80>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ce:	d01d      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x80>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <HAL_TIM_Base_Start_IT+0xc8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d018      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x80>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_TIM_Base_Start_IT+0xcc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d013      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x80>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1c      	ldr	r2, [pc, #112]	; (800245c <HAL_TIM_Base_Start_IT+0xd0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00e      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x80>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <HAL_TIM_Base_Start_IT+0xd4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x80>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a19      	ldr	r2, [pc, #100]	; (8002464 <HAL_TIM_Base_Start_IT+0xd8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x80>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a18      	ldr	r2, [pc, #96]	; (8002468 <HAL_TIM_Base_Start_IT+0xdc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d111      	bne.n	8002430 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b06      	cmp	r3, #6
 800241c:	d010      	beq.n	8002440 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 0201 	orr.w	r2, r2, #1
 800242c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800242e:	e007      	b.n	8002440 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40010000 	.word	0x40010000
 8002454:	40000400 	.word	0x40000400
 8002458:	40000800 	.word	0x40000800
 800245c:	40000c00 	.word	0x40000c00
 8002460:	40010400 	.word	0x40010400
 8002464:	40014000 	.word	0x40014000
 8002468:	40001800 	.word	0x40001800

0800246c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e041      	b.n	8002502 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d106      	bne.n	8002498 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7fe fde8 	bl	8001068 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3304      	adds	r3, #4
 80024a8:	4619      	mov	r1, r3
 80024aa:	4610      	mov	r0, r2
 80024ac:	f000 fae8 	bl	8002a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d109      	bne.n	8002530 <HAL_TIM_PWM_Start+0x24>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	bf14      	ite	ne
 8002528:	2301      	movne	r3, #1
 800252a:	2300      	moveq	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	e022      	b.n	8002576 <HAL_TIM_PWM_Start+0x6a>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b04      	cmp	r3, #4
 8002534:	d109      	bne.n	800254a <HAL_TIM_PWM_Start+0x3e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b01      	cmp	r3, #1
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	e015      	b.n	8002576 <HAL_TIM_PWM_Start+0x6a>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b08      	cmp	r3, #8
 800254e:	d109      	bne.n	8002564 <HAL_TIM_PWM_Start+0x58>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	e008      	b.n	8002576 <HAL_TIM_PWM_Start+0x6a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	bf14      	ite	ne
 8002570:	2301      	movne	r3, #1
 8002572:	2300      	moveq	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07c      	b.n	8002678 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <HAL_TIM_PWM_Start+0x82>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258c:	e013      	b.n	80025b6 <HAL_TIM_PWM_Start+0xaa>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b04      	cmp	r3, #4
 8002592:	d104      	bne.n	800259e <HAL_TIM_PWM_Start+0x92>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800259c:	e00b      	b.n	80025b6 <HAL_TIM_PWM_Start+0xaa>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d104      	bne.n	80025ae <HAL_TIM_PWM_Start+0xa2>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2202      	movs	r2, #2
 80025a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025ac:	e003      	b.n	80025b6 <HAL_TIM_PWM_Start+0xaa>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2201      	movs	r2, #1
 80025bc:	6839      	ldr	r1, [r7, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fcae 	bl	8002f20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2d      	ldr	r2, [pc, #180]	; (8002680 <HAL_TIM_PWM_Start+0x174>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d004      	beq.n	80025d8 <HAL_TIM_PWM_Start+0xcc>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2c      	ldr	r2, [pc, #176]	; (8002684 <HAL_TIM_PWM_Start+0x178>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d101      	bne.n	80025dc <HAL_TIM_PWM_Start+0xd0>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_TIM_PWM_Start+0xd2>
 80025dc:	2300      	movs	r3, #0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d007      	beq.n	80025f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a22      	ldr	r2, [pc, #136]	; (8002680 <HAL_TIM_PWM_Start+0x174>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d022      	beq.n	8002642 <HAL_TIM_PWM_Start+0x136>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002604:	d01d      	beq.n	8002642 <HAL_TIM_PWM_Start+0x136>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_TIM_PWM_Start+0x17c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d018      	beq.n	8002642 <HAL_TIM_PWM_Start+0x136>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1d      	ldr	r2, [pc, #116]	; (800268c <HAL_TIM_PWM_Start+0x180>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_TIM_PWM_Start+0x136>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <HAL_TIM_PWM_Start+0x184>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00e      	beq.n	8002642 <HAL_TIM_PWM_Start+0x136>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a16      	ldr	r2, [pc, #88]	; (8002684 <HAL_TIM_PWM_Start+0x178>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d009      	beq.n	8002642 <HAL_TIM_PWM_Start+0x136>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a18      	ldr	r2, [pc, #96]	; (8002694 <HAL_TIM_PWM_Start+0x188>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d004      	beq.n	8002642 <HAL_TIM_PWM_Start+0x136>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a16      	ldr	r2, [pc, #88]	; (8002698 <HAL_TIM_PWM_Start+0x18c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d111      	bne.n	8002666 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b06      	cmp	r3, #6
 8002652:	d010      	beq.n	8002676 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002664:	e007      	b.n	8002676 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40010000 	.word	0x40010000
 8002684:	40010400 	.word	0x40010400
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800
 8002690:	40000c00 	.word	0x40000c00
 8002694:	40014000 	.word	0x40014000
 8002698:	40001800 	.word	0x40001800

0800269c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d122      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0202 	mvn.w	r2, #2
 80026c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f9b0 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f9a2 	bl	8002a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f9b3 	bl	8002a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b04      	cmp	r3, #4
 8002704:	d122      	bne.n	800274c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b04      	cmp	r3, #4
 8002712:	d11b      	bne.n	800274c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0204 	mvn.w	r2, #4
 800271c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2202      	movs	r2, #2
 8002722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f986 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 8002738:	e005      	b.n	8002746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f978 	bl	8002a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f989 	bl	8002a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b08      	cmp	r3, #8
 8002758:	d122      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b08      	cmp	r3, #8
 8002766:	d11b      	bne.n	80027a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0208 	mvn.w	r2, #8
 8002770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2204      	movs	r2, #4
 8002776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f95c 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f94e 	bl	8002a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f95f 	bl	8002a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0310 	and.w	r3, r3, #16
 80027aa:	2b10      	cmp	r3, #16
 80027ac:	d122      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d11b      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0210 	mvn.w	r2, #16
 80027c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2208      	movs	r2, #8
 80027ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f932 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f924 	bl	8002a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f935 	bl	8002a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10e      	bne.n	8002820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d107      	bne.n	8002820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0201 	mvn.w	r2, #1
 8002818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe f986 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282a:	2b80      	cmp	r3, #128	; 0x80
 800282c:	d10e      	bne.n	800284c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002838:	2b80      	cmp	r3, #128	; 0x80
 800283a:	d107      	bne.n	800284c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fc68 	bl	800311c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d10e      	bne.n	8002878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002864:	2b40      	cmp	r3, #64	; 0x40
 8002866:	d107      	bne.n	8002878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f8fa 	bl	8002a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	2b20      	cmp	r3, #32
 8002884:	d10e      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b20      	cmp	r3, #32
 8002892:	d107      	bne.n	80028a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0220 	mvn.w	r2, #32
 800289c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fc32 	bl	8003108 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028a4:	bf00      	nop
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e0ae      	b.n	8002a28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	f200 809f 	bhi.w	8002a18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80028da:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e0:	08002915 	.word	0x08002915
 80028e4:	08002a19 	.word	0x08002a19
 80028e8:	08002a19 	.word	0x08002a19
 80028ec:	08002a19 	.word	0x08002a19
 80028f0:	08002955 	.word	0x08002955
 80028f4:	08002a19 	.word	0x08002a19
 80028f8:	08002a19 	.word	0x08002a19
 80028fc:	08002a19 	.word	0x08002a19
 8002900:	08002997 	.word	0x08002997
 8002904:	08002a19 	.word	0x08002a19
 8002908:	08002a19 	.word	0x08002a19
 800290c:	08002a19 	.word	0x08002a19
 8002910:	080029d7 	.word	0x080029d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f950 	bl	8002bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f042 0208 	orr.w	r2, r2, #8
 800292e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0204 	bic.w	r2, r2, #4
 800293e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6999      	ldr	r1, [r3, #24]
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	619a      	str	r2, [r3, #24]
      break;
 8002952:	e064      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68b9      	ldr	r1, [r7, #8]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f9a0 	bl	8002ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800296e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800297e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6999      	ldr	r1, [r3, #24]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	021a      	lsls	r2, r3, #8
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	619a      	str	r2, [r3, #24]
      break;
 8002994:	e043      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f9f5 	bl	8002d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0208 	orr.w	r2, r2, #8
 80029b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0204 	bic.w	r2, r2, #4
 80029c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	69d9      	ldr	r1, [r3, #28]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	61da      	str	r2, [r3, #28]
      break;
 80029d4:	e023      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fa49 	bl	8002e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69d9      	ldr	r1, [r3, #28]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	021a      	lsls	r2, r3, #8
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	61da      	str	r2, [r3, #28]
      break;
 8002a16:	e002      	b.n	8002a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a40      	ldr	r2, [pc, #256]	; (8002b94 <TIM_Base_SetConfig+0x114>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d013      	beq.n	8002ac0 <TIM_Base_SetConfig+0x40>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9e:	d00f      	beq.n	8002ac0 <TIM_Base_SetConfig+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3d      	ldr	r2, [pc, #244]	; (8002b98 <TIM_Base_SetConfig+0x118>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00b      	beq.n	8002ac0 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a3c      	ldr	r2, [pc, #240]	; (8002b9c <TIM_Base_SetConfig+0x11c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <TIM_Base_SetConfig+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3b      	ldr	r2, [pc, #236]	; (8002ba0 <TIM_Base_SetConfig+0x120>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a3a      	ldr	r2, [pc, #232]	; (8002ba4 <TIM_Base_SetConfig+0x124>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a2f      	ldr	r2, [pc, #188]	; (8002b94 <TIM_Base_SetConfig+0x114>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d02b      	beq.n	8002b32 <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae0:	d027      	beq.n	8002b32 <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a2c      	ldr	r2, [pc, #176]	; (8002b98 <TIM_Base_SetConfig+0x118>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d023      	beq.n	8002b32 <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2b      	ldr	r2, [pc, #172]	; (8002b9c <TIM_Base_SetConfig+0x11c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01f      	beq.n	8002b32 <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2a      	ldr	r2, [pc, #168]	; (8002ba0 <TIM_Base_SetConfig+0x120>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01b      	beq.n	8002b32 <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a29      	ldr	r2, [pc, #164]	; (8002ba4 <TIM_Base_SetConfig+0x124>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d017      	beq.n	8002b32 <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a28      	ldr	r2, [pc, #160]	; (8002ba8 <TIM_Base_SetConfig+0x128>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a27      	ldr	r2, [pc, #156]	; (8002bac <TIM_Base_SetConfig+0x12c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00f      	beq.n	8002b32 <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a26      	ldr	r2, [pc, #152]	; (8002bb0 <TIM_Base_SetConfig+0x130>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a25      	ldr	r2, [pc, #148]	; (8002bb4 <TIM_Base_SetConfig+0x134>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a24      	ldr	r2, [pc, #144]	; (8002bb8 <TIM_Base_SetConfig+0x138>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <TIM_Base_SetConfig+0x13c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d108      	bne.n	8002b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <TIM_Base_SetConfig+0x114>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <TIM_Base_SetConfig+0xf8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a0c      	ldr	r2, [pc, #48]	; (8002ba4 <TIM_Base_SetConfig+0x124>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d103      	bne.n	8002b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	615a      	str	r2, [r3, #20]
}
 8002b86:	bf00      	nop
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40010000 	.word	0x40010000
 8002b98:	40000400 	.word	0x40000400
 8002b9c:	40000800 	.word	0x40000800
 8002ba0:	40000c00 	.word	0x40000c00
 8002ba4:	40010400 	.word	0x40010400
 8002ba8:	40014000 	.word	0x40014000
 8002bac:	40014400 	.word	0x40014400
 8002bb0:	40014800 	.word	0x40014800
 8002bb4:	40001800 	.word	0x40001800
 8002bb8:	40001c00 	.word	0x40001c00
 8002bbc:	40002000 	.word	0x40002000

08002bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f023 0201 	bic.w	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f023 0302 	bic.w	r3, r3, #2
 8002c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a20      	ldr	r2, [pc, #128]	; (8002c98 <TIM_OC1_SetConfig+0xd8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d003      	beq.n	8002c24 <TIM_OC1_SetConfig+0x64>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a1f      	ldr	r2, [pc, #124]	; (8002c9c <TIM_OC1_SetConfig+0xdc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d10c      	bne.n	8002c3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f023 0308 	bic.w	r3, r3, #8
 8002c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f023 0304 	bic.w	r3, r3, #4
 8002c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a15      	ldr	r2, [pc, #84]	; (8002c98 <TIM_OC1_SetConfig+0xd8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d003      	beq.n	8002c4e <TIM_OC1_SetConfig+0x8e>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <TIM_OC1_SetConfig+0xdc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d111      	bne.n	8002c72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	621a      	str	r2, [r3, #32]
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	40010400 	.word	0x40010400

08002ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	f023 0210 	bic.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f023 0320 	bic.w	r3, r3, #32
 8002cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a22      	ldr	r2, [pc, #136]	; (8002d84 <TIM_OC2_SetConfig+0xe4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <TIM_OC2_SetConfig+0x68>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <TIM_OC2_SetConfig+0xe8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d10d      	bne.n	8002d24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <TIM_OC2_SetConfig+0xe4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <TIM_OC2_SetConfig+0x94>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a16      	ldr	r2, [pc, #88]	; (8002d88 <TIM_OC2_SetConfig+0xe8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d113      	bne.n	8002d5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40010400 	.word	0x40010400

08002d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0303 	bic.w	r3, r3, #3
 8002dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a21      	ldr	r2, [pc, #132]	; (8002e6c <TIM_OC3_SetConfig+0xe0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d003      	beq.n	8002df2 <TIM_OC3_SetConfig+0x66>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <TIM_OC3_SetConfig+0xe4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d10d      	bne.n	8002e0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <TIM_OC3_SetConfig+0xe0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d003      	beq.n	8002e1e <TIM_OC3_SetConfig+0x92>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a15      	ldr	r2, [pc, #84]	; (8002e70 <TIM_OC3_SetConfig+0xe4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d113      	bne.n	8002e46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	621a      	str	r2, [r3, #32]
}
 8002e60:	bf00      	nop
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40010400 	.word	0x40010400

08002e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	021b      	lsls	r3, r3, #8
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	031b      	lsls	r3, r3, #12
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <TIM_OC4_SetConfig+0xa4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d003      	beq.n	8002edc <TIM_OC4_SetConfig+0x68>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a11      	ldr	r2, [pc, #68]	; (8002f1c <TIM_OC4_SetConfig+0xa8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d109      	bne.n	8002ef0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	40010400 	.word	0x40010400

08002f20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b087      	sub	sp, #28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	2201      	movs	r2, #1
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1a      	ldr	r2, [r3, #32]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
	...

08002f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e05a      	b.n	800303a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a21      	ldr	r2, [pc, #132]	; (8003048 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d022      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd0:	d01d      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d018      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1a      	ldr	r2, [pc, #104]	; (8003054 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00e      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a18      	ldr	r2, [pc, #96]	; (8003058 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a17      	ldr	r2, [pc, #92]	; (800305c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a15      	ldr	r2, [pc, #84]	; (8003060 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d10c      	bne.n	8003028 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	4313      	orrs	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40010000 	.word	0x40010000
 800304c:	40000400 	.word	0x40000400
 8003050:	40000800 	.word	0x40000800
 8003054:	40000c00 	.word	0x40000c00
 8003058:	40010400 	.word	0x40010400
 800305c:	40014000 	.word	0x40014000
 8003060:	40001800 	.word	0x40001800

08003064 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800307c:	2302      	movs	r3, #2
 800307e:	e03d      	b.n	80030fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e03f      	b.n	80031c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d106      	bne.n	800315c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe f834 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2224      	movs	r2, #36	; 0x24
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003172:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fd19 	bl	8003bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003188:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003198:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	4613      	mov	r3, r2
 80031d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d130      	bne.n	8003246 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_UART_Transmit_IT+0x26>
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e029      	b.n	8003248 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_UART_Transmit_IT+0x38>
 80031fe:	2302      	movs	r3, #2
 8003200:	e022      	b.n	8003248 <HAL_UART_Transmit_IT+0x7e>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	88fa      	ldrh	r2, [r7, #6]
 8003214:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2221      	movs	r2, #33	; 0x21
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003240:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
  }
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	d11d      	bne.n	80032aa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_UART_Receive_IT+0x26>
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e016      	b.n	80032ac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_UART_Receive_IT+0x38>
 8003288:	2302      	movs	r3, #2
 800328a:	e00f      	b.n	80032ac <HAL_UART_Receive_IT+0x58>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800329a:	88fb      	ldrh	r3, [r7, #6]
 800329c:	461a      	mov	r2, r3
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 faab 	bl	80037fc <UART_Start_Receive_IT>
 80032a6:	4603      	mov	r3, r0
 80032a8:	e000      	b.n	80032ac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b0ba      	sub	sp, #232	; 0xe8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10f      	bne.n	800331a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_UART_IRQHandler+0x66>
 8003306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fb8f 	bl	8003a36 <UART_Receive_IT>
      return;
 8003318:	e256      	b.n	80037c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800331a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 80de 	beq.w	80034e0 <HAL_UART_IRQHandler+0x22c>
 8003324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003334:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80d1 	beq.w	80034e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800333e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <HAL_UART_IRQHandler+0xae>
 800334a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800334e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f043 0201 	orr.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <HAL_UART_IRQHandler+0xd2>
 800336e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f043 0202 	orr.w	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_UART_IRQHandler+0xf6>
 8003392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f043 0204 	orr.w	r2, r3, #4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d011      	beq.n	80033da <HAL_UART_IRQHandler+0x126>
 80033b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f043 0208 	orr.w	r2, r3, #8
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 81ed 	beq.w	80037be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_UART_IRQHandler+0x14e>
 80033f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d002      	beq.n	8003402 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fb1a 	bl	8003a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d103      	bne.n	800342e <HAL_UART_IRQHandler+0x17a>
 8003426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800342a:	2b00      	cmp	r3, #0
 800342c:	d04f      	beq.n	80034ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fa22 	bl	8003878 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d141      	bne.n	80034c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3314      	adds	r3, #20
 8003448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003458:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800345c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3314      	adds	r3, #20
 800346a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800346e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800347a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003486:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1d9      	bne.n	8003442 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003492:	2b00      	cmp	r3, #0
 8003494:	d013      	beq.n	80034be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	4a7d      	ldr	r2, [pc, #500]	; (8003690 <HAL_UART_IRQHandler+0x3dc>)
 800349c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe f8fb 	bl	800169e <HAL_DMA_Abort_IT>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034b8:	4610      	mov	r0, r2
 80034ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	e00e      	b.n	80034dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f986 	bl	80037d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c4:	e00a      	b.n	80034dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f982 	bl	80037d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034cc:	e006      	b.n	80034dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f97e 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80034da:	e170      	b.n	80037be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034dc:	bf00      	nop
    return;
 80034de:	e16e      	b.n	80037be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	f040 814a 	bne.w	800377e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8143 	beq.w	800377e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 813c 	beq.w	800377e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	f040 80b4 	bne.w	8003694 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003538:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8140 	beq.w	80037c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003546:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800354a:	429a      	cmp	r2, r3
 800354c:	f080 8139 	bcs.w	80037c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003556:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003562:	f000 8088 	beq.w	8003676 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003570:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800357c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003584:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003592:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800359e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035a2:	e841 2300 	strex	r3, r2, [r1]
 80035a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1d9      	bne.n	8003566 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3314      	adds	r3, #20
 80035b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3314      	adds	r3, #20
 80035d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035e2:	e841 2300 	strex	r3, r2, [r1]
 80035e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e1      	bne.n	80035b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3314      	adds	r3, #20
 80035f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035f8:	e853 3f00 	ldrex	r3, [r3]
 80035fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003604:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3314      	adds	r3, #20
 800360e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003612:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003614:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003618:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e3      	bne.n	80035ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003646:	f023 0310 	bic.w	r3, r3, #16
 800364a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	330c      	adds	r3, #12
 8003654:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003658:	65ba      	str	r2, [r7, #88]	; 0x58
 800365a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800365e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e3      	bne.n	8003634 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	4618      	mov	r0, r3
 8003672:	f7fd ffa4 	bl	80015be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800367e:	b29b      	uxth	r3, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	b29b      	uxth	r3, r3
 8003684:	4619      	mov	r1, r3
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8ac 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800368c:	e099      	b.n	80037c2 <HAL_UART_IRQHandler+0x50e>
 800368e:	bf00      	nop
 8003690:	0800393f 	.word	0x0800393f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800369c:	b29b      	uxth	r3, r3
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 808b 	beq.w	80037c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80036b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8086 	beq.w	80037c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	330c      	adds	r3, #12
 80036c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80036de:	647a      	str	r2, [r7, #68]	; 0x44
 80036e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1e3      	bne.n	80036ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3314      	adds	r3, #20
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	e853 3f00 	ldrex	r3, [r3]
 8003700:	623b      	str	r3, [r7, #32]
   return(result);
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3314      	adds	r3, #20
 8003712:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003716:	633a      	str	r2, [r7, #48]	; 0x30
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800371c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e3      	bne.n	80036f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	330c      	adds	r3, #12
 800373e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	e853 3f00 	ldrex	r3, [r3]
 8003746:	60fb      	str	r3, [r7, #12]
   return(result);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0310 	bic.w	r3, r3, #16
 800374e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	330c      	adds	r3, #12
 8003758:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800375c:	61fa      	str	r2, [r7, #28]
 800375e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	69b9      	ldr	r1, [r7, #24]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	617b      	str	r3, [r7, #20]
   return(result);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e3      	bne.n	8003738 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003770:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f834 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800377c:	e023      	b.n	80037c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_UART_IRQHandler+0x4ea>
 800378a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f8e5 	bl	8003966 <UART_Transmit_IT>
    return;
 800379c:	e014      	b.n	80037c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00e      	beq.n	80037c8 <HAL_UART_IRQHandler+0x514>
 80037aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f925 	bl	8003a06 <UART_EndTransmit_IT>
    return;
 80037bc:	e004      	b.n	80037c8 <HAL_UART_IRQHandler+0x514>
    return;
 80037be:	bf00      	nop
 80037c0:	e002      	b.n	80037c8 <HAL_UART_IRQHandler+0x514>
      return;
 80037c2:	bf00      	nop
 80037c4:	e000      	b.n	80037c8 <HAL_UART_IRQHandler+0x514>
      return;
 80037c6:	bf00      	nop
  }
}
 80037c8:	37e8      	adds	r7, #232	; 0xe8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop

080037d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2222      	movs	r2, #34	; 0x22
 8003826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003848:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0220 	orr.w	r2, r2, #32
 8003868:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3714      	adds	r7, #20
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b095      	sub	sp, #84	; 0x54
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	330c      	adds	r3, #12
 8003886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	330c      	adds	r3, #12
 800389e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038a0:	643a      	str	r2, [r7, #64]	; 0x40
 80038a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e5      	bne.n	8003880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3314      	adds	r3, #20
 80038ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f023 0301 	bic.w	r3, r3, #1
 80038ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3314      	adds	r3, #20
 80038d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038dc:	e841 2300 	strex	r3, r2, [r1]
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e5      	bne.n	80038b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d119      	bne.n	8003924 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	330c      	adds	r3, #12
 80038f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	e853 3f00 	ldrex	r3, [r3]
 80038fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f023 0310 	bic.w	r3, r3, #16
 8003906:	647b      	str	r3, [r7, #68]	; 0x44
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003910:	61ba      	str	r2, [r7, #24]
 8003912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6979      	ldr	r1, [r7, #20]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	613b      	str	r3, [r7, #16]
   return(result);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e5      	bne.n	80038f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003932:	bf00      	nop
 8003934:	3754      	adds	r7, #84	; 0x54
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7ff ff39 	bl	80037d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b21      	cmp	r3, #33	; 0x21
 8003978:	d13e      	bne.n	80039f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003982:	d114      	bne.n	80039ae <UART_Transmit_IT+0x48>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d110      	bne.n	80039ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	1c9a      	adds	r2, r3, #2
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	621a      	str	r2, [r3, #32]
 80039ac:	e008      	b.n	80039c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	1c59      	adds	r1, r3, #1
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6211      	str	r1, [r2, #32]
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4619      	mov	r1, r3
 80039ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10f      	bne.n	80039f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e000      	b.n	80039fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039f8:	2302      	movs	r3, #2
  }
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b082      	sub	sp, #8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd f968 	bl	8000cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b08c      	sub	sp, #48	; 0x30
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b22      	cmp	r3, #34	; 0x22
 8003a48:	f040 80ab 	bne.w	8003ba2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a54:	d117      	bne.n	8003a86 <UART_Receive_IT+0x50>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d113      	bne.n	8003a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	1c9a      	adds	r2, r3, #2
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
 8003a84:	e026      	b.n	8003ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a98:	d007      	beq.n	8003aaa <UART_Receive_IT+0x74>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10a      	bne.n	8003ab8 <UART_Receive_IT+0x82>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	e008      	b.n	8003aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d15a      	bne.n	8003b9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0220 	bic.w	r2, r2, #32
 8003af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d135      	bne.n	8003b94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f023 0310 	bic.w	r3, r3, #16
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	623a      	str	r2, [r7, #32]
 8003b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	69f9      	ldr	r1, [r7, #28]
 8003b54:	6a3a      	ldr	r2, [r7, #32]
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e5      	bne.n	8003b2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d10a      	bne.n	8003b86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff fe29 	bl	80037e4 <HAL_UARTEx_RxEventCallback>
 8003b92:	e002      	b.n	8003b9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f7fd f891 	bl	8000cbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e002      	b.n	8003ba4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ba2:	2302      	movs	r3, #2
  }
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3730      	adds	r7, #48	; 0x30
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b0c0      	sub	sp, #256	; 0x100
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	68d9      	ldr	r1, [r3, #12]
 8003bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	ea40 0301 	orr.w	r3, r0, r1
 8003bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	431a      	orrs	r2, r3
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c04:	f021 010c 	bic.w	r1, r1, #12
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c12:	430b      	orrs	r3, r1
 8003c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	6999      	ldr	r1, [r3, #24]
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	ea40 0301 	orr.w	r3, r0, r1
 8003c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4b8f      	ldr	r3, [pc, #572]	; (8003e78 <UART_SetConfig+0x2cc>)
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d005      	beq.n	8003c4c <UART_SetConfig+0xa0>
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	4b8d      	ldr	r3, [pc, #564]	; (8003e7c <UART_SetConfig+0x2d0>)
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d104      	bne.n	8003c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c4c:	f7fe fb3a 	bl	80022c4 <HAL_RCC_GetPCLK2Freq>
 8003c50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c54:	e003      	b.n	8003c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c56:	f7fe fb21 	bl	800229c <HAL_RCC_GetPCLK1Freq>
 8003c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c62:	69db      	ldr	r3, [r3, #28]
 8003c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c68:	f040 810c 	bne.w	8003e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c7e:	4622      	mov	r2, r4
 8003c80:	462b      	mov	r3, r5
 8003c82:	1891      	adds	r1, r2, r2
 8003c84:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c86:	415b      	adcs	r3, r3
 8003c88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c8e:	4621      	mov	r1, r4
 8003c90:	eb12 0801 	adds.w	r8, r2, r1
 8003c94:	4629      	mov	r1, r5
 8003c96:	eb43 0901 	adc.w	r9, r3, r1
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cae:	4690      	mov	r8, r2
 8003cb0:	4699      	mov	r9, r3
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	eb18 0303 	adds.w	r3, r8, r3
 8003cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cbc:	462b      	mov	r3, r5
 8003cbe:	eb49 0303 	adc.w	r3, r9, r3
 8003cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cda:	460b      	mov	r3, r1
 8003cdc:	18db      	adds	r3, r3, r3
 8003cde:	653b      	str	r3, [r7, #80]	; 0x50
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	eb42 0303 	adc.w	r3, r2, r3
 8003ce6:	657b      	str	r3, [r7, #84]	; 0x54
 8003ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cf0:	f7fc fad6 	bl	80002a0 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4b61      	ldr	r3, [pc, #388]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	011c      	lsls	r4, r3, #4
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d24:	4641      	mov	r1, r8
 8003d26:	eb12 0a01 	adds.w	sl, r2, r1
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d44:	4692      	mov	sl, r2
 8003d46:	469b      	mov	fp, r3
 8003d48:	4643      	mov	r3, r8
 8003d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8003d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d52:	464b      	mov	r3, r9
 8003d54:	eb4b 0303 	adc.w	r3, fp, r3
 8003d58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d70:	460b      	mov	r3, r1
 8003d72:	18db      	adds	r3, r3, r3
 8003d74:	643b      	str	r3, [r7, #64]	; 0x40
 8003d76:	4613      	mov	r3, r2
 8003d78:	eb42 0303 	adc.w	r3, r2, r3
 8003d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d86:	f7fc fa8b 	bl	80002a0 <__aeabi_uldivmod>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4b3b      	ldr	r3, [pc, #236]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003d92:	fba3 2301 	umull	r2, r3, r3, r1
 8003d96:	095b      	lsrs	r3, r3, #5
 8003d98:	2264      	movs	r2, #100	; 0x64
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	1acb      	subs	r3, r1, r3
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003da8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003db4:	441c      	add	r4, r3
 8003db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003dc8:	4642      	mov	r2, r8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	1891      	adds	r1, r2, r2
 8003dce:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dd0:	415b      	adcs	r3, r3
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003dd8:	4641      	mov	r1, r8
 8003dda:	1851      	adds	r1, r2, r1
 8003ddc:	6339      	str	r1, [r7, #48]	; 0x30
 8003dde:	4649      	mov	r1, r9
 8003de0:	414b      	adcs	r3, r1
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003df0:	4659      	mov	r1, fp
 8003df2:	00cb      	lsls	r3, r1, #3
 8003df4:	4651      	mov	r1, sl
 8003df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dfa:	4651      	mov	r1, sl
 8003dfc:	00ca      	lsls	r2, r1, #3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	4642      	mov	r2, r8
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	460a      	mov	r2, r1
 8003e10:	eb42 0303 	adc.w	r3, r2, r3
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	18db      	adds	r3, r3, r3
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e32:	4613      	mov	r3, r2
 8003e34:	eb42 0303 	adc.w	r3, r2, r3
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e42:	f7fc fa2d 	bl	80002a0 <__aeabi_uldivmod>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	2164      	movs	r1, #100	; 0x64
 8003e54:	fb01 f303 	mul.w	r3, r1, r3
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	3332      	adds	r3, #50	; 0x32
 8003e5e:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <UART_SetConfig+0x2d4>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	095b      	lsrs	r3, r3, #5
 8003e66:	f003 0207 	and.w	r2, r3, #7
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4422      	add	r2, r4
 8003e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e74:	e105      	b.n	8004082 <UART_SetConfig+0x4d6>
 8003e76:	bf00      	nop
 8003e78:	40011000 	.word	0x40011000
 8003e7c:	40011400 	.word	0x40011400
 8003e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e96:	4642      	mov	r2, r8
 8003e98:	464b      	mov	r3, r9
 8003e9a:	1891      	adds	r1, r2, r2
 8003e9c:	6239      	str	r1, [r7, #32]
 8003e9e:	415b      	adcs	r3, r3
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ea6:	4641      	mov	r1, r8
 8003ea8:	1854      	adds	r4, r2, r1
 8003eaa:	4649      	mov	r1, r9
 8003eac:	eb43 0501 	adc.w	r5, r3, r1
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	00eb      	lsls	r3, r5, #3
 8003eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ebe:	00e2      	lsls	r2, r4, #3
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	4643      	mov	r3, r8
 8003ec6:	18e3      	adds	r3, r4, r3
 8003ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ecc:	464b      	mov	r3, r9
 8003ece:	eb45 0303 	adc.w	r3, r5, r3
 8003ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ef2:	4629      	mov	r1, r5
 8003ef4:	008b      	lsls	r3, r1, #2
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003efc:	4621      	mov	r1, r4
 8003efe:	008a      	lsls	r2, r1, #2
 8003f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f04:	f7fc f9cc 	bl	80002a0 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4b60      	ldr	r3, [pc, #384]	; (8004090 <UART_SetConfig+0x4e4>)
 8003f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	011c      	lsls	r4, r3, #4
 8003f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f28:	4642      	mov	r2, r8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	1891      	adds	r1, r2, r2
 8003f2e:	61b9      	str	r1, [r7, #24]
 8003f30:	415b      	adcs	r3, r3
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f38:	4641      	mov	r1, r8
 8003f3a:	1851      	adds	r1, r2, r1
 8003f3c:	6139      	str	r1, [r7, #16]
 8003f3e:	4649      	mov	r1, r9
 8003f40:	414b      	adcs	r3, r1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f50:	4659      	mov	r1, fp
 8003f52:	00cb      	lsls	r3, r1, #3
 8003f54:	4651      	mov	r1, sl
 8003f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	00ca      	lsls	r2, r1, #3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	4642      	mov	r2, r8
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	460a      	mov	r2, r1
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f90:	4649      	mov	r1, r9
 8003f92:	008b      	lsls	r3, r1, #2
 8003f94:	4641      	mov	r1, r8
 8003f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	008a      	lsls	r2, r1, #2
 8003f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fa2:	f7fc f97d 	bl	80002a0 <__aeabi_uldivmod>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <UART_SetConfig+0x4e4>)
 8003fac:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	2164      	movs	r1, #100	; 0x64
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	3332      	adds	r3, #50	; 0x32
 8003fbe:	4a34      	ldr	r2, [pc, #208]	; (8004090 <UART_SetConfig+0x4e4>)
 8003fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fca:	441c      	add	r4, r3
 8003fcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	673b      	str	r3, [r7, #112]	; 0x70
 8003fd4:	677a      	str	r2, [r7, #116]	; 0x74
 8003fd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003fda:	4642      	mov	r2, r8
 8003fdc:	464b      	mov	r3, r9
 8003fde:	1891      	adds	r1, r2, r2
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	415b      	adcs	r3, r3
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fea:	4641      	mov	r1, r8
 8003fec:	1851      	adds	r1, r2, r1
 8003fee:	6039      	str	r1, [r7, #0]
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	414b      	adcs	r3, r1
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004002:	4659      	mov	r1, fp
 8004004:	00cb      	lsls	r3, r1, #3
 8004006:	4651      	mov	r1, sl
 8004008:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800400c:	4651      	mov	r1, sl
 800400e:	00ca      	lsls	r2, r1, #3
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	4603      	mov	r3, r0
 8004016:	4642      	mov	r2, r8
 8004018:	189b      	adds	r3, r3, r2
 800401a:	66bb      	str	r3, [r7, #104]	; 0x68
 800401c:	464b      	mov	r3, r9
 800401e:	460a      	mov	r2, r1
 8004020:	eb42 0303 	adc.w	r3, r2, r3
 8004024:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	663b      	str	r3, [r7, #96]	; 0x60
 8004030:	667a      	str	r2, [r7, #100]	; 0x64
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800403e:	4649      	mov	r1, r9
 8004040:	008b      	lsls	r3, r1, #2
 8004042:	4641      	mov	r1, r8
 8004044:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004048:	4641      	mov	r1, r8
 800404a:	008a      	lsls	r2, r1, #2
 800404c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004050:	f7fc f926 	bl	80002a0 <__aeabi_uldivmod>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <UART_SetConfig+0x4e4>)
 800405a:	fba3 1302 	umull	r1, r3, r3, r2
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	2164      	movs	r1, #100	; 0x64
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	3332      	adds	r3, #50	; 0x32
 800406c:	4a08      	ldr	r2, [pc, #32]	; (8004090 <UART_SetConfig+0x4e4>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	f003 020f 	and.w	r2, r3, #15
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4422      	add	r2, r4
 8004080:	609a      	str	r2, [r3, #8]
}
 8004082:	bf00      	nop
 8004084:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004088:	46bd      	mov	sp, r7
 800408a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408e:	bf00      	nop
 8004090:	51eb851f 	.word	0x51eb851f

08004094 <__errno>:
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <__errno+0x8>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	2000013c 	.word	0x2000013c

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	4d0d      	ldr	r5, [pc, #52]	; (80040d8 <__libc_init_array+0x38>)
 80040a4:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a6:	1b64      	subs	r4, r4, r5
 80040a8:	10a4      	asrs	r4, r4, #2
 80040aa:	2600      	movs	r6, #0
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	4d0b      	ldr	r5, [pc, #44]	; (80040e0 <__libc_init_array+0x40>)
 80040b2:	4c0c      	ldr	r4, [pc, #48]	; (80040e4 <__libc_init_array+0x44>)
 80040b4:	f000 fcae 	bl	8004a14 <_init>
 80040b8:	1b64      	subs	r4, r4, r5
 80040ba:	10a4      	asrs	r4, r4, #2
 80040bc:	2600      	movs	r6, #0
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08004b40 	.word	0x08004b40
 80040dc:	08004b40 	.word	0x08004b40
 80040e0:	08004b40 	.word	0x08004b40
 80040e4:	08004b44 	.word	0x08004b44

080040e8 <malloc>:
 80040e8:	4b02      	ldr	r3, [pc, #8]	; (80040f4 <malloc+0xc>)
 80040ea:	4601      	mov	r1, r0
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	f000 b877 	b.w	80041e0 <_malloc_r>
 80040f2:	bf00      	nop
 80040f4:	2000013c 	.word	0x2000013c

080040f8 <memset>:
 80040f8:	4402      	add	r2, r0
 80040fa:	4603      	mov	r3, r0
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d100      	bne.n	8004102 <memset+0xa>
 8004100:	4770      	bx	lr
 8004102:	f803 1b01 	strb.w	r1, [r3], #1
 8004106:	e7f9      	b.n	80040fc <memset+0x4>

08004108 <_free_r>:
 8004108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800410a:	2900      	cmp	r1, #0
 800410c:	d044      	beq.n	8004198 <_free_r+0x90>
 800410e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004112:	9001      	str	r0, [sp, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f1a1 0404 	sub.w	r4, r1, #4
 800411a:	bfb8      	it	lt
 800411c:	18e4      	addlt	r4, r4, r3
 800411e:	f000 f91b 	bl	8004358 <__malloc_lock>
 8004122:	4a1e      	ldr	r2, [pc, #120]	; (800419c <_free_r+0x94>)
 8004124:	9801      	ldr	r0, [sp, #4]
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	b933      	cbnz	r3, 8004138 <_free_r+0x30>
 800412a:	6063      	str	r3, [r4, #4]
 800412c:	6014      	str	r4, [r2, #0]
 800412e:	b003      	add	sp, #12
 8004130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004134:	f000 b916 	b.w	8004364 <__malloc_unlock>
 8004138:	42a3      	cmp	r3, r4
 800413a:	d908      	bls.n	800414e <_free_r+0x46>
 800413c:	6825      	ldr	r5, [r4, #0]
 800413e:	1961      	adds	r1, r4, r5
 8004140:	428b      	cmp	r3, r1
 8004142:	bf01      	itttt	eq
 8004144:	6819      	ldreq	r1, [r3, #0]
 8004146:	685b      	ldreq	r3, [r3, #4]
 8004148:	1949      	addeq	r1, r1, r5
 800414a:	6021      	streq	r1, [r4, #0]
 800414c:	e7ed      	b.n	800412a <_free_r+0x22>
 800414e:	461a      	mov	r2, r3
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	b10b      	cbz	r3, 8004158 <_free_r+0x50>
 8004154:	42a3      	cmp	r3, r4
 8004156:	d9fa      	bls.n	800414e <_free_r+0x46>
 8004158:	6811      	ldr	r1, [r2, #0]
 800415a:	1855      	adds	r5, r2, r1
 800415c:	42a5      	cmp	r5, r4
 800415e:	d10b      	bne.n	8004178 <_free_r+0x70>
 8004160:	6824      	ldr	r4, [r4, #0]
 8004162:	4421      	add	r1, r4
 8004164:	1854      	adds	r4, r2, r1
 8004166:	42a3      	cmp	r3, r4
 8004168:	6011      	str	r1, [r2, #0]
 800416a:	d1e0      	bne.n	800412e <_free_r+0x26>
 800416c:	681c      	ldr	r4, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	6053      	str	r3, [r2, #4]
 8004172:	4421      	add	r1, r4
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	e7da      	b.n	800412e <_free_r+0x26>
 8004178:	d902      	bls.n	8004180 <_free_r+0x78>
 800417a:	230c      	movs	r3, #12
 800417c:	6003      	str	r3, [r0, #0]
 800417e:	e7d6      	b.n	800412e <_free_r+0x26>
 8004180:	6825      	ldr	r5, [r4, #0]
 8004182:	1961      	adds	r1, r4, r5
 8004184:	428b      	cmp	r3, r1
 8004186:	bf04      	itt	eq
 8004188:	6819      	ldreq	r1, [r3, #0]
 800418a:	685b      	ldreq	r3, [r3, #4]
 800418c:	6063      	str	r3, [r4, #4]
 800418e:	bf04      	itt	eq
 8004190:	1949      	addeq	r1, r1, r5
 8004192:	6021      	streq	r1, [r4, #0]
 8004194:	6054      	str	r4, [r2, #4]
 8004196:	e7ca      	b.n	800412e <_free_r+0x26>
 8004198:	b003      	add	sp, #12
 800419a:	bd30      	pop	{r4, r5, pc}
 800419c:	20000368 	.word	0x20000368

080041a0 <sbrk_aligned>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	4e0e      	ldr	r6, [pc, #56]	; (80041dc <sbrk_aligned+0x3c>)
 80041a4:	460c      	mov	r4, r1
 80041a6:	6831      	ldr	r1, [r6, #0]
 80041a8:	4605      	mov	r5, r0
 80041aa:	b911      	cbnz	r1, 80041b2 <sbrk_aligned+0x12>
 80041ac:	f000 f88c 	bl	80042c8 <_sbrk_r>
 80041b0:	6030      	str	r0, [r6, #0]
 80041b2:	4621      	mov	r1, r4
 80041b4:	4628      	mov	r0, r5
 80041b6:	f000 f887 	bl	80042c8 <_sbrk_r>
 80041ba:	1c43      	adds	r3, r0, #1
 80041bc:	d00a      	beq.n	80041d4 <sbrk_aligned+0x34>
 80041be:	1cc4      	adds	r4, r0, #3
 80041c0:	f024 0403 	bic.w	r4, r4, #3
 80041c4:	42a0      	cmp	r0, r4
 80041c6:	d007      	beq.n	80041d8 <sbrk_aligned+0x38>
 80041c8:	1a21      	subs	r1, r4, r0
 80041ca:	4628      	mov	r0, r5
 80041cc:	f000 f87c 	bl	80042c8 <_sbrk_r>
 80041d0:	3001      	adds	r0, #1
 80041d2:	d101      	bne.n	80041d8 <sbrk_aligned+0x38>
 80041d4:	f04f 34ff 	mov.w	r4, #4294967295
 80041d8:	4620      	mov	r0, r4
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	2000036c 	.word	0x2000036c

080041e0 <_malloc_r>:
 80041e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041e4:	1ccd      	adds	r5, r1, #3
 80041e6:	f025 0503 	bic.w	r5, r5, #3
 80041ea:	3508      	adds	r5, #8
 80041ec:	2d0c      	cmp	r5, #12
 80041ee:	bf38      	it	cc
 80041f0:	250c      	movcc	r5, #12
 80041f2:	2d00      	cmp	r5, #0
 80041f4:	4607      	mov	r7, r0
 80041f6:	db01      	blt.n	80041fc <_malloc_r+0x1c>
 80041f8:	42a9      	cmp	r1, r5
 80041fa:	d905      	bls.n	8004208 <_malloc_r+0x28>
 80041fc:	230c      	movs	r3, #12
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	2600      	movs	r6, #0
 8004202:	4630      	mov	r0, r6
 8004204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004208:	4e2e      	ldr	r6, [pc, #184]	; (80042c4 <_malloc_r+0xe4>)
 800420a:	f000 f8a5 	bl	8004358 <__malloc_lock>
 800420e:	6833      	ldr	r3, [r6, #0]
 8004210:	461c      	mov	r4, r3
 8004212:	bb34      	cbnz	r4, 8004262 <_malloc_r+0x82>
 8004214:	4629      	mov	r1, r5
 8004216:	4638      	mov	r0, r7
 8004218:	f7ff ffc2 	bl	80041a0 <sbrk_aligned>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	4604      	mov	r4, r0
 8004220:	d14d      	bne.n	80042be <_malloc_r+0xde>
 8004222:	6834      	ldr	r4, [r6, #0]
 8004224:	4626      	mov	r6, r4
 8004226:	2e00      	cmp	r6, #0
 8004228:	d140      	bne.n	80042ac <_malloc_r+0xcc>
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	4631      	mov	r1, r6
 800422e:	4638      	mov	r0, r7
 8004230:	eb04 0803 	add.w	r8, r4, r3
 8004234:	f000 f848 	bl	80042c8 <_sbrk_r>
 8004238:	4580      	cmp	r8, r0
 800423a:	d13a      	bne.n	80042b2 <_malloc_r+0xd2>
 800423c:	6821      	ldr	r1, [r4, #0]
 800423e:	3503      	adds	r5, #3
 8004240:	1a6d      	subs	r5, r5, r1
 8004242:	f025 0503 	bic.w	r5, r5, #3
 8004246:	3508      	adds	r5, #8
 8004248:	2d0c      	cmp	r5, #12
 800424a:	bf38      	it	cc
 800424c:	250c      	movcc	r5, #12
 800424e:	4629      	mov	r1, r5
 8004250:	4638      	mov	r0, r7
 8004252:	f7ff ffa5 	bl	80041a0 <sbrk_aligned>
 8004256:	3001      	adds	r0, #1
 8004258:	d02b      	beq.n	80042b2 <_malloc_r+0xd2>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	442b      	add	r3, r5
 800425e:	6023      	str	r3, [r4, #0]
 8004260:	e00e      	b.n	8004280 <_malloc_r+0xa0>
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	1b52      	subs	r2, r2, r5
 8004266:	d41e      	bmi.n	80042a6 <_malloc_r+0xc6>
 8004268:	2a0b      	cmp	r2, #11
 800426a:	d916      	bls.n	800429a <_malloc_r+0xba>
 800426c:	1961      	adds	r1, r4, r5
 800426e:	42a3      	cmp	r3, r4
 8004270:	6025      	str	r5, [r4, #0]
 8004272:	bf18      	it	ne
 8004274:	6059      	strne	r1, [r3, #4]
 8004276:	6863      	ldr	r3, [r4, #4]
 8004278:	bf08      	it	eq
 800427a:	6031      	streq	r1, [r6, #0]
 800427c:	5162      	str	r2, [r4, r5]
 800427e:	604b      	str	r3, [r1, #4]
 8004280:	4638      	mov	r0, r7
 8004282:	f104 060b 	add.w	r6, r4, #11
 8004286:	f000 f86d 	bl	8004364 <__malloc_unlock>
 800428a:	f026 0607 	bic.w	r6, r6, #7
 800428e:	1d23      	adds	r3, r4, #4
 8004290:	1af2      	subs	r2, r6, r3
 8004292:	d0b6      	beq.n	8004202 <_malloc_r+0x22>
 8004294:	1b9b      	subs	r3, r3, r6
 8004296:	50a3      	str	r3, [r4, r2]
 8004298:	e7b3      	b.n	8004202 <_malloc_r+0x22>
 800429a:	6862      	ldr	r2, [r4, #4]
 800429c:	42a3      	cmp	r3, r4
 800429e:	bf0c      	ite	eq
 80042a0:	6032      	streq	r2, [r6, #0]
 80042a2:	605a      	strne	r2, [r3, #4]
 80042a4:	e7ec      	b.n	8004280 <_malloc_r+0xa0>
 80042a6:	4623      	mov	r3, r4
 80042a8:	6864      	ldr	r4, [r4, #4]
 80042aa:	e7b2      	b.n	8004212 <_malloc_r+0x32>
 80042ac:	4634      	mov	r4, r6
 80042ae:	6876      	ldr	r6, [r6, #4]
 80042b0:	e7b9      	b.n	8004226 <_malloc_r+0x46>
 80042b2:	230c      	movs	r3, #12
 80042b4:	603b      	str	r3, [r7, #0]
 80042b6:	4638      	mov	r0, r7
 80042b8:	f000 f854 	bl	8004364 <__malloc_unlock>
 80042bc:	e7a1      	b.n	8004202 <_malloc_r+0x22>
 80042be:	6025      	str	r5, [r4, #0]
 80042c0:	e7de      	b.n	8004280 <_malloc_r+0xa0>
 80042c2:	bf00      	nop
 80042c4:	20000368 	.word	0x20000368

080042c8 <_sbrk_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	4d06      	ldr	r5, [pc, #24]	; (80042e4 <_sbrk_r+0x1c>)
 80042cc:	2300      	movs	r3, #0
 80042ce:	4604      	mov	r4, r0
 80042d0:	4608      	mov	r0, r1
 80042d2:	602b      	str	r3, [r5, #0]
 80042d4:	f7fc fdc6 	bl	8000e64 <_sbrk>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d102      	bne.n	80042e2 <_sbrk_r+0x1a>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	b103      	cbz	r3, 80042e2 <_sbrk_r+0x1a>
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
 80042e4:	20000370 	.word	0x20000370

080042e8 <siprintf>:
 80042e8:	b40e      	push	{r1, r2, r3}
 80042ea:	b500      	push	{lr}
 80042ec:	b09c      	sub	sp, #112	; 0x70
 80042ee:	ab1d      	add	r3, sp, #116	; 0x74
 80042f0:	9002      	str	r0, [sp, #8]
 80042f2:	9006      	str	r0, [sp, #24]
 80042f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042f8:	4809      	ldr	r0, [pc, #36]	; (8004320 <siprintf+0x38>)
 80042fa:	9107      	str	r1, [sp, #28]
 80042fc:	9104      	str	r1, [sp, #16]
 80042fe:	4909      	ldr	r1, [pc, #36]	; (8004324 <siprintf+0x3c>)
 8004300:	f853 2b04 	ldr.w	r2, [r3], #4
 8004304:	9105      	str	r1, [sp, #20]
 8004306:	6800      	ldr	r0, [r0, #0]
 8004308:	9301      	str	r3, [sp, #4]
 800430a:	a902      	add	r1, sp, #8
 800430c:	f000 f88c 	bl	8004428 <_svfiprintf_r>
 8004310:	9b02      	ldr	r3, [sp, #8]
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	b01c      	add	sp, #112	; 0x70
 8004318:	f85d eb04 	ldr.w	lr, [sp], #4
 800431c:	b003      	add	sp, #12
 800431e:	4770      	bx	lr
 8004320:	2000013c 	.word	0x2000013c
 8004324:	ffff0208 	.word	0xffff0208

08004328 <strcat>:
 8004328:	b510      	push	{r4, lr}
 800432a:	4602      	mov	r2, r0
 800432c:	7814      	ldrb	r4, [r2, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	3201      	adds	r2, #1
 8004332:	2c00      	cmp	r4, #0
 8004334:	d1fa      	bne.n	800432c <strcat+0x4>
 8004336:	3b01      	subs	r3, #1
 8004338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800433c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004340:	2a00      	cmp	r2, #0
 8004342:	d1f9      	bne.n	8004338 <strcat+0x10>
 8004344:	bd10      	pop	{r4, pc}

08004346 <strcpy>:
 8004346:	4603      	mov	r3, r0
 8004348:	f811 2b01 	ldrb.w	r2, [r1], #1
 800434c:	f803 2b01 	strb.w	r2, [r3], #1
 8004350:	2a00      	cmp	r2, #0
 8004352:	d1f9      	bne.n	8004348 <strcpy+0x2>
 8004354:	4770      	bx	lr
	...

08004358 <__malloc_lock>:
 8004358:	4801      	ldr	r0, [pc, #4]	; (8004360 <__malloc_lock+0x8>)
 800435a:	f000 baf9 	b.w	8004950 <__retarget_lock_acquire_recursive>
 800435e:	bf00      	nop
 8004360:	20000374 	.word	0x20000374

08004364 <__malloc_unlock>:
 8004364:	4801      	ldr	r0, [pc, #4]	; (800436c <__malloc_unlock+0x8>)
 8004366:	f000 baf4 	b.w	8004952 <__retarget_lock_release_recursive>
 800436a:	bf00      	nop
 800436c:	20000374 	.word	0x20000374

08004370 <__ssputs_r>:
 8004370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004374:	688e      	ldr	r6, [r1, #8]
 8004376:	429e      	cmp	r6, r3
 8004378:	4682      	mov	sl, r0
 800437a:	460c      	mov	r4, r1
 800437c:	4690      	mov	r8, r2
 800437e:	461f      	mov	r7, r3
 8004380:	d838      	bhi.n	80043f4 <__ssputs_r+0x84>
 8004382:	898a      	ldrh	r2, [r1, #12]
 8004384:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004388:	d032      	beq.n	80043f0 <__ssputs_r+0x80>
 800438a:	6825      	ldr	r5, [r4, #0]
 800438c:	6909      	ldr	r1, [r1, #16]
 800438e:	eba5 0901 	sub.w	r9, r5, r1
 8004392:	6965      	ldr	r5, [r4, #20]
 8004394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004398:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800439c:	3301      	adds	r3, #1
 800439e:	444b      	add	r3, r9
 80043a0:	106d      	asrs	r5, r5, #1
 80043a2:	429d      	cmp	r5, r3
 80043a4:	bf38      	it	cc
 80043a6:	461d      	movcc	r5, r3
 80043a8:	0553      	lsls	r3, r2, #21
 80043aa:	d531      	bpl.n	8004410 <__ssputs_r+0xa0>
 80043ac:	4629      	mov	r1, r5
 80043ae:	f7ff ff17 	bl	80041e0 <_malloc_r>
 80043b2:	4606      	mov	r6, r0
 80043b4:	b950      	cbnz	r0, 80043cc <__ssputs_r+0x5c>
 80043b6:	230c      	movs	r3, #12
 80043b8:	f8ca 3000 	str.w	r3, [sl]
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c2:	81a3      	strh	r3, [r4, #12]
 80043c4:	f04f 30ff 	mov.w	r0, #4294967295
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043cc:	6921      	ldr	r1, [r4, #16]
 80043ce:	464a      	mov	r2, r9
 80043d0:	f000 fac0 	bl	8004954 <memcpy>
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80043da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043de:	81a3      	strh	r3, [r4, #12]
 80043e0:	6126      	str	r6, [r4, #16]
 80043e2:	6165      	str	r5, [r4, #20]
 80043e4:	444e      	add	r6, r9
 80043e6:	eba5 0509 	sub.w	r5, r5, r9
 80043ea:	6026      	str	r6, [r4, #0]
 80043ec:	60a5      	str	r5, [r4, #8]
 80043ee:	463e      	mov	r6, r7
 80043f0:	42be      	cmp	r6, r7
 80043f2:	d900      	bls.n	80043f6 <__ssputs_r+0x86>
 80043f4:	463e      	mov	r6, r7
 80043f6:	6820      	ldr	r0, [r4, #0]
 80043f8:	4632      	mov	r2, r6
 80043fa:	4641      	mov	r1, r8
 80043fc:	f000 fab8 	bl	8004970 <memmove>
 8004400:	68a3      	ldr	r3, [r4, #8]
 8004402:	1b9b      	subs	r3, r3, r6
 8004404:	60a3      	str	r3, [r4, #8]
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	4433      	add	r3, r6
 800440a:	6023      	str	r3, [r4, #0]
 800440c:	2000      	movs	r0, #0
 800440e:	e7db      	b.n	80043c8 <__ssputs_r+0x58>
 8004410:	462a      	mov	r2, r5
 8004412:	f000 fac7 	bl	80049a4 <_realloc_r>
 8004416:	4606      	mov	r6, r0
 8004418:	2800      	cmp	r0, #0
 800441a:	d1e1      	bne.n	80043e0 <__ssputs_r+0x70>
 800441c:	6921      	ldr	r1, [r4, #16]
 800441e:	4650      	mov	r0, sl
 8004420:	f7ff fe72 	bl	8004108 <_free_r>
 8004424:	e7c7      	b.n	80043b6 <__ssputs_r+0x46>
	...

08004428 <_svfiprintf_r>:
 8004428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442c:	4698      	mov	r8, r3
 800442e:	898b      	ldrh	r3, [r1, #12]
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	b09d      	sub	sp, #116	; 0x74
 8004434:	4607      	mov	r7, r0
 8004436:	460d      	mov	r5, r1
 8004438:	4614      	mov	r4, r2
 800443a:	d50e      	bpl.n	800445a <_svfiprintf_r+0x32>
 800443c:	690b      	ldr	r3, [r1, #16]
 800443e:	b963      	cbnz	r3, 800445a <_svfiprintf_r+0x32>
 8004440:	2140      	movs	r1, #64	; 0x40
 8004442:	f7ff fecd 	bl	80041e0 <_malloc_r>
 8004446:	6028      	str	r0, [r5, #0]
 8004448:	6128      	str	r0, [r5, #16]
 800444a:	b920      	cbnz	r0, 8004456 <_svfiprintf_r+0x2e>
 800444c:	230c      	movs	r3, #12
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	f04f 30ff 	mov.w	r0, #4294967295
 8004454:	e0d1      	b.n	80045fa <_svfiprintf_r+0x1d2>
 8004456:	2340      	movs	r3, #64	; 0x40
 8004458:	616b      	str	r3, [r5, #20]
 800445a:	2300      	movs	r3, #0
 800445c:	9309      	str	r3, [sp, #36]	; 0x24
 800445e:	2320      	movs	r3, #32
 8004460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004464:	f8cd 800c 	str.w	r8, [sp, #12]
 8004468:	2330      	movs	r3, #48	; 0x30
 800446a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004614 <_svfiprintf_r+0x1ec>
 800446e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004472:	f04f 0901 	mov.w	r9, #1
 8004476:	4623      	mov	r3, r4
 8004478:	469a      	mov	sl, r3
 800447a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800447e:	b10a      	cbz	r2, 8004484 <_svfiprintf_r+0x5c>
 8004480:	2a25      	cmp	r2, #37	; 0x25
 8004482:	d1f9      	bne.n	8004478 <_svfiprintf_r+0x50>
 8004484:	ebba 0b04 	subs.w	fp, sl, r4
 8004488:	d00b      	beq.n	80044a2 <_svfiprintf_r+0x7a>
 800448a:	465b      	mov	r3, fp
 800448c:	4622      	mov	r2, r4
 800448e:	4629      	mov	r1, r5
 8004490:	4638      	mov	r0, r7
 8004492:	f7ff ff6d 	bl	8004370 <__ssputs_r>
 8004496:	3001      	adds	r0, #1
 8004498:	f000 80aa 	beq.w	80045f0 <_svfiprintf_r+0x1c8>
 800449c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800449e:	445a      	add	r2, fp
 80044a0:	9209      	str	r2, [sp, #36]	; 0x24
 80044a2:	f89a 3000 	ldrb.w	r3, [sl]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80a2 	beq.w	80045f0 <_svfiprintf_r+0x1c8>
 80044ac:	2300      	movs	r3, #0
 80044ae:	f04f 32ff 	mov.w	r2, #4294967295
 80044b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044b6:	f10a 0a01 	add.w	sl, sl, #1
 80044ba:	9304      	str	r3, [sp, #16]
 80044bc:	9307      	str	r3, [sp, #28]
 80044be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044c2:	931a      	str	r3, [sp, #104]	; 0x68
 80044c4:	4654      	mov	r4, sl
 80044c6:	2205      	movs	r2, #5
 80044c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044cc:	4851      	ldr	r0, [pc, #324]	; (8004614 <_svfiprintf_r+0x1ec>)
 80044ce:	f7fb fe97 	bl	8000200 <memchr>
 80044d2:	9a04      	ldr	r2, [sp, #16]
 80044d4:	b9d8      	cbnz	r0, 800450e <_svfiprintf_r+0xe6>
 80044d6:	06d0      	lsls	r0, r2, #27
 80044d8:	bf44      	itt	mi
 80044da:	2320      	movmi	r3, #32
 80044dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044e0:	0711      	lsls	r1, r2, #28
 80044e2:	bf44      	itt	mi
 80044e4:	232b      	movmi	r3, #43	; 0x2b
 80044e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ea:	f89a 3000 	ldrb.w	r3, [sl]
 80044ee:	2b2a      	cmp	r3, #42	; 0x2a
 80044f0:	d015      	beq.n	800451e <_svfiprintf_r+0xf6>
 80044f2:	9a07      	ldr	r2, [sp, #28]
 80044f4:	4654      	mov	r4, sl
 80044f6:	2000      	movs	r0, #0
 80044f8:	f04f 0c0a 	mov.w	ip, #10
 80044fc:	4621      	mov	r1, r4
 80044fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004502:	3b30      	subs	r3, #48	; 0x30
 8004504:	2b09      	cmp	r3, #9
 8004506:	d94e      	bls.n	80045a6 <_svfiprintf_r+0x17e>
 8004508:	b1b0      	cbz	r0, 8004538 <_svfiprintf_r+0x110>
 800450a:	9207      	str	r2, [sp, #28]
 800450c:	e014      	b.n	8004538 <_svfiprintf_r+0x110>
 800450e:	eba0 0308 	sub.w	r3, r0, r8
 8004512:	fa09 f303 	lsl.w	r3, r9, r3
 8004516:	4313      	orrs	r3, r2
 8004518:	9304      	str	r3, [sp, #16]
 800451a:	46a2      	mov	sl, r4
 800451c:	e7d2      	b.n	80044c4 <_svfiprintf_r+0x9c>
 800451e:	9b03      	ldr	r3, [sp, #12]
 8004520:	1d19      	adds	r1, r3, #4
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	9103      	str	r1, [sp, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	bfbb      	ittet	lt
 800452a:	425b      	neglt	r3, r3
 800452c:	f042 0202 	orrlt.w	r2, r2, #2
 8004530:	9307      	strge	r3, [sp, #28]
 8004532:	9307      	strlt	r3, [sp, #28]
 8004534:	bfb8      	it	lt
 8004536:	9204      	strlt	r2, [sp, #16]
 8004538:	7823      	ldrb	r3, [r4, #0]
 800453a:	2b2e      	cmp	r3, #46	; 0x2e
 800453c:	d10c      	bne.n	8004558 <_svfiprintf_r+0x130>
 800453e:	7863      	ldrb	r3, [r4, #1]
 8004540:	2b2a      	cmp	r3, #42	; 0x2a
 8004542:	d135      	bne.n	80045b0 <_svfiprintf_r+0x188>
 8004544:	9b03      	ldr	r3, [sp, #12]
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	9203      	str	r2, [sp, #12]
 800454c:	2b00      	cmp	r3, #0
 800454e:	bfb8      	it	lt
 8004550:	f04f 33ff 	movlt.w	r3, #4294967295
 8004554:	3402      	adds	r4, #2
 8004556:	9305      	str	r3, [sp, #20]
 8004558:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004624 <_svfiprintf_r+0x1fc>
 800455c:	7821      	ldrb	r1, [r4, #0]
 800455e:	2203      	movs	r2, #3
 8004560:	4650      	mov	r0, sl
 8004562:	f7fb fe4d 	bl	8000200 <memchr>
 8004566:	b140      	cbz	r0, 800457a <_svfiprintf_r+0x152>
 8004568:	2340      	movs	r3, #64	; 0x40
 800456a:	eba0 000a 	sub.w	r0, r0, sl
 800456e:	fa03 f000 	lsl.w	r0, r3, r0
 8004572:	9b04      	ldr	r3, [sp, #16]
 8004574:	4303      	orrs	r3, r0
 8004576:	3401      	adds	r4, #1
 8004578:	9304      	str	r3, [sp, #16]
 800457a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800457e:	4826      	ldr	r0, [pc, #152]	; (8004618 <_svfiprintf_r+0x1f0>)
 8004580:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004584:	2206      	movs	r2, #6
 8004586:	f7fb fe3b 	bl	8000200 <memchr>
 800458a:	2800      	cmp	r0, #0
 800458c:	d038      	beq.n	8004600 <_svfiprintf_r+0x1d8>
 800458e:	4b23      	ldr	r3, [pc, #140]	; (800461c <_svfiprintf_r+0x1f4>)
 8004590:	bb1b      	cbnz	r3, 80045da <_svfiprintf_r+0x1b2>
 8004592:	9b03      	ldr	r3, [sp, #12]
 8004594:	3307      	adds	r3, #7
 8004596:	f023 0307 	bic.w	r3, r3, #7
 800459a:	3308      	adds	r3, #8
 800459c:	9303      	str	r3, [sp, #12]
 800459e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a0:	4433      	add	r3, r6
 80045a2:	9309      	str	r3, [sp, #36]	; 0x24
 80045a4:	e767      	b.n	8004476 <_svfiprintf_r+0x4e>
 80045a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80045aa:	460c      	mov	r4, r1
 80045ac:	2001      	movs	r0, #1
 80045ae:	e7a5      	b.n	80044fc <_svfiprintf_r+0xd4>
 80045b0:	2300      	movs	r3, #0
 80045b2:	3401      	adds	r4, #1
 80045b4:	9305      	str	r3, [sp, #20]
 80045b6:	4619      	mov	r1, r3
 80045b8:	f04f 0c0a 	mov.w	ip, #10
 80045bc:	4620      	mov	r0, r4
 80045be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045c2:	3a30      	subs	r2, #48	; 0x30
 80045c4:	2a09      	cmp	r2, #9
 80045c6:	d903      	bls.n	80045d0 <_svfiprintf_r+0x1a8>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0c5      	beq.n	8004558 <_svfiprintf_r+0x130>
 80045cc:	9105      	str	r1, [sp, #20]
 80045ce:	e7c3      	b.n	8004558 <_svfiprintf_r+0x130>
 80045d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80045d4:	4604      	mov	r4, r0
 80045d6:	2301      	movs	r3, #1
 80045d8:	e7f0      	b.n	80045bc <_svfiprintf_r+0x194>
 80045da:	ab03      	add	r3, sp, #12
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	462a      	mov	r2, r5
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <_svfiprintf_r+0x1f8>)
 80045e2:	a904      	add	r1, sp, #16
 80045e4:	4638      	mov	r0, r7
 80045e6:	f3af 8000 	nop.w
 80045ea:	1c42      	adds	r2, r0, #1
 80045ec:	4606      	mov	r6, r0
 80045ee:	d1d6      	bne.n	800459e <_svfiprintf_r+0x176>
 80045f0:	89ab      	ldrh	r3, [r5, #12]
 80045f2:	065b      	lsls	r3, r3, #25
 80045f4:	f53f af2c 	bmi.w	8004450 <_svfiprintf_r+0x28>
 80045f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045fa:	b01d      	add	sp, #116	; 0x74
 80045fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004600:	ab03      	add	r3, sp, #12
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	462a      	mov	r2, r5
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <_svfiprintf_r+0x1f8>)
 8004608:	a904      	add	r1, sp, #16
 800460a:	4638      	mov	r0, r7
 800460c:	f000 f87a 	bl	8004704 <_printf_i>
 8004610:	e7eb      	b.n	80045ea <_svfiprintf_r+0x1c2>
 8004612:	bf00      	nop
 8004614:	08004b04 	.word	0x08004b04
 8004618:	08004b0e 	.word	0x08004b0e
 800461c:	00000000 	.word	0x00000000
 8004620:	08004371 	.word	0x08004371
 8004624:	08004b0a 	.word	0x08004b0a

08004628 <_printf_common>:
 8004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	4616      	mov	r6, r2
 800462e:	4699      	mov	r9, r3
 8004630:	688a      	ldr	r2, [r1, #8]
 8004632:	690b      	ldr	r3, [r1, #16]
 8004634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004638:	4293      	cmp	r3, r2
 800463a:	bfb8      	it	lt
 800463c:	4613      	movlt	r3, r2
 800463e:	6033      	str	r3, [r6, #0]
 8004640:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004644:	4607      	mov	r7, r0
 8004646:	460c      	mov	r4, r1
 8004648:	b10a      	cbz	r2, 800464e <_printf_common+0x26>
 800464a:	3301      	adds	r3, #1
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	0699      	lsls	r1, r3, #26
 8004652:	bf42      	ittt	mi
 8004654:	6833      	ldrmi	r3, [r6, #0]
 8004656:	3302      	addmi	r3, #2
 8004658:	6033      	strmi	r3, [r6, #0]
 800465a:	6825      	ldr	r5, [r4, #0]
 800465c:	f015 0506 	ands.w	r5, r5, #6
 8004660:	d106      	bne.n	8004670 <_printf_common+0x48>
 8004662:	f104 0a19 	add.w	sl, r4, #25
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	6832      	ldr	r2, [r6, #0]
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	42ab      	cmp	r3, r5
 800466e:	dc26      	bgt.n	80046be <_printf_common+0x96>
 8004670:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004674:	1e13      	subs	r3, r2, #0
 8004676:	6822      	ldr	r2, [r4, #0]
 8004678:	bf18      	it	ne
 800467a:	2301      	movne	r3, #1
 800467c:	0692      	lsls	r2, r2, #26
 800467e:	d42b      	bmi.n	80046d8 <_printf_common+0xb0>
 8004680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004684:	4649      	mov	r1, r9
 8004686:	4638      	mov	r0, r7
 8004688:	47c0      	blx	r8
 800468a:	3001      	adds	r0, #1
 800468c:	d01e      	beq.n	80046cc <_printf_common+0xa4>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	68e5      	ldr	r5, [r4, #12]
 8004692:	6832      	ldr	r2, [r6, #0]
 8004694:	f003 0306 	and.w	r3, r3, #6
 8004698:	2b04      	cmp	r3, #4
 800469a:	bf08      	it	eq
 800469c:	1aad      	subeq	r5, r5, r2
 800469e:	68a3      	ldr	r3, [r4, #8]
 80046a0:	6922      	ldr	r2, [r4, #16]
 80046a2:	bf0c      	ite	eq
 80046a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046a8:	2500      	movne	r5, #0
 80046aa:	4293      	cmp	r3, r2
 80046ac:	bfc4      	itt	gt
 80046ae:	1a9b      	subgt	r3, r3, r2
 80046b0:	18ed      	addgt	r5, r5, r3
 80046b2:	2600      	movs	r6, #0
 80046b4:	341a      	adds	r4, #26
 80046b6:	42b5      	cmp	r5, r6
 80046b8:	d11a      	bne.n	80046f0 <_printf_common+0xc8>
 80046ba:	2000      	movs	r0, #0
 80046bc:	e008      	b.n	80046d0 <_printf_common+0xa8>
 80046be:	2301      	movs	r3, #1
 80046c0:	4652      	mov	r2, sl
 80046c2:	4649      	mov	r1, r9
 80046c4:	4638      	mov	r0, r7
 80046c6:	47c0      	blx	r8
 80046c8:	3001      	adds	r0, #1
 80046ca:	d103      	bne.n	80046d4 <_printf_common+0xac>
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d4:	3501      	adds	r5, #1
 80046d6:	e7c6      	b.n	8004666 <_printf_common+0x3e>
 80046d8:	18e1      	adds	r1, r4, r3
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	2030      	movs	r0, #48	; 0x30
 80046de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046e2:	4422      	add	r2, r4
 80046e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046ec:	3302      	adds	r3, #2
 80046ee:	e7c7      	b.n	8004680 <_printf_common+0x58>
 80046f0:	2301      	movs	r3, #1
 80046f2:	4622      	mov	r2, r4
 80046f4:	4649      	mov	r1, r9
 80046f6:	4638      	mov	r0, r7
 80046f8:	47c0      	blx	r8
 80046fa:	3001      	adds	r0, #1
 80046fc:	d0e6      	beq.n	80046cc <_printf_common+0xa4>
 80046fe:	3601      	adds	r6, #1
 8004700:	e7d9      	b.n	80046b6 <_printf_common+0x8e>
	...

08004704 <_printf_i>:
 8004704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	7e0f      	ldrb	r7, [r1, #24]
 800470a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800470c:	2f78      	cmp	r7, #120	; 0x78
 800470e:	4691      	mov	r9, r2
 8004710:	4680      	mov	r8, r0
 8004712:	460c      	mov	r4, r1
 8004714:	469a      	mov	sl, r3
 8004716:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800471a:	d807      	bhi.n	800472c <_printf_i+0x28>
 800471c:	2f62      	cmp	r7, #98	; 0x62
 800471e:	d80a      	bhi.n	8004736 <_printf_i+0x32>
 8004720:	2f00      	cmp	r7, #0
 8004722:	f000 80d8 	beq.w	80048d6 <_printf_i+0x1d2>
 8004726:	2f58      	cmp	r7, #88	; 0x58
 8004728:	f000 80a3 	beq.w	8004872 <_printf_i+0x16e>
 800472c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004730:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004734:	e03a      	b.n	80047ac <_printf_i+0xa8>
 8004736:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800473a:	2b15      	cmp	r3, #21
 800473c:	d8f6      	bhi.n	800472c <_printf_i+0x28>
 800473e:	a101      	add	r1, pc, #4	; (adr r1, 8004744 <_printf_i+0x40>)
 8004740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004744:	0800479d 	.word	0x0800479d
 8004748:	080047b1 	.word	0x080047b1
 800474c:	0800472d 	.word	0x0800472d
 8004750:	0800472d 	.word	0x0800472d
 8004754:	0800472d 	.word	0x0800472d
 8004758:	0800472d 	.word	0x0800472d
 800475c:	080047b1 	.word	0x080047b1
 8004760:	0800472d 	.word	0x0800472d
 8004764:	0800472d 	.word	0x0800472d
 8004768:	0800472d 	.word	0x0800472d
 800476c:	0800472d 	.word	0x0800472d
 8004770:	080048bd 	.word	0x080048bd
 8004774:	080047e1 	.word	0x080047e1
 8004778:	0800489f 	.word	0x0800489f
 800477c:	0800472d 	.word	0x0800472d
 8004780:	0800472d 	.word	0x0800472d
 8004784:	080048df 	.word	0x080048df
 8004788:	0800472d 	.word	0x0800472d
 800478c:	080047e1 	.word	0x080047e1
 8004790:	0800472d 	.word	0x0800472d
 8004794:	0800472d 	.word	0x0800472d
 8004798:	080048a7 	.word	0x080048a7
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	1d1a      	adds	r2, r3, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	602a      	str	r2, [r5, #0]
 80047a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0a3      	b.n	80048f8 <_printf_i+0x1f4>
 80047b0:	6820      	ldr	r0, [r4, #0]
 80047b2:	6829      	ldr	r1, [r5, #0]
 80047b4:	0606      	lsls	r6, r0, #24
 80047b6:	f101 0304 	add.w	r3, r1, #4
 80047ba:	d50a      	bpl.n	80047d2 <_printf_i+0xce>
 80047bc:	680e      	ldr	r6, [r1, #0]
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	2e00      	cmp	r6, #0
 80047c2:	da03      	bge.n	80047cc <_printf_i+0xc8>
 80047c4:	232d      	movs	r3, #45	; 0x2d
 80047c6:	4276      	negs	r6, r6
 80047c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047cc:	485e      	ldr	r0, [pc, #376]	; (8004948 <_printf_i+0x244>)
 80047ce:	230a      	movs	r3, #10
 80047d0:	e019      	b.n	8004806 <_printf_i+0x102>
 80047d2:	680e      	ldr	r6, [r1, #0]
 80047d4:	602b      	str	r3, [r5, #0]
 80047d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047da:	bf18      	it	ne
 80047dc:	b236      	sxthne	r6, r6
 80047de:	e7ef      	b.n	80047c0 <_printf_i+0xbc>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	6820      	ldr	r0, [r4, #0]
 80047e4:	1d19      	adds	r1, r3, #4
 80047e6:	6029      	str	r1, [r5, #0]
 80047e8:	0601      	lsls	r1, r0, #24
 80047ea:	d501      	bpl.n	80047f0 <_printf_i+0xec>
 80047ec:	681e      	ldr	r6, [r3, #0]
 80047ee:	e002      	b.n	80047f6 <_printf_i+0xf2>
 80047f0:	0646      	lsls	r6, r0, #25
 80047f2:	d5fb      	bpl.n	80047ec <_printf_i+0xe8>
 80047f4:	881e      	ldrh	r6, [r3, #0]
 80047f6:	4854      	ldr	r0, [pc, #336]	; (8004948 <_printf_i+0x244>)
 80047f8:	2f6f      	cmp	r7, #111	; 0x6f
 80047fa:	bf0c      	ite	eq
 80047fc:	2308      	moveq	r3, #8
 80047fe:	230a      	movne	r3, #10
 8004800:	2100      	movs	r1, #0
 8004802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004806:	6865      	ldr	r5, [r4, #4]
 8004808:	60a5      	str	r5, [r4, #8]
 800480a:	2d00      	cmp	r5, #0
 800480c:	bfa2      	ittt	ge
 800480e:	6821      	ldrge	r1, [r4, #0]
 8004810:	f021 0104 	bicge.w	r1, r1, #4
 8004814:	6021      	strge	r1, [r4, #0]
 8004816:	b90e      	cbnz	r6, 800481c <_printf_i+0x118>
 8004818:	2d00      	cmp	r5, #0
 800481a:	d04d      	beq.n	80048b8 <_printf_i+0x1b4>
 800481c:	4615      	mov	r5, r2
 800481e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004822:	fb03 6711 	mls	r7, r3, r1, r6
 8004826:	5dc7      	ldrb	r7, [r0, r7]
 8004828:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800482c:	4637      	mov	r7, r6
 800482e:	42bb      	cmp	r3, r7
 8004830:	460e      	mov	r6, r1
 8004832:	d9f4      	bls.n	800481e <_printf_i+0x11a>
 8004834:	2b08      	cmp	r3, #8
 8004836:	d10b      	bne.n	8004850 <_printf_i+0x14c>
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	07de      	lsls	r6, r3, #31
 800483c:	d508      	bpl.n	8004850 <_printf_i+0x14c>
 800483e:	6923      	ldr	r3, [r4, #16]
 8004840:	6861      	ldr	r1, [r4, #4]
 8004842:	4299      	cmp	r1, r3
 8004844:	bfde      	ittt	le
 8004846:	2330      	movle	r3, #48	; 0x30
 8004848:	f805 3c01 	strble.w	r3, [r5, #-1]
 800484c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004850:	1b52      	subs	r2, r2, r5
 8004852:	6122      	str	r2, [r4, #16]
 8004854:	f8cd a000 	str.w	sl, [sp]
 8004858:	464b      	mov	r3, r9
 800485a:	aa03      	add	r2, sp, #12
 800485c:	4621      	mov	r1, r4
 800485e:	4640      	mov	r0, r8
 8004860:	f7ff fee2 	bl	8004628 <_printf_common>
 8004864:	3001      	adds	r0, #1
 8004866:	d14c      	bne.n	8004902 <_printf_i+0x1fe>
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	b004      	add	sp, #16
 800486e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004872:	4835      	ldr	r0, [pc, #212]	; (8004948 <_printf_i+0x244>)
 8004874:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004878:	6829      	ldr	r1, [r5, #0]
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004880:	6029      	str	r1, [r5, #0]
 8004882:	061d      	lsls	r5, r3, #24
 8004884:	d514      	bpl.n	80048b0 <_printf_i+0x1ac>
 8004886:	07df      	lsls	r7, r3, #31
 8004888:	bf44      	itt	mi
 800488a:	f043 0320 	orrmi.w	r3, r3, #32
 800488e:	6023      	strmi	r3, [r4, #0]
 8004890:	b91e      	cbnz	r6, 800489a <_printf_i+0x196>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	f023 0320 	bic.w	r3, r3, #32
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	2310      	movs	r3, #16
 800489c:	e7b0      	b.n	8004800 <_printf_i+0xfc>
 800489e:	6823      	ldr	r3, [r4, #0]
 80048a0:	f043 0320 	orr.w	r3, r3, #32
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	2378      	movs	r3, #120	; 0x78
 80048a8:	4828      	ldr	r0, [pc, #160]	; (800494c <_printf_i+0x248>)
 80048aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048ae:	e7e3      	b.n	8004878 <_printf_i+0x174>
 80048b0:	0659      	lsls	r1, r3, #25
 80048b2:	bf48      	it	mi
 80048b4:	b2b6      	uxthmi	r6, r6
 80048b6:	e7e6      	b.n	8004886 <_printf_i+0x182>
 80048b8:	4615      	mov	r5, r2
 80048ba:	e7bb      	b.n	8004834 <_printf_i+0x130>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	6826      	ldr	r6, [r4, #0]
 80048c0:	6961      	ldr	r1, [r4, #20]
 80048c2:	1d18      	adds	r0, r3, #4
 80048c4:	6028      	str	r0, [r5, #0]
 80048c6:	0635      	lsls	r5, r6, #24
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	d501      	bpl.n	80048d0 <_printf_i+0x1cc>
 80048cc:	6019      	str	r1, [r3, #0]
 80048ce:	e002      	b.n	80048d6 <_printf_i+0x1d2>
 80048d0:	0670      	lsls	r0, r6, #25
 80048d2:	d5fb      	bpl.n	80048cc <_printf_i+0x1c8>
 80048d4:	8019      	strh	r1, [r3, #0]
 80048d6:	2300      	movs	r3, #0
 80048d8:	6123      	str	r3, [r4, #16]
 80048da:	4615      	mov	r5, r2
 80048dc:	e7ba      	b.n	8004854 <_printf_i+0x150>
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	1d1a      	adds	r2, r3, #4
 80048e2:	602a      	str	r2, [r5, #0]
 80048e4:	681d      	ldr	r5, [r3, #0]
 80048e6:	6862      	ldr	r2, [r4, #4]
 80048e8:	2100      	movs	r1, #0
 80048ea:	4628      	mov	r0, r5
 80048ec:	f7fb fc88 	bl	8000200 <memchr>
 80048f0:	b108      	cbz	r0, 80048f6 <_printf_i+0x1f2>
 80048f2:	1b40      	subs	r0, r0, r5
 80048f4:	6060      	str	r0, [r4, #4]
 80048f6:	6863      	ldr	r3, [r4, #4]
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	2300      	movs	r3, #0
 80048fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004900:	e7a8      	b.n	8004854 <_printf_i+0x150>
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	462a      	mov	r2, r5
 8004906:	4649      	mov	r1, r9
 8004908:	4640      	mov	r0, r8
 800490a:	47d0      	blx	sl
 800490c:	3001      	adds	r0, #1
 800490e:	d0ab      	beq.n	8004868 <_printf_i+0x164>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	079b      	lsls	r3, r3, #30
 8004914:	d413      	bmi.n	800493e <_printf_i+0x23a>
 8004916:	68e0      	ldr	r0, [r4, #12]
 8004918:	9b03      	ldr	r3, [sp, #12]
 800491a:	4298      	cmp	r0, r3
 800491c:	bfb8      	it	lt
 800491e:	4618      	movlt	r0, r3
 8004920:	e7a4      	b.n	800486c <_printf_i+0x168>
 8004922:	2301      	movs	r3, #1
 8004924:	4632      	mov	r2, r6
 8004926:	4649      	mov	r1, r9
 8004928:	4640      	mov	r0, r8
 800492a:	47d0      	blx	sl
 800492c:	3001      	adds	r0, #1
 800492e:	d09b      	beq.n	8004868 <_printf_i+0x164>
 8004930:	3501      	adds	r5, #1
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	9903      	ldr	r1, [sp, #12]
 8004936:	1a5b      	subs	r3, r3, r1
 8004938:	42ab      	cmp	r3, r5
 800493a:	dcf2      	bgt.n	8004922 <_printf_i+0x21e>
 800493c:	e7eb      	b.n	8004916 <_printf_i+0x212>
 800493e:	2500      	movs	r5, #0
 8004940:	f104 0619 	add.w	r6, r4, #25
 8004944:	e7f5      	b.n	8004932 <_printf_i+0x22e>
 8004946:	bf00      	nop
 8004948:	08004b15 	.word	0x08004b15
 800494c:	08004b26 	.word	0x08004b26

08004950 <__retarget_lock_acquire_recursive>:
 8004950:	4770      	bx	lr

08004952 <__retarget_lock_release_recursive>:
 8004952:	4770      	bx	lr

08004954 <memcpy>:
 8004954:	440a      	add	r2, r1
 8004956:	4291      	cmp	r1, r2
 8004958:	f100 33ff 	add.w	r3, r0, #4294967295
 800495c:	d100      	bne.n	8004960 <memcpy+0xc>
 800495e:	4770      	bx	lr
 8004960:	b510      	push	{r4, lr}
 8004962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800496a:	4291      	cmp	r1, r2
 800496c:	d1f9      	bne.n	8004962 <memcpy+0xe>
 800496e:	bd10      	pop	{r4, pc}

08004970 <memmove>:
 8004970:	4288      	cmp	r0, r1
 8004972:	b510      	push	{r4, lr}
 8004974:	eb01 0402 	add.w	r4, r1, r2
 8004978:	d902      	bls.n	8004980 <memmove+0x10>
 800497a:	4284      	cmp	r4, r0
 800497c:	4623      	mov	r3, r4
 800497e:	d807      	bhi.n	8004990 <memmove+0x20>
 8004980:	1e43      	subs	r3, r0, #1
 8004982:	42a1      	cmp	r1, r4
 8004984:	d008      	beq.n	8004998 <memmove+0x28>
 8004986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800498a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800498e:	e7f8      	b.n	8004982 <memmove+0x12>
 8004990:	4402      	add	r2, r0
 8004992:	4601      	mov	r1, r0
 8004994:	428a      	cmp	r2, r1
 8004996:	d100      	bne.n	800499a <memmove+0x2a>
 8004998:	bd10      	pop	{r4, pc}
 800499a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800499e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049a2:	e7f7      	b.n	8004994 <memmove+0x24>

080049a4 <_realloc_r>:
 80049a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049a8:	4680      	mov	r8, r0
 80049aa:	4614      	mov	r4, r2
 80049ac:	460e      	mov	r6, r1
 80049ae:	b921      	cbnz	r1, 80049ba <_realloc_r+0x16>
 80049b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049b4:	4611      	mov	r1, r2
 80049b6:	f7ff bc13 	b.w	80041e0 <_malloc_r>
 80049ba:	b92a      	cbnz	r2, 80049c8 <_realloc_r+0x24>
 80049bc:	f7ff fba4 	bl	8004108 <_free_r>
 80049c0:	4625      	mov	r5, r4
 80049c2:	4628      	mov	r0, r5
 80049c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049c8:	f000 f81b 	bl	8004a02 <_malloc_usable_size_r>
 80049cc:	4284      	cmp	r4, r0
 80049ce:	4607      	mov	r7, r0
 80049d0:	d802      	bhi.n	80049d8 <_realloc_r+0x34>
 80049d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80049d6:	d812      	bhi.n	80049fe <_realloc_r+0x5a>
 80049d8:	4621      	mov	r1, r4
 80049da:	4640      	mov	r0, r8
 80049dc:	f7ff fc00 	bl	80041e0 <_malloc_r>
 80049e0:	4605      	mov	r5, r0
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d0ed      	beq.n	80049c2 <_realloc_r+0x1e>
 80049e6:	42bc      	cmp	r4, r7
 80049e8:	4622      	mov	r2, r4
 80049ea:	4631      	mov	r1, r6
 80049ec:	bf28      	it	cs
 80049ee:	463a      	movcs	r2, r7
 80049f0:	f7ff ffb0 	bl	8004954 <memcpy>
 80049f4:	4631      	mov	r1, r6
 80049f6:	4640      	mov	r0, r8
 80049f8:	f7ff fb86 	bl	8004108 <_free_r>
 80049fc:	e7e1      	b.n	80049c2 <_realloc_r+0x1e>
 80049fe:	4635      	mov	r5, r6
 8004a00:	e7df      	b.n	80049c2 <_realloc_r+0x1e>

08004a02 <_malloc_usable_size_r>:
 8004a02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a06:	1f18      	subs	r0, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bfbc      	itt	lt
 8004a0c:	580b      	ldrlt	r3, [r1, r0]
 8004a0e:	18c0      	addlt	r0, r0, r3
 8004a10:	4770      	bx	lr
	...

08004a14 <_init>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	bf00      	nop
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr

08004a20 <_fini>:
 8004a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a22:	bf00      	nop
 8004a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a26:	bc08      	pop	{r3}
 8004a28:	469e      	mov	lr, r3
 8004a2a:	4770      	bx	lr
