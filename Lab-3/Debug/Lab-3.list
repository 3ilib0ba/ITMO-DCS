
Lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006148  08006148  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006148  08006148  00016148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006150  08006150  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006150  08006150  00016150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08006158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          00000230  200001a4  200001a4  000201a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  000201a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013936  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f50  00000000  00000000  00033b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  00036a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001008  00000000  00000000  00037bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024fe8  00000000  00000000  00038bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169d3  00000000  00000000  0005dba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da965  00000000  00000000  0007457b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014eee0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b4c  00000000  00000000  0014ef30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005fe0 	.word	0x08005fe0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a8 	.word	0x200001a8
 80001ec:	08005fe0 	.word	0x08005fe0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <MX_GPIO_Init+0x84>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <MX_GPIO_Init+0x84>)
 80005b4:	f043 0310 	orr.w	r3, r3, #16
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_GPIO_Init+0x84>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0310 	and.w	r3, r3, #16
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_GPIO_Init+0x84>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <MX_GPIO_Init+0x84>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_GPIO_Init+0x84>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_GPIO_Init+0x84>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <MX_GPIO_Init+0x84>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_GPIO_Init+0x84>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_GPIO_Init+0x84>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <MX_GPIO_Init+0x84>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_GPIO_Init+0x84>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <MX_I2C1_Init+0x78>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <MX_I2C1_Init+0x7c>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_I2C1_Init+0x74>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_I2C1_Init+0x74>)
 800066a:	f001 fc93 	bl	8001f94 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f9bc 	bl	80009f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000678:	2100      	movs	r1, #0
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <MX_I2C1_Init+0x74>)
 800067c:	f002 fc49 	bl	8002f12 <HAL_I2CEx_ConfigAnalogFilter>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000686:	f000 f9b3 	bl	80009f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_I2C1_Init+0x74>)
 800068e:	f002 fc7c 	bl	8002f8a <HAL_I2CEx_ConfigDigitalFilter>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000698:	f000 f9aa 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200001c0 	.word	0x200001c0
 80006a4:	40005400 	.word	0x40005400
 80006a8:	00061a80 	.word	0x00061a80

080006ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a19      	ldr	r2, [pc, #100]	; (8000730 <HAL_I2C_MspInit+0x84>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d12c      	bne.n	8000728 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	4b18      	ldr	r3, [pc, #96]	; (8000734 <HAL_I2C_MspInit+0x88>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a17      	ldr	r2, [pc, #92]	; (8000734 <HAL_I2C_MspInit+0x88>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <HAL_I2C_MspInit+0x88>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80006ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f0:	2312      	movs	r3, #18
 80006f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006fc:	2304      	movs	r3, #4
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	480c      	ldr	r0, [pc, #48]	; (8000738 <HAL_I2C_MspInit+0x8c>)
 8000708:	f001 fa80 	bl	8001c0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <HAL_I2C_MspInit+0x88>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <HAL_I2C_MspInit+0x88>)
 8000716:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_I2C_MspInit+0x88>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3728      	adds	r7, #40	; 0x28
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40005400 	.word	0x40005400
 8000734:	40023800 	.word	0x40023800
 8000738:	40020400 	.word	0x40020400

0800073c <Set_Keyboard>:
#include "my_uart.h"
#include "usart.h"

#define KBRD_ADDR 0xE2

HAL_StatusTypeDef Set_Keyboard( void ) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_OK;
 8000742:	2300      	movs	r3, #0
 8000744:	71fb      	strb	r3, [r7, #7]
	uint8_t buf;

	buf = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, POLARITY_INVERSION, &buf);
 800074a:	1dbb      	adds	r3, r7, #6
 800074c:	461a      	mov	r2, r3
 800074e:	2102      	movs	r1, #2
 8000750:	20e2      	movs	r0, #226	; 0xe2
 8000752:	f000 fd5f 	bl	8001214 <PCA9538_Write_Register>
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d10a      	bne.n	8000776 <Set_Keyboard+0x3a>
//		append_to_sending_buffer_by_uart((char*)"Error write polarity\n");
		goto exit;
	}

	buf = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	71bb      	strb	r3, [r7, #6]
	ret = PCA9538_Write_Register(KBRD_ADDR, OUTPUT_PORT, &buf);
 8000764:	1dbb      	adds	r3, r7, #6
 8000766:	461a      	mov	r2, r3
 8000768:	2101      	movs	r1, #1
 800076a:	20e2      	movs	r0, #226	; 0xe2
 800076c:	f000 fd52 	bl	8001214 <PCA9538_Write_Register>
 8000770:	4603      	mov	r3, r0
 8000772:	71fb      	strb	r3, [r7, #7]
	if( ret != HAL_OK ) {
//		append_to_sending_buffer_by_uart((char*)"Error write output\n");
	}

exit:
 8000774:	e000      	b.n	8000778 <Set_Keyboard+0x3c>
		goto exit;
 8000776:	bf00      	nop
	return ret;
 8000778:	79fb      	ldrb	r3, [r7, #7]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <Get_Key>:
//	else Nkey = 0x00;
//
//	return Nkey;
//}

uint8_t Get_Key( uint8_t  Nrow ){
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
	uint8_t Nkey = 0x00;
 800078e:	2300      	movs	r3, #0
 8000790:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef ret = HAL_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	73bb      	strb	r3, [r7, #14]
	uint8_t buf;
	uint8_t kbd_in;

	ret = Set_Keyboard();
 8000796:	f7ff ffd1 	bl	800073c <Set_Keyboard>
 800079a:	4603      	mov	r3, r0
 800079c:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
//		append_to_sending_buffer_by_uart((char*)"Error write init\n");
	}

	buf = Nrow;
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	733b      	strb	r3, [r7, #12]
	ret = PCA9538_Write_Register(KBRD_ADDR, CONFIG, &buf);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	461a      	mov	r2, r3
 80007a8:	2103      	movs	r1, #3
 80007aa:	20e2      	movs	r0, #226	; 0xe2
 80007ac:	f000 fd32 	bl	8001214 <PCA9538_Write_Register>
 80007b0:	4603      	mov	r3, r0
 80007b2:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
//		append_to_sending_buffer_by_uart((char*)"Error write config\n");
	}

	ret = PCA9538_Read_Inputs(KBRD_ADDR, &buf);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	20e2      	movs	r0, #226	; 0xe2
 80007bc:	f000 fd4a 	bl	8001254 <PCA9538_Read_Inputs>
 80007c0:	4603      	mov	r3, r0
 80007c2:	73bb      	strb	r3, [r7, #14]
	if( ret != HAL_OK ) {
//		append_to_sending_buffer_by_uart((char*)"Read error\n");
	}

	kbd_in = buf & 0x70;
 80007c4:	7b3b      	ldrb	r3, [r7, #12]
 80007c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80007ca:	737b      	strb	r3, [r7, #13]
	Nkey = kbd_in;
 80007cc:	7b7b      	ldrb	r3, [r7, #13]
 80007ce:	73fb      	strb	r3, [r7, #15]

	// 7 8 9
	// 4 5 6
	// 1 2 3
	// 0 r s
	if( kbd_in != 0x70) { //redefined as normal calculator
 80007d0:	7b7b      	ldrb	r3, [r7, #13]
 80007d2:	2b70      	cmp	r3, #112	; 0x70
 80007d4:	d07c      	beq.n	80008d0 <Get_Key+0x14c>
		if( !(kbd_in & 0x10) ) { //left
 80007d6:	7b7b      	ldrb	r3, [r7, #13]
 80007d8:	f003 0310 	and.w	r3, r3, #16
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d123      	bne.n	8000828 <Get_Key+0xa4>
			switch (Nrow) {
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	3bf7      	subs	r3, #247	; 0xf7
 80007e4:	2b07      	cmp	r3, #7
 80007e6:	d820      	bhi.n	800082a <Get_Key+0xa6>
 80007e8:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <Get_Key+0x6c>)
 80007ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ee:	bf00      	nop
 80007f0:	08000823 	.word	0x08000823
 80007f4:	0800082b 	.word	0x0800082b
 80007f8:	0800082b 	.word	0x0800082b
 80007fc:	0800082b 	.word	0x0800082b
 8000800:	0800081d 	.word	0x0800081d
 8000804:	0800082b 	.word	0x0800082b
 8000808:	08000817 	.word	0x08000817
 800080c:	08000811 	.word	0x08000811
				case ROW1:
					Nkey = 0x07;
 8000810:	2307      	movs	r3, #7
 8000812:	73fb      	strb	r3, [r7, #15]
					break;
 8000814:	e009      	b.n	800082a <Get_Key+0xa6>
				case ROW2:
					Nkey = 0x04;
 8000816:	2304      	movs	r3, #4
 8000818:	73fb      	strb	r3, [r7, #15]
					break;
 800081a:	e006      	b.n	800082a <Get_Key+0xa6>
				case ROW3:
					Nkey = 0x01;
 800081c:	2301      	movs	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]
					break;
 8000820:	e003      	b.n	800082a <Get_Key+0xa6>
				case ROW4:
					Nkey = 0x0A;
 8000822:	230a      	movs	r3, #10
 8000824:	73fb      	strb	r3, [r7, #15]
					break;
 8000826:	e000      	b.n	800082a <Get_Key+0xa6>
			}
		}
 8000828:	bf00      	nop
		if( !(kbd_in & 0x20) ) { //center
 800082a:	7b7b      	ldrb	r3, [r7, #13]
 800082c:	f003 0320 	and.w	r3, r3, #32
 8000830:	2b00      	cmp	r3, #0
 8000832:	d123      	bne.n	800087c <Get_Key+0xf8>
			switch (Nrow) {
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	3bf7      	subs	r3, #247	; 0xf7
 8000838:	2b07      	cmp	r3, #7
 800083a:	d820      	bhi.n	800087e <Get_Key+0xfa>
 800083c:	a201      	add	r2, pc, #4	; (adr r2, 8000844 <Get_Key+0xc0>)
 800083e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000842:	bf00      	nop
 8000844:	08000877 	.word	0x08000877
 8000848:	0800087f 	.word	0x0800087f
 800084c:	0800087f 	.word	0x0800087f
 8000850:	0800087f 	.word	0x0800087f
 8000854:	08000871 	.word	0x08000871
 8000858:	0800087f 	.word	0x0800087f
 800085c:	0800086b 	.word	0x0800086b
 8000860:	08000865 	.word	0x08000865
				case ROW1:
					Nkey = 0x08;
 8000864:	2308      	movs	r3, #8
 8000866:	73fb      	strb	r3, [r7, #15]
					break;
 8000868:	e009      	b.n	800087e <Get_Key+0xfa>
				case ROW2:
					Nkey = 0x05;
 800086a:	2305      	movs	r3, #5
 800086c:	73fb      	strb	r3, [r7, #15]
					break;
 800086e:	e006      	b.n	800087e <Get_Key+0xfa>
				case ROW3:
					Nkey = 0x02;
 8000870:	2302      	movs	r3, #2
 8000872:	73fb      	strb	r3, [r7, #15]
					break;
 8000874:	e003      	b.n	800087e <Get_Key+0xfa>
				case ROW4:
					Nkey = 0x0B; // reset(pause)
 8000876:	230b      	movs	r3, #11
 8000878:	73fb      	strb	r3, [r7, #15]
					break;
 800087a:	e000      	b.n	800087e <Get_Key+0xfa>
			}
		}
 800087c:	bf00      	nop
		if( !(kbd_in & 0x40) ) { //right
 800087e:	7b7b      	ldrb	r3, [r7, #13]
 8000880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000884:	2b00      	cmp	r3, #0
 8000886:	d126      	bne.n	80008d6 <Get_Key+0x152>
			switch (Nrow) {
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	3bf7      	subs	r3, #247	; 0xf7
 800088c:	2b07      	cmp	r3, #7
 800088e:	d823      	bhi.n	80008d8 <Get_Key+0x154>
 8000890:	a201      	add	r2, pc, #4	; (adr r2, 8000898 <Get_Key+0x114>)
 8000892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000896:	bf00      	nop
 8000898:	080008cb 	.word	0x080008cb
 800089c:	080008d9 	.word	0x080008d9
 80008a0:	080008d9 	.word	0x080008d9
 80008a4:	080008d9 	.word	0x080008d9
 80008a8:	080008c5 	.word	0x080008c5
 80008ac:	080008d9 	.word	0x080008d9
 80008b0:	080008bf 	.word	0x080008bf
 80008b4:	080008b9 	.word	0x080008b9
				case ROW1:
					Nkey = 0x09;
 80008b8:	2309      	movs	r3, #9
 80008ba:	73fb      	strb	r3, [r7, #15]
					break;
 80008bc:	e00c      	b.n	80008d8 <Get_Key+0x154>
				case ROW2:
					Nkey = 0x06;
 80008be:	2306      	movs	r3, #6
 80008c0:	73fb      	strb	r3, [r7, #15]
					break;
 80008c2:	e009      	b.n	80008d8 <Get_Key+0x154>
				case ROW3:
					Nkey = 0x03;
 80008c4:	2303      	movs	r3, #3
 80008c6:	73fb      	strb	r3, [r7, #15]
					break;
 80008c8:	e006      	b.n	80008d8 <Get_Key+0x154>
				case ROW4:
					Nkey = 0x0C; // start (unpause)
 80008ca:	230c      	movs	r3, #12
 80008cc:	73fb      	strb	r3, [r7, #15]
					break;
 80008ce:	e003      	b.n	80008d8 <Get_Key+0x154>
			}
		}
	}
	else Nkey = 0x0D;
 80008d0:	230d      	movs	r3, #13
 80008d2:	73fb      	strb	r3, [r7, #15]
 80008d4:	e000      	b.n	80008d8 <Get_Key+0x154>
		}
 80008d6:	bf00      	nop

	return Nkey;
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e8:	f000 ff56 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ec:	f000 f814 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f0:	f7ff fe58 	bl	80005a4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80008f4:	f000 feac 	bl	8001650 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80008f8:	f000 fd6c 	bl	80013d4 <MX_TIM1_Init>
  MX_TIM6_Init();
 80008fc:	f000 fdee 	bl	80014dc <MX_TIM6_Init>
  MX_I2C1_Init();
 8000900:	f7ff fe94 	bl	800062c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	set_default_value_for_sound();
 8000904:	f000 fa48 	bl	8000d98 <set_default_value_for_sound>
	set_default_value_for_uart();
 8000908:	f000 fbbc 	bl	8001084 <set_default_value_for_uart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		parse_mode();
 800090c:	f000 f89a 	bl	8000a44 <parse_mode>
		send_message_by_uart_if_available();
 8000910:	f000 fb94 	bl	800103c <send_message_by_uart_if_available>
	while (1) {
 8000914:	e7fa      	b.n	800090c <main+0x28>
	...

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	; 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2230      	movs	r2, #48	; 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f004 fecc 	bl	80056c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <SystemClock_Config+0xd0>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a28      	ldr	r2, [pc, #160]	; (80009e8 <SystemClock_Config+0xd0>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <SystemClock_Config+0xd0>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b23      	ldr	r3, [pc, #140]	; (80009ec <SystemClock_Config+0xd4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	4a21      	ldr	r2, [pc, #132]	; (80009ec <SystemClock_Config+0xd4>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <SystemClock_Config+0xd4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000988:	2300      	movs	r3, #0
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800098c:	2308      	movs	r3, #8
 800098e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000990:	2348      	movs	r3, #72	; 0x48
 8000992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 fb31 	bl	8003008 <HAL_RCC_OscConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009ac:	f000 f820 	bl	80009f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b0:	230f      	movs	r3, #15
 80009b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b4:	2302      	movs	r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80009b8:	23a0      	movs	r3, #160	; 0xa0
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80009c2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f002 fd92 	bl	80034f8 <HAL_RCC_ClockConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009da:	f000 f809 	bl	80009f0 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	3750      	adds	r7, #80	; 0x50
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40007000 	.word	0x40007000

080009f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009f8:	e7fe      	b.n	80009f8 <Error_Handler+0x8>
	...

080009fc <readKB>:
#include "kb.h"

uint8_t Row[4] = { ROW1, ROW2, ROW3, ROW4 }, key, old_key, flag = 0;
uint8_t mode = 1; // 0 - test, 1 - prod

uint8_t readKB() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	uint8_t key = 0x0D;
 8000a02:	230d      	movs	r3, #13
 8000a04:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 4; i++) {
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	e010      	b.n	8000a2e <readKB+0x32>
		key = Get_Key(Row[i]);
 8000a0c:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <readKB+0x44>)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff feb5 	bl	8000784 <Get_Key>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
		if (key != 0x0D)
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b0d      	cmp	r3, #13
 8000a22:	d001      	beq.n	8000a28 <readKB+0x2c>
			return key;
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	e006      	b.n	8000a36 <readKB+0x3a>
	for (int i = 0; i < 4; i++) {
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	ddeb      	ble.n	8000a0c <readKB+0x10>
	}
	return key;
 8000a34:	79fb      	ldrb	r3, [r7, #7]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000000 	.word	0x20000000

08000a44 <parse_mode>:

void parse_mode() {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	check_mode_status();
 8000a48:	f000 f918 	bl	8000c7c <check_mode_status>
	if (mode){
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <parse_mode+0x20>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <parse_mode+0x16>
		parse_symbol_if_available();
 8000a54:	f000 f808 	bl	8000a68 <parse_symbol_if_available>
	} else {
		parse_symbol_as_test();
	}
}
 8000a58:	e001      	b.n	8000a5e <parse_mode+0x1a>
		parse_symbol_as_test();
 8000a5a:	f000 f853 	bl	8000b04 <parse_symbol_as_test>
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000004 	.word	0x20000004

08000a68 <parse_symbol_if_available>:


void parse_symbol_if_available() {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	key = readKB();
 8000a6c:	f7ff ffc6 	bl	80009fc <readKB>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <parse_symbol_if_available+0x94>)
 8000a76:	701a      	strb	r2, [r3, #0]
	if (key != old_key) {
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <parse_symbol_if_available+0x94>)
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <parse_symbol_if_available+0x98>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d039      	beq.n	8000af8 <parse_symbol_if_available+0x90>
		if (key > 0 && key < 8) {
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <parse_symbol_if_available+0x94>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00a      	beq.n	8000aa2 <parse_symbol_if_available+0x3a>
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <parse_symbol_if_available+0x94>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b07      	cmp	r3, #7
 8000a92:	d806      	bhi.n	8000aa2 <parse_symbol_if_available+0x3a>
			parse_symbol(key + '0');
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <parse_symbol_if_available+0x94>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	3330      	adds	r3, #48	; 0x30
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f860 	bl	8000b60 <parse_symbol>
		if (key > 0 && key < 8) {
 8000aa0:	e026      	b.n	8000af0 <parse_symbol_if_available+0x88>
		} else if (key == 8) {
 8000aa2:	4b16      	ldr	r3, [pc, #88]	; (8000afc <parse_symbol_if_available+0x94>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b08      	cmp	r3, #8
 8000aa8:	d103      	bne.n	8000ab2 <parse_symbol_if_available+0x4a>
			parse_symbol('-');
 8000aaa:	202d      	movs	r0, #45	; 0x2d
 8000aac:	f000 f858 	bl	8000b60 <parse_symbol>
 8000ab0:	e01e      	b.n	8000af0 <parse_symbol_if_available+0x88>
		} else if (key == 9) {
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <parse_symbol_if_available+0x94>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b09      	cmp	r3, #9
 8000ab8:	d103      	bne.n	8000ac2 <parse_symbol_if_available+0x5a>
			parse_symbol('+');
 8000aba:	202b      	movs	r0, #43	; 0x2b
 8000abc:	f000 f850 	bl	8000b60 <parse_symbol>
 8000ac0:	e016      	b.n	8000af0 <parse_symbol_if_available+0x88>
		} else if (key == 0x0A) {
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <parse_symbol_if_available+0x94>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b0a      	cmp	r3, #10
 8000ac8:	d103      	bne.n	8000ad2 <parse_symbol_if_available+0x6a>
			parse_symbol('a');
 8000aca:	2061      	movs	r0, #97	; 0x61
 8000acc:	f000 f848 	bl	8000b60 <parse_symbol>
 8000ad0:	e00e      	b.n	8000af0 <parse_symbol_if_available+0x88>
		} else if (key == 0x0B) {
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <parse_symbol_if_available+0x94>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b0b      	cmp	r3, #11
 8000ad8:	d103      	bne.n	8000ae2 <parse_symbol_if_available+0x7a>
			parse_symbol('\r');
 8000ada:	200d      	movs	r0, #13
 8000adc:	f000 f840 	bl	8000b60 <parse_symbol>
 8000ae0:	e006      	b.n	8000af0 <parse_symbol_if_available+0x88>
		} else if (key == 0x0C) {
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <parse_symbol_if_available+0x94>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b0c      	cmp	r3, #12
 8000ae8:	d102      	bne.n	8000af0 <parse_symbol_if_available+0x88>
			parse_symbol('A');
 8000aea:	2041      	movs	r0, #65	; 0x41
 8000aec:	f000 f838 	bl	8000b60 <parse_symbol>
		}
		old_key = key;
 8000af0:	4b02      	ldr	r3, [pc, #8]	; (8000afc <parse_symbol_if_available+0x94>)
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <parse_symbol_if_available+0x98>)
 8000af6:	701a      	strb	r2, [r3, #0]
	}

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000214 	.word	0x20000214
 8000b00:	20000215 	.word	0x20000215

08000b04 <parse_symbol_as_test>:
void parse_symbol_as_test() {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b09a      	sub	sp, #104	; 0x68
 8000b08:	af00      	add	r7, sp, #0
	key = readKB();
 8000b0a:	f7ff ff77 	bl	80009fc <readKB>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <parse_symbol_as_test+0x50>)
 8000b14:	701a      	strb	r2, [r3, #0]
	if (key != old_key) {
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <parse_symbol_as_test+0x50>)
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <parse_symbol_as_test+0x54>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d013      	beq.n	8000b4a <parse_symbol_as_test+0x46>
		old_key = key;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <parse_symbol_as_test+0x50>)
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <parse_symbol_as_test+0x54>)
 8000b28:	701a      	strb	r2, [r3, #0]
		if (key != 0xD) {
 8000b2a:	4b0a      	ldr	r3, [pc, #40]	; (8000b54 <parse_symbol_as_test+0x50>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b0d      	cmp	r3, #13
 8000b30:	d00b      	beq.n	8000b4a <parse_symbol_as_test+0x46>
			char answer[100];
			sprintf(answer, "You press key: %d", key);
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <parse_symbol_as_test+0x50>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <parse_symbol_as_test+0x58>)
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 feb9 	bl	80058b4 <siprintf>
			append_to_sending_buffer_by_uart(answer);
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 faad 	bl	80010a4 <append_to_sending_buffer_by_uart>
		}
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	3768      	adds	r7, #104	; 0x68
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000214 	.word	0x20000214
 8000b58:	20000215 	.word	0x20000215
 8000b5c:	08005ff8 	.word	0x08005ff8

08000b60 <parse_symbol>:


//public functions start
void parse_symbol(char symbol) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b09c      	sub	sp, #112	; 0x70
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
	char answer[100];
	if (symbol >= '1' && symbol <= '7') {
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	2b30      	cmp	r3, #48	; 0x30
 8000b6e:	d909      	bls.n	8000b84 <parse_symbol+0x24>
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b37      	cmp	r3, #55	; 0x37
 8000b74:	d806      	bhi.n	8000b84 <parse_symbol+0x24>
		uint32_t note_index = symbol - '1';
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	3b31      	subs	r3, #49	; 0x31
 8000b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
		play(note_index);
 8000b7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000b7e:	f000 f94b 	bl	8000e18 <play>
	if (symbol >= '1' && symbol <= '7') {
 8000b82:	e064      	b.n	8000c4e <parse_symbol+0xee>
	} else {
		switch (symbol) {
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b61      	cmp	r3, #97	; 0x61
 8000b88:	d02f      	beq.n	8000bea <parse_symbol+0x8a>
 8000b8a:	2b61      	cmp	r3, #97	; 0x61
 8000b8c:	dc52      	bgt.n	8000c34 <parse_symbol+0xd4>
 8000b8e:	2b41      	cmp	r3, #65	; 0x41
 8000b90:	d03c      	beq.n	8000c0c <parse_symbol+0xac>
 8000b92:	2b41      	cmp	r3, #65	; 0x41
 8000b94:	dc4e      	bgt.n	8000c34 <parse_symbol+0xd4>
 8000b96:	2b2d      	cmp	r3, #45	; 0x2d
 8000b98:	d016      	beq.n	8000bc8 <parse_symbol+0x68>
 8000b9a:	2b2d      	cmp	r3, #45	; 0x2d
 8000b9c:	dc4a      	bgt.n	8000c34 <parse_symbol+0xd4>
 8000b9e:	2b0d      	cmp	r3, #13
 8000ba0:	d045      	beq.n	8000c2e <parse_symbol+0xce>
 8000ba2:	2b2b      	cmp	r3, #43	; 0x2b
 8000ba4:	d146      	bne.n	8000c34 <parse_symbol+0xd4>
		case '+':
			octave_increase_if_available();
 8000ba6:	f000 f9b7 	bl	8000f18 <octave_increase_if_available>
			sprintf(answer, "New octave_index is: %d",
 8000baa:	f000 f90d 	bl	8000dc8 <get_current_octave_number>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4928      	ldr	r1, [pc, #160]	; (8000c58 <parse_symbol+0xf8>)
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 fe7c 	bl	80058b4 <siprintf>
					get_current_octave_number());
			append_to_sending_buffer_by_uart(answer);
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fa6f 	bl	80010a4 <append_to_sending_buffer_by_uart>
			break;
 8000bc6:	e042      	b.n	8000c4e <parse_symbol+0xee>
		case '-':
			octave_decrease_if_available();
 8000bc8:	f000 f994 	bl	8000ef4 <octave_decrease_if_available>
			sprintf(answer, "New octave_index is: %d",
 8000bcc:	f000 f8fc 	bl	8000dc8 <get_current_octave_number>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4920      	ldr	r1, [pc, #128]	; (8000c58 <parse_symbol+0xf8>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fe6b 	bl	80058b4 <siprintf>
					get_current_octave_number());
			append_to_sending_buffer_by_uart(answer);
 8000bde:	f107 0308 	add.w	r3, r7, #8
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fa5e 	bl	80010a4 <append_to_sending_buffer_by_uart>
			break;
 8000be8:	e031      	b.n	8000c4e <parse_symbol+0xee>
		case 'a':
			duration_decrease_if_available();
 8000bea:	f000 f9a7 	bl	8000f3c <duration_decrease_if_available>
			sprintf(answer, "New duration is: %d ms", get_current_duration());
 8000bee:	f000 f8f7 	bl	8000de0 <get_current_duration>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4918      	ldr	r1, [pc, #96]	; (8000c5c <parse_symbol+0xfc>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 fe5a 	bl	80058b4 <siprintf>
			append_to_sending_buffer_by_uart(answer);
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 fa4d 	bl	80010a4 <append_to_sending_buffer_by_uart>
			break;
 8000c0a:	e020      	b.n	8000c4e <parse_symbol+0xee>
		case 'A':
			duration_increase_if_available();
 8000c0c:	f000 f9ae 	bl	8000f6c <duration_increase_if_available>
			sprintf(answer, "New duration is: %d ms", get_current_duration());
 8000c10:	f000 f8e6 	bl	8000de0 <get_current_duration>
 8000c14:	4602      	mov	r2, r0
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4910      	ldr	r1, [pc, #64]	; (8000c5c <parse_symbol+0xfc>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f004 fe49 	bl	80058b4 <siprintf>
			append_to_sending_buffer_by_uart(answer);
 8000c22:	f107 0308 	add.w	r3, r7, #8
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fa3c 	bl	80010a4 <append_to_sending_buffer_by_uart>
			break;
 8000c2c:	e00f      	b.n	8000c4e <parse_symbol+0xee>
		case '\r':
			start_all_playing();
 8000c2e:	f000 f943 	bl	8000eb8 <start_all_playing>
			break;
 8000c32:	e00c      	b.n	8000c4e <parse_symbol+0xee>
		default:
			sprintf(answer, "Incorrect symbol %u", symbol);
 8000c34:	79fa      	ldrb	r2, [r7, #7]
 8000c36:	f107 0308 	add.w	r3, r7, #8
 8000c3a:	4909      	ldr	r1, [pc, #36]	; (8000c60 <parse_symbol+0x100>)
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f004 fe39 	bl	80058b4 <siprintf>
			append_to_sending_buffer_by_uart(answer);
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 fa2c 	bl	80010a4 <append_to_sending_buffer_by_uart>
			break;
 8000c4c:	bf00      	nop
		}
	}
}
 8000c4e:	bf00      	nop
 8000c50:	3770      	adds	r7, #112	; 0x70
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	0800600c 	.word	0x0800600c
 8000c5c:	08006024 	.word	0x08006024
 8000c60:	0800603c 	.word	0x0800603c

08000c64 <get_BTN>:
uint8_t get_BTN() {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8000c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <get_BTN+0x14>)
 8000c6e:	f001 f979 	bl	8001f64 <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40020800 	.word	0x40020800

08000c7c <check_mode_status>:

void check_mode_status() {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09a      	sub	sp, #104	; 0x68
 8000c80:	af00      	add	r7, sp, #0
	if (get_BTN() == 0) {
 8000c82:	f7ff ffef 	bl	8000c64 <get_BTN>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d11d      	bne.n	8000cc8 <check_mode_status+0x4c>
		mode = 1 - mode;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <check_mode_status+0x54>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f1c3 0301 	rsb	r3, r3, #1
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <check_mode_status+0x54>)
 8000c98:	701a      	strb	r2, [r3, #0]
		HAL_Delay(500);
 8000c9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c9e:	f000 fded 	bl	800187c <HAL_Delay>
		char answer[100];
		if (mode)
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <check_mode_status+0x54>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d005      	beq.n	8000cb6 <check_mode_status+0x3a>
			sprintf(answer, "Your new mode is PROD");
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	4909      	ldr	r1, [pc, #36]	; (8000cd4 <check_mode_status+0x58>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f004 fe00 	bl	80058b4 <siprintf>
 8000cb4:	e004      	b.n	8000cc0 <check_mode_status+0x44>
		else
			sprintf(answer, "Your new mode is TEST");
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4907      	ldr	r1, [pc, #28]	; (8000cd8 <check_mode_status+0x5c>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f004 fdfa 	bl	80058b4 <siprintf>
		append_to_sending_buffer_by_uart(answer);
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f9ee 	bl	80010a4 <append_to_sending_buffer_by_uart>
	}
}
 8000cc8:	bf00      	nop
 8000cca:	3768      	adds	r7, #104	; 0x68
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000004 	.word	0x20000004
 8000cd4:	08006050 	.word	0x08006050
 8000cd8:	08006068 	.word	0x08006068

08000cdc <restart_timer>:
uint32_t octave_index = 4;
uint32_t duration = 1000;
uint8_t is_all_playing = 0;
char *note_name[] = { "До", "Ре", "Ми", "Фа", "Соль", "Ля", "Си" };

void restart_timer() {
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
	TIM6->CNT = 0;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <restart_timer+0x14>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	40001000 	.word	0x40001000

08000cf4 <mute>:

void mute() {
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	; (8000d08 <mute+0x14>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	40010000 	.word	0x40010000

08000d0c <unmute>:

void unmute() {
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
	TIM1->CCR1 = TIM1->ARR / 2;
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <unmute+0x18>)
 8000d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d14:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <unmute+0x18>)
 8000d16:	085b      	lsrs	r3, r3, #1
 8000d18:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40010000 	.word	0x40010000

08000d28 <set_frequency>:

void set_frequency(uint32_t freq_millis) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	TIM1->PSC = (1125000) / ((freq_millis / 1000) * (TIM1->ARR + 1)) -1;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <set_frequency+0x34>)
 8000d34:	fba2 2303 	umull	r2, r3, r2, r3
 8000d38:	099b      	lsrs	r3, r3, #6
 8000d3a:	4a09      	ldr	r2, [pc, #36]	; (8000d60 <set_frequency+0x38>)
 8000d3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000d3e:	3201      	adds	r2, #1
 8000d40:	fb02 f303 	mul.w	r3, r2, r3
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <set_frequency+0x3c>)
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <set_frequency+0x38>)
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	10624dd3 	.word	0x10624dd3
 8000d60:	40010000 	.word	0x40010000
 8000d64:	00112a88 	.word	0x00112a88

08000d68 <get_frequency_by_index>:

uint32_t get_frequency_by_index(uint32_t index) {
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	return freqs[index + (octave_index * OCTAVE_SIZE)];
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <get_frequency_by_index+0x28>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2207      	movs	r2, #7
 8000d76:	fb03 f202 	mul.w	r2, r3, r2
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <get_frequency_by_index+0x2c>)
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	20000104 	.word	0x20000104
 8000d94:	20000008 	.word	0x20000008

08000d98 <set_default_value_for_sound>:

//public functions start

void set_default_value_for_sound() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <set_default_value_for_sound+0x20>)
 8000da0:	f002 fe9a 	bl	8003ad8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <set_default_value_for_sound+0x24>)
 8000da6:	f002 fdd7 	bl	8003958 <HAL_TIM_Base_Start_IT>
	TIM6->ARR = duration;
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <set_default_value_for_sound+0x28>)
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <set_default_value_for_sound+0x2c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	200002ec 	.word	0x200002ec
 8000dbc:	20000334 	.word	0x20000334
 8000dc0:	40001000 	.word	0x40001000
 8000dc4:	20000108 	.word	0x20000108

08000dc8 <get_current_octave_number>:

uint32_t get_current_octave_number() {
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	return octave_index + 1;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <get_current_octave_number+0x14>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	3301      	adds	r3, #1
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	20000104 	.word	0x20000104

08000de0 <get_current_duration>:
uint32_t get_current_duration() {
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	return duration;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <get_current_duration+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000108 	.word	0x20000108

08000df8 <get_note_name>:
char* get_note_name(uint32_t index) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	return note_name[index];
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <get_note_name+0x1c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	2000010c 	.word	0x2000010c

08000e18 <play>:

void play(uint32_t note_index) {
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b09d      	sub	sp, #116	; 0x74
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	int freq = get_frequency_by_index(note_index);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f7ff ffa1 	bl	8000d68 <get_frequency_by_index>
 8000e26:	4603      	mov	r3, r0
 8000e28:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (freq > 0) {
 8000e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	dd1a      	ble.n	8000e66 <play+0x4e>
		set_frequency(freq);
 8000e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff78 	bl	8000d28 <set_frequency>
		restart_timer();
 8000e38:	f7ff ff50 	bl	8000cdc <restart_timer>
		unmute();
 8000e3c:	f7ff ff66 	bl	8000d0c <unmute>
		char answer[100];
		sprintf(answer, "Note: %s, octave: %d", get_note_name(note_index),
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ffd9 	bl	8000df8 <get_note_name>
 8000e46:	4604      	mov	r4, r0
 8000e48:	f7ff ffbe 	bl	8000dc8 <get_current_octave_number>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f107 0008 	add.w	r0, r7, #8
 8000e52:	4622      	mov	r2, r4
 8000e54:	4913      	ldr	r1, [pc, #76]	; (8000ea4 <play+0x8c>)
 8000e56:	f004 fd2d 	bl	80058b4 <siprintf>
				get_current_octave_number());
		append_to_sending_buffer_by_uart(answer);
 8000e5a:	f107 0308 	add.w	r3, r7, #8
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f920 	bl	80010a4 <append_to_sending_buffer_by_uart>
					note_name[note_index], octave_index + 1);
			append_to_sending_buffer_by_uart(answer);
		}
	}

}
 8000e64:	e01a      	b.n	8000e9c <play+0x84>
		if (is_all_playing) {
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <play+0x90>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d005      	beq.n	8000e7a <play+0x62>
			mute();
 8000e6e:	f7ff ff41 	bl	8000cf4 <mute>
			is_all_playing = 0;
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <play+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]
}
 8000e78:	e010      	b.n	8000e9c <play+0x84>
			sprintf(answer, "There is no note: %s in octave: %d!",
 8000e7a:	4a0c      	ldr	r2, [pc, #48]	; (8000eac <play+0x94>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <play+0x98>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	f107 0008 	add.w	r0, r7, #8
 8000e8c:	4909      	ldr	r1, [pc, #36]	; (8000eb4 <play+0x9c>)
 8000e8e:	f004 fd11 	bl	80058b4 <siprintf>
			append_to_sending_buffer_by_uart(answer);
 8000e92:	f107 0308 	add.w	r3, r7, #8
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f904 	bl	80010a4 <append_to_sending_buffer_by_uart>
}
 8000e9c:	bf00      	nop
 8000e9e:	3774      	adds	r7, #116	; 0x74
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd90      	pop	{r4, r7, pc}
 8000ea4:	080060bc 	.word	0x080060bc
 8000ea8:	2000021c 	.word	0x2000021c
 8000eac:	2000010c 	.word	0x2000010c
 8000eb0:	20000104 	.word	0x20000104
 8000eb4:	080060d4 	.word	0x080060d4

08000eb8 <start_all_playing>:

void start_all_playing() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	is_all_playing = 1;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <start_all_playing+0x30>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
	if (octave_index > 0)
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <start_all_playing+0x34>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <start_all_playing+0x1a>
		note_index = 0;
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <start_all_playing+0x38>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e002      	b.n	8000ed8 <start_all_playing+0x20>
	else
		note_index = 2;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <start_all_playing+0x38>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	601a      	str	r2, [r3, #0]
	play(note_index);
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <start_all_playing+0x38>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff9b 	bl	8000e18 <play>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000021c 	.word	0x2000021c
 8000eec:	20000104 	.word	0x20000104
 8000ef0:	20000218 	.word	0x20000218

08000ef4 <octave_decrease_if_available>:

void octave_decrease_if_available() {
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	if (octave_index > 0)
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <octave_decrease_if_available+0x20>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d004      	beq.n	8000f0a <octave_decrease_if_available+0x16>
		octave_index--;
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <octave_decrease_if_available+0x20>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <octave_decrease_if_available+0x20>)
 8000f08:	6013      	str	r3, [r2, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000104 	.word	0x20000104

08000f18 <octave_increase_if_available>:

void octave_increase_if_available() {
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	if (octave_index < 8)
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <octave_increase_if_available+0x20>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d804      	bhi.n	8000f2e <octave_increase_if_available+0x16>
		octave_index++;
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <octave_increase_if_available+0x20>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <octave_increase_if_available+0x20>)
 8000f2c:	6013      	str	r3, [r2, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	20000104 	.word	0x20000104

08000f3c <duration_decrease_if_available>:

void duration_decrease_if_available() {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	if (duration > 100) {
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <duration_decrease_if_available+0x28>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b64      	cmp	r3, #100	; 0x64
 8000f46:	d90a      	bls.n	8000f5e <duration_decrease_if_available+0x22>
		duration -= 100;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <duration_decrease_if_available+0x28>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3b64      	subs	r3, #100	; 0x64
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <duration_decrease_if_available+0x28>)
 8000f50:	6013      	str	r3, [r2, #0]
		TIM6->ARR = duration;
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <duration_decrease_if_available+0x2c>)
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <duration_decrease_if_available+0x28>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	62d3      	str	r3, [r2, #44]	; 0x2c
		restart_timer();
 8000f5a:	f7ff febf 	bl	8000cdc <restart_timer>
	}
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000108 	.word	0x20000108
 8000f68:	40001000 	.word	0x40001000

08000f6c <duration_increase_if_available>:

void duration_increase_if_available() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	if (duration < 5000) {
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <duration_increase_if_available+0x2c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d80a      	bhi.n	8000f92 <duration_increase_if_available+0x26>
		duration += 100;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <duration_increase_if_available+0x2c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3364      	adds	r3, #100	; 0x64
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <duration_increase_if_available+0x2c>)
 8000f84:	6013      	str	r3, [r2, #0]
		TIM6->ARR = duration;
 8000f86:	4a05      	ldr	r2, [pc, #20]	; (8000f9c <duration_increase_if_available+0x30>)
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <duration_increase_if_available+0x2c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	62d3      	str	r3, [r2, #44]	; 0x2c
		restart_timer();
 8000f8e:	f7ff fea5 	bl	8000cdc <restart_timer>
	}
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000108 	.word	0x20000108
 8000f9c:	40001000 	.word	0x40001000

08000fa0 <HAL_TIM_PeriodElapsedCallback>:
//public functions start

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d118      	bne.n	8000fe4 <HAL_TIM_PeriodElapsedCallback+0x44>
		mute();
 8000fb2:	f7ff fe9f 	bl	8000cf4 <mute>
		if (is_all_playing){
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d012      	beq.n	8000fe4 <HAL_TIM_PeriodElapsedCallback+0x44>
			note_index++;
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fc6:	6013      	str	r3, [r2, #0]
			if (note_index < OCTAVE_SIZE)
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2207      	movs	r2, #7
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d205      	bcs.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x3e>
				play(note_index);
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff1e 	bl	8000e18 <play>
			else
				is_all_playing = 0;
		}
	}
}
 8000fdc:	e002      	b.n	8000fe4 <HAL_TIM_PeriodElapsedCallback+0x44>
				is_all_playing = 0;
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40001000 	.word	0x40001000
 8000ff0:	2000021c 	.word	0x2000021c
 8000ff4:	20000218 	.word	0x20000218

08000ff8 <concat>:

#include "my_string.h"

//public functions start

char* concat(char *s1, char *s2) {
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	char *result = malloc(strlen(s1) + strlen(s2) + 1);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff f8f4 	bl	80001f0 <strlen>
 8001008:	4604      	mov	r4, r0
 800100a:	6838      	ldr	r0, [r7, #0]
 800100c:	f7ff f8f0 	bl	80001f0 <strlen>
 8001010:	4603      	mov	r3, r0
 8001012:	4423      	add	r3, r4
 8001014:	3301      	adds	r3, #1
 8001016:	4618      	mov	r0, r3
 8001018:	f004 fb4c 	bl	80056b4 <malloc>
 800101c:	4603      	mov	r3, r0
 800101e:	60fb      	str	r3, [r7, #12]
	strcpy(result, s1);
 8001020:	6879      	ldr	r1, [r7, #4]
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f004 fc75 	bl	8005912 <strcpy>
	strcat(result, s2);
 8001028:	6839      	ldr	r1, [r7, #0]
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f004 fc62 	bl	80058f4 <strcat>
	return result;
 8001030:	68fb      	ldr	r3, [r7, #12]
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
	...

0800103c <send_message_by_uart_if_available>:
		next(&cur_process_char, read_buffer);
	}
	return ans;
}

void send_message_by_uart_if_available() {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	if (!is_writing_now) {
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <send_message_by_uart_if_available+0x38>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f083 0301 	eor.w	r3, r3, #1
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00f      	beq.n	800106e <send_message_by_uart_if_available+0x32>
		if (transmit_from_pointer != write_to_pointer) {
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <send_message_by_uart_if_available+0x3c>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <send_message_by_uart_if_available+0x40>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	429a      	cmp	r2, r3
 8001058:	d009      	beq.n	800106e <send_message_by_uart_if_available+0x32>
			is_writing_now = true;
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <send_message_by_uart_if_available+0x38>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart6, (uint8_t*) transmit_from_pointer,
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <send_message_by_uart_if_available+0x3c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2201      	movs	r2, #1
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <send_message_by_uart_if_available+0x44>)
 800106a:	f003 fb94 	bl	8004796 <HAL_UART_Transmit_IT>
					sizeof(char));
		}
	}
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000021d 	.word	0x2000021d
 8001078:	2000012c 	.word	0x2000012c
 800107c:	20000130 	.word	0x20000130
 8001080:	2000037c 	.word	0x2000037c

08001084 <set_default_value_for_uart>:

void set_default_value_for_uart() {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, (uint8_t*) cur_read_char, sizeof(char));
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <set_default_value_for_uart+0x18>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	4619      	mov	r1, r3
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <set_default_value_for_uart+0x1c>)
 8001092:	f003 fbc5 	bl	8004820 <HAL_UART_Receive_IT>
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000128 	.word	0x20000128
 80010a0:	2000037c 	.word	0x2000037c

080010a4 <append_to_sending_buffer_by_uart>:

void append_to_sending_buffer_by_uart(char *str) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
//	char *str_with_newline = concat("\r\n", str);
	char *str_with_newline = concat(str, "\r\n");
 80010ac:	4910      	ldr	r1, [pc, #64]	; (80010f0 <append_to_sending_buffer_by_uart+0x4c>)
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa2 	bl	8000ff8 <concat>
 80010b4:	6138      	str	r0, [r7, #16]
	int size = sizeof(char) * strlen(str_with_newline);
 80010b6:	6938      	ldr	r0, [r7, #16]
 80010b8:	f7ff f89a 	bl	80001f0 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; str_with_newline[i] != '\0'; i++) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e009      	b.n	80010da <append_to_sending_buffer_by_uart+0x36>
		write_char_to_buff(str_with_newline[i]);
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	4413      	add	r3, r2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f850 	bl	8001174 <write_char_to_buff>
	for (size_t i = 0; str_with_newline[i] != '\0'; i++) {
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	4413      	add	r3, r2
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1ef      	bne.n	80010c6 <append_to_sending_buffer_by_uart+0x22>
	}
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	080060f8 	.word	0x080060f8

080010f4 <HAL_UART_RxCpltCallback>:

//Callback of interrupt by uart

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart6.Instance) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_UART_RxCpltCallback+0x34>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d10a      	bne.n	800111e <HAL_UART_RxCpltCallback+0x2a>
		next(&cur_read_char, read_buffer);
 8001108:	4908      	ldr	r1, [pc, #32]	; (800112c <HAL_UART_RxCpltCallback+0x38>)
 800110a:	4809      	ldr	r0, [pc, #36]	; (8001130 <HAL_UART_RxCpltCallback+0x3c>)
 800110c:	f000 f848 	bl	80011a0 <next>
		HAL_UART_Receive_IT(&huart6, (uint8_t*) cur_read_char, sizeof(char));
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <HAL_UART_RxCpltCallback+0x3c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2201      	movs	r2, #1
 8001116:	4619      	mov	r1, r3
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <HAL_UART_RxCpltCallback+0x34>)
 800111a:	f003 fb81 	bl	8004820 <HAL_UART_Receive_IT>
	}
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000037c 	.word	0x2000037c
 800112c:	20000220 	.word	0x20000220
 8001130:	20000128 	.word	0x20000128

08001134 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart6.Instance) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <HAL_UART_TxCpltCallback+0x30>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d108      	bne.n	800115a <HAL_UART_TxCpltCallback+0x26>
		is_writing_now = false;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <HAL_UART_TxCpltCallback+0x34>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
		next(&transmit_from_pointer, write_buffer);
 800114e:	4907      	ldr	r1, [pc, #28]	; (800116c <HAL_UART_TxCpltCallback+0x38>)
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <HAL_UART_TxCpltCallback+0x3c>)
 8001152:	f000 f825 	bl	80011a0 <next>
		send_message_by_uart_if_available();
 8001156:	f7ff ff71 	bl	800103c <send_message_by_uart_if_available>
	}
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	2000037c 	.word	0x2000037c
 8001168:	2000021d 	.word	0x2000021d
 800116c:	20000284 	.word	0x20000284
 8001170:	2000012c 	.word	0x2000012c

08001174 <write_char_to_buff>:
//public functions end

void write_char_to_buff(char c) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	*write_to_pointer = c;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <write_char_to_buff+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	701a      	strb	r2, [r3, #0]
	next(&write_to_pointer, write_buffer);
 8001186:	4905      	ldr	r1, [pc, #20]	; (800119c <write_char_to_buff+0x28>)
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <write_char_to_buff+0x24>)
 800118a:	f000 f809 	bl	80011a0 <next>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000130 	.word	0x20000130
 800119c:	20000284 	.word	0x20000284

080011a0 <next>:

void next(char **pointer, char *buffer) {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	if (*pointer >= buffer + 100)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3364      	adds	r3, #100	; 0x64
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d303      	bcc.n	80011be <next+0x1e>
		*pointer = buffer;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	601a      	str	r2, [r3, #0]
	else
		(*pointer)++;
}
 80011bc:	e004      	b.n	80011c8 <next+0x28>
		(*pointer)++;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	601a      	str	r2, [r3, #0]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <PCA9538_Read_Register>:
#include "main.h"
#include "i2c.h"
#include "my_uart.h"
#include "pca9538.h"

HAL_StatusTypeDef PCA9538_Read_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af04      	add	r7, sp, #16
 80011da:	4603      	mov	r3, r0
 80011dc:	603a      	str	r2, [r7, #0]
 80011de:	80fb      	strh	r3, [r7, #6]
 80011e0:	460b      	mov	r3, r1
 80011e2:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Read(&hi2c1, addr | 1, reg, 1, buf, 1, 100);
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	b299      	uxth	r1, r3
 80011ec:	797b      	ldrb	r3, [r7, #5]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	2364      	movs	r3, #100	; 0x64
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	4804      	ldr	r0, [pc, #16]	; (8001210 <PCA9538_Read_Register+0x3c>)
 8001200:	f001 f906 	bl	8002410 <HAL_I2C_Mem_Read>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200001c0 	.word	0x200001c0

08001214 <PCA9538_Write_Register>:


HAL_StatusTypeDef PCA9538_Write_Register(uint16_t addr, pca9538_regs_t reg, uint8_t* buf) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af04      	add	r7, sp, #16
 800121a:	4603      	mov	r3, r0
 800121c:	603a      	str	r2, [r7, #0]
 800121e:	80fb      	strh	r3, [r7, #6]
 8001220:	460b      	mov	r3, r1
 8001222:	717b      	strb	r3, [r7, #5]
	return HAL_I2C_Mem_Write(&hi2c1, addr & 0xFFFE, reg, 1, buf, 1, 100);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	b299      	uxth	r1, r3
 800122c:	797b      	ldrb	r3, [r7, #5]
 800122e:	b29a      	uxth	r2, r3
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	2301      	movs	r3, #1
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <PCA9538_Write_Register+0x3c>)
 8001240:	f000 ffec 	bl	800221c <HAL_I2C_Mem_Write>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200001c0 	.word	0x200001c0

08001254 <PCA9538_Read_Inputs>:
	}

	return ret;
}

HAL_StatusTypeDef PCA9538_Read_Inputs(uint16_t addr, uint8_t* buf) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	80fb      	strh	r3, [r7, #6]
	return PCA9538_Read_Register(addr, INPUT_PORT, buf);
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffb4 	bl	80011d4 <PCA9538_Read_Register>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_MspInit+0x4c>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <NMI_Handler+0x4>

080012ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <HardFault_Handler+0x4>

080012d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <MemManage_Handler+0x4>

080012da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <BusFault_Handler+0x4>

080012e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <UsageFault_Handler+0x4>

080012e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001314:	f000 fa92 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001320:	4802      	ldr	r0, [pc, #8]	; (800132c <TIM6_DAC_IRQHandler+0x10>)
 8001322:	f002 fca1 	bl	8003c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000334 	.word	0x20000334

08001330 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <USART6_IRQHandler+0x10>)
 8001336:	f003 faa3 	bl	8004880 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000037c 	.word	0x2000037c

08001344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800134c:	4a14      	ldr	r2, [pc, #80]	; (80013a0 <_sbrk+0x5c>)
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <_sbrk+0x60>)
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <_sbrk+0x64>)
 8001362:	4a12      	ldr	r2, [pc, #72]	; (80013ac <_sbrk+0x68>)
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	429a      	cmp	r2, r3
 8001372:	d207      	bcs.n	8001384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001374:	f004 f974 	bl	8005660 <__errno>
 8001378:	4603      	mov	r3, r0
 800137a:	220c      	movs	r2, #12
 800137c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e009      	b.n	8001398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <_sbrk+0x64>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <_sbrk+0x64>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4413      	add	r3, r2
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <_sbrk+0x64>)
 8001394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20030000 	.word	0x20030000
 80013a4:	00000400 	.word	0x00000400
 80013a8:	200002e8 	.word	0x200002e8
 80013ac:	200003d8 	.word	0x200003d8

080013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <SystemInit+0x20>)
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <SystemInit+0x20>)
 80013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b092      	sub	sp, #72	; 0x48
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
 80013f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2220      	movs	r2, #32
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 f960 	bl	80056c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <MX_TIM1_Init+0x100>)
 8001406:	4a34      	ldr	r2, [pc, #208]	; (80014d8 <MX_TIM1_Init+0x104>)
 8001408:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 62500;
 800140a:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <MX_TIM1_Init+0x100>)
 800140c:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001410:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001412:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <MX_TIM1_Init+0x100>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3;
 8001418:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <MX_TIM1_Init+0x100>)
 800141a:	2203      	movs	r2, #3
 800141c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <MX_TIM1_Init+0x100>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001424:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_TIM1_Init+0x100>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142a:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <MX_TIM1_Init+0x100>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001430:	4828      	ldr	r0, [pc, #160]	; (80014d4 <MX_TIM1_Init+0x100>)
 8001432:	f002 fb01 	bl	8003a38 <HAL_TIM_PWM_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800143c:	f7ff fad8 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001448:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800144c:	4619      	mov	r1, r3
 800144e:	4821      	ldr	r0, [pc, #132]	; (80014d4 <MX_TIM1_Init+0x100>)
 8001450:	f003 f872 	bl	8004538 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800145a:	f7ff fac9 	bl	80009f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145e:	2360      	movs	r3, #96	; 0x60
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 8001462:	2301      	movs	r3, #1
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800146a:	2300      	movs	r3, #0
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	2200      	movs	r2, #0
 8001480:	4619      	mov	r1, r3
 8001482:	4814      	ldr	r0, [pc, #80]	; (80014d4 <MX_TIM1_Init+0x100>)
 8001484:	f002 fcf8 	bl	8003e78 <HAL_TIM_PWM_ConfigChannel>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800148e:	f7ff faaf 	bl	80009f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <MX_TIM1_Init+0x100>)
 80014b6:	f003 f8bb 	bl	8004630 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80014c0:	f7ff fa96 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <MX_TIM1_Init+0x100>)
 80014c6:	f000 f889 	bl	80015dc <HAL_TIM_MspPostInit>

}
 80014ca:	bf00      	nop
 80014cc:	3748      	adds	r7, #72	; 0x48
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200002ec 	.word	0x200002ec
 80014d8:	40010000 	.word	0x40010000

080014dc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e2:	463b      	mov	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_TIM6_Init+0x64>)
 80014ec:	4a15      	ldr	r2, [pc, #84]	; (8001544 <MX_TIM6_Init+0x68>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9000;
 80014f0:	4b13      	ldr	r3, [pc, #76]	; (8001540 <MX_TIM6_Init+0x64>)
 80014f2:	f242 3228 	movw	r2, #9000	; 0x2328
 80014f6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_TIM6_Init+0x64>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_TIM6_Init+0x64>)
 8001500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001504:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_TIM6_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <MX_TIM6_Init+0x64>)
 800150e:	f002 f9d3 	bl	80038b8 <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001518:	f7ff fa6a 	bl	80009f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_TIM6_Init+0x64>)
 800152a:	f003 f805 	bl	8004538 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001534:	f7ff fa5c 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000334 	.word	0x20000334
 8001544:	40001000 	.word	0x40001000

08001548 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <HAL_TIM_PWM_MspInit+0x3c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10d      	bne.n	8001576 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_TIM_PWM_MspInit+0x40>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a09      	ldr	r2, [pc, #36]	; (8001588 <HAL_TIM_PWM_MspInit+0x40>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <HAL_TIM_PWM_MspInit+0x40>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40010000 	.word	0x40010000
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <HAL_TIM_Base_MspInit+0x48>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d115      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015a8:	f043 0310 	orr.w	r3, r3, #16
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_TIM_Base_MspInit+0x4c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 0310 	and.w	r3, r3, #16
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2036      	movs	r0, #54	; 0x36
 80015c0:	f000 fa5b 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c4:	2036      	movs	r0, #54	; 0x36
 80015c6:	f000 fa74 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40001000 	.word	0x40001000
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <HAL_TIM_MspPostInit+0x68>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d11e      	bne.n	800163c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_TIM_MspPostInit+0x6c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_TIM_MspPostInit+0x6c>)
 8001608:	f043 0310 	orr.w	r3, r3, #16
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_TIM_MspPostInit+0x6c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800161a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800161e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800162c:	2301      	movs	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	4619      	mov	r1, r3
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <HAL_TIM_MspPostInit+0x70>)
 8001638:	f000 fae8 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40010000 	.word	0x40010000
 8001648:	40023800 	.word	0x40023800
 800164c:	40021000 	.word	0x40021000

08001650 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <MX_USART6_UART_Init+0x4c>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <MX_USART6_UART_Init+0x50>)
 8001658:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 3096;
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_USART6_UART_Init+0x4c>)
 800165c:	f640 4218 	movw	r2, #3096	; 0xc18
 8001660:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b0e      	ldr	r3, [pc, #56]	; (800169c <MX_USART6_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_USART6_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <MX_USART6_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_USART6_UART_Init+0x4c>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <MX_USART6_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_USART6_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_USART6_UART_Init+0x4c>)
 8001688:	f003 f838 	bl	80046fc <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001692:	f7ff f9ad 	bl	80009f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	2000037c 	.word	0x2000037c
 80016a0:	40011400 	.word	0x40011400

080016a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <HAL_UART_MspInit+0x94>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d133      	bne.n	800172e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_UART_MspInit+0x98>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_UART_MspInit+0x98>)
 80016d0:	f043 0320 	orr.w	r3, r3, #32
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_UART_MspInit+0x98>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f003 0320 	and.w	r3, r3, #32
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_UART_MspInit+0x98>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a14      	ldr	r2, [pc, #80]	; (800173c <HAL_UART_MspInit+0x98>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_UART_MspInit+0x98>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016fe:	23c0      	movs	r3, #192	; 0xc0
 8001700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800170e:	2308      	movs	r3, #8
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	4809      	ldr	r0, [pc, #36]	; (8001740 <HAL_UART_MspInit+0x9c>)
 800171a:	f000 fa77 	bl	8001c0c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2047      	movs	r0, #71	; 0x47
 8001724:	f000 f9a9 	bl	8001a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001728:	2047      	movs	r0, #71	; 0x47
 800172a:	f000 f9c2 	bl	8001ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40011400 	.word	0x40011400
 800173c:	40023800 	.word	0x40023800
 8001740:	40020800 	.word	0x40020800

08001744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001760:	4c0b      	ldr	r4, [pc, #44]	; (8001790 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800176e:	f7ff fe1f 	bl	80013b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f003 ff7b 	bl	800566c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001776:	f7ff f8b5 	bl	80008e4 <main>
  bx  lr    
 800177a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800177c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8001788:	08006158 	.word	0x08006158
  ldr r2, =_sbss
 800178c:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8001790:	200003d4 	.word	0x200003d4

08001794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_Init+0x40>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_Init+0x40>)
 80017ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_Init+0x40>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 f94f 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c6:	200f      	movs	r0, #15
 80017c8:	f000 f808 	bl	80017dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017cc:	f7ff fd54 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x54>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x58>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f967 	bl	8001ace <HAL_SYSTICK_Config>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00e      	b.n	8001828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d80a      	bhi.n	8001826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f000 f92f 	bl	8001a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800181c:	4a06      	ldr	r2, [pc, #24]	; (8001838 <HAL_InitTick+0x5c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000134 	.word	0x20000134
 8001834:	2000013c 	.word	0x2000013c
 8001838:	20000138 	.word	0x20000138

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	2000013c 	.word	0x2000013c
 8001860:	200003c0 	.word	0x200003c0

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	200003c0 	.word	0x200003c0

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000013c 	.word	0x2000013c

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff8e 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff29 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff3e 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff8e 	bl	80019b8 <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5d 	bl	8001964 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff31 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ffa2 	bl	8001a20 <SysTick_Config>
 8001adc:	4603      	mov	r3, r0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff feb6 	bl	8001864 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d008      	beq.n	8001b18 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e052      	b.n	8001bbe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0216 	bic.w	r2, r2, #22
 8001b26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695a      	ldr	r2, [r3, #20]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d103      	bne.n	8001b48 <HAL_DMA_Abort+0x62>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0208 	bic.w	r2, r2, #8
 8001b56:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b68:	e013      	b.n	8001b92 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b6a:	f7ff fe7b 	bl	8001864 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d90c      	bls.n	8001b92 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2203      	movs	r2, #3
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e015      	b.n	8001bbe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e4      	bne.n	8001b6a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba4:	223f      	movs	r2, #63	; 0x3f
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d004      	beq.n	8001be4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e00c      	b.n	8001bfe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2205      	movs	r2, #5
 8001be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e177      	b.n	8001f18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f040 8166 	bne.w	8001f12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d005      	beq.n	8001c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d130      	bne.n	8001cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 0201 	and.w	r2, r3, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d017      	beq.n	8001cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d123      	bne.n	8001d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	69b9      	ldr	r1, [r7, #24]
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80c0 	beq.w	8001f12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a65      	ldr	r2, [pc, #404]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_GPIO_Init+0x324>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dae:	4a61      	ldr	r2, [pc, #388]	; (8001f34 <HAL_GPIO_Init+0x328>)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_GPIO_Init+0x32c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d037      	beq.n	8001e4a <HAL_GPIO_Init+0x23e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a57      	ldr	r2, [pc, #348]	; (8001f3c <HAL_GPIO_Init+0x330>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d031      	beq.n	8001e46 <HAL_GPIO_Init+0x23a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a56      	ldr	r2, [pc, #344]	; (8001f40 <HAL_GPIO_Init+0x334>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d02b      	beq.n	8001e42 <HAL_GPIO_Init+0x236>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a55      	ldr	r2, [pc, #340]	; (8001f44 <HAL_GPIO_Init+0x338>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d025      	beq.n	8001e3e <HAL_GPIO_Init+0x232>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a54      	ldr	r2, [pc, #336]	; (8001f48 <HAL_GPIO_Init+0x33c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01f      	beq.n	8001e3a <HAL_GPIO_Init+0x22e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a53      	ldr	r2, [pc, #332]	; (8001f4c <HAL_GPIO_Init+0x340>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x22a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a52      	ldr	r2, [pc, #328]	; (8001f50 <HAL_GPIO_Init+0x344>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x226>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a51      	ldr	r2, [pc, #324]	; (8001f54 <HAL_GPIO_Init+0x348>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x222>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a50      	ldr	r2, [pc, #320]	; (8001f58 <HAL_GPIO_Init+0x34c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x21e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4f      	ldr	r2, [pc, #316]	; (8001f5c <HAL_GPIO_Init+0x350>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x21a>
 8001e22:	2309      	movs	r3, #9
 8001e24:	e012      	b.n	8001e4c <HAL_GPIO_Init+0x240>
 8001e26:	230a      	movs	r3, #10
 8001e28:	e010      	b.n	8001e4c <HAL_GPIO_Init+0x240>
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	e00e      	b.n	8001e4c <HAL_GPIO_Init+0x240>
 8001e2e:	2307      	movs	r3, #7
 8001e30:	e00c      	b.n	8001e4c <HAL_GPIO_Init+0x240>
 8001e32:	2306      	movs	r3, #6
 8001e34:	e00a      	b.n	8001e4c <HAL_GPIO_Init+0x240>
 8001e36:	2305      	movs	r3, #5
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x240>
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x240>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x240>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x240>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x240>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5c:	4935      	ldr	r1, [pc, #212]	; (8001f34 <HAL_GPIO_Init+0x328>)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	; (8001f60 <HAL_GPIO_Init+0x354>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e8e:	4a34      	ldr	r2, [pc, #208]	; (8001f60 <HAL_GPIO_Init+0x354>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e94:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <HAL_GPIO_Init+0x354>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb8:	4a29      	ldr	r2, [pc, #164]	; (8001f60 <HAL_GPIO_Init+0x354>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ebe:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <HAL_GPIO_Init+0x354>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <HAL_GPIO_Init+0x354>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_GPIO_Init+0x354>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <HAL_GPIO_Init+0x354>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	f67f ae84 	bls.w	8001c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	bf00      	nop
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40013800 	.word	0x40013800
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40020400 	.word	0x40020400
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40020c00 	.word	0x40020c00
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40021400 	.word	0x40021400
 8001f50:	40021800 	.word	0x40021800
 8001f54:	40021c00 	.word	0x40021c00
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40022400 	.word	0x40022400
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	887b      	ldrh	r3, [r7, #2]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	e001      	b.n	8001f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e12b      	b.n	80021fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fb76 	bl	80006ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2224      	movs	r2, #36	; 0x24
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fe6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ff8:	f001 fc36 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8001ffc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4a81      	ldr	r2, [pc, #516]	; (8002208 <HAL_I2C_Init+0x274>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d807      	bhi.n	8002018 <HAL_I2C_Init+0x84>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4a80      	ldr	r2, [pc, #512]	; (800220c <HAL_I2C_Init+0x278>)
 800200c:	4293      	cmp	r3, r2
 800200e:	bf94      	ite	ls
 8002010:	2301      	movls	r3, #1
 8002012:	2300      	movhi	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e006      	b.n	8002026 <HAL_I2C_Init+0x92>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a7d      	ldr	r2, [pc, #500]	; (8002210 <HAL_I2C_Init+0x27c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	bf94      	ite	ls
 8002020:	2301      	movls	r3, #1
 8002022:	2300      	movhi	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0e7      	b.n	80021fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4a78      	ldr	r2, [pc, #480]	; (8002214 <HAL_I2C_Init+0x280>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0c9b      	lsrs	r3, r3, #18
 8002038:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a6a      	ldr	r2, [pc, #424]	; (8002208 <HAL_I2C_Init+0x274>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d802      	bhi.n	8002068 <HAL_I2C_Init+0xd4>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3301      	adds	r3, #1
 8002066:	e009      	b.n	800207c <HAL_I2C_Init+0xe8>
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	4a69      	ldr	r2, [pc, #420]	; (8002218 <HAL_I2C_Init+0x284>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	3301      	adds	r3, #1
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	430b      	orrs	r3, r1
 8002082:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800208e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	495c      	ldr	r1, [pc, #368]	; (8002208 <HAL_I2C_Init+0x274>)
 8002098:	428b      	cmp	r3, r1
 800209a:	d819      	bhi.n	80020d0 <HAL_I2C_Init+0x13c>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e59      	subs	r1, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020aa:	1c59      	adds	r1, r3, #1
 80020ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020b0:	400b      	ands	r3, r1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_I2C_Init+0x138>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1e59      	subs	r1, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c4:	3301      	adds	r3, #1
 80020c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ca:	e051      	b.n	8002170 <HAL_I2C_Init+0x1dc>
 80020cc:	2304      	movs	r3, #4
 80020ce:	e04f      	b.n	8002170 <HAL_I2C_Init+0x1dc>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d111      	bne.n	80020fc <HAL_I2C_Init+0x168>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	1e58      	subs	r0, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6859      	ldr	r1, [r3, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	440b      	add	r3, r1
 80020e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ea:	3301      	adds	r3, #1
 80020ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf0c      	ite	eq
 80020f4:	2301      	moveq	r3, #1
 80020f6:	2300      	movne	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	e012      	b.n	8002122 <HAL_I2C_Init+0x18e>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e58      	subs	r0, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	0099      	lsls	r1, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002112:	3301      	adds	r3, #1
 8002114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_Init+0x196>
 8002126:	2301      	movs	r3, #1
 8002128:	e022      	b.n	8002170 <HAL_I2C_Init+0x1dc>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10e      	bne.n	8002150 <HAL_I2C_Init+0x1bc>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1e58      	subs	r0, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	440b      	add	r3, r1
 8002140:	fbb0 f3f3 	udiv	r3, r0, r3
 8002144:	3301      	adds	r3, #1
 8002146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800214e:	e00f      	b.n	8002170 <HAL_I2C_Init+0x1dc>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e58      	subs	r0, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6859      	ldr	r1, [r3, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	0099      	lsls	r1, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	fbb0 f3f3 	udiv	r3, r0, r3
 8002166:	3301      	adds	r3, #1
 8002168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	6809      	ldr	r1, [r1, #0]
 8002174:	4313      	orrs	r3, r2
 8002176:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69da      	ldr	r2, [r3, #28]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800219e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6911      	ldr	r1, [r2, #16]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	68d2      	ldr	r2, [r2, #12]
 80021aa:	4311      	orrs	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	430b      	orrs	r3, r1
 80021b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695a      	ldr	r2, [r3, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2220      	movs	r2, #32
 80021ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	000186a0 	.word	0x000186a0
 800220c:	001e847f 	.word	0x001e847f
 8002210:	003d08ff 	.word	0x003d08ff
 8002214:	431bde83 	.word	0x431bde83
 8002218:	10624dd3 	.word	0x10624dd3

0800221c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af02      	add	r7, sp, #8
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	4603      	mov	r3, r0
 800222c:	817b      	strh	r3, [r7, #10]
 800222e:	460b      	mov	r3, r1
 8002230:	813b      	strh	r3, [r7, #8]
 8002232:	4613      	mov	r3, r2
 8002234:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002236:	f7ff fb15 	bl	8001864 <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	f040 80d9 	bne.w	80023fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2319      	movs	r3, #25
 8002250:	2201      	movs	r2, #1
 8002252:	496d      	ldr	r1, [pc, #436]	; (8002408 <HAL_I2C_Mem_Write+0x1ec>)
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fc7f 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002260:	2302      	movs	r3, #2
 8002262:	e0cc      	b.n	80023fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226a:	2b01      	cmp	r3, #1
 800226c:	d101      	bne.n	8002272 <HAL_I2C_Mem_Write+0x56>
 800226e:	2302      	movs	r3, #2
 8002270:	e0c5      	b.n	80023fe <HAL_I2C_Mem_Write+0x1e2>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	d007      	beq.n	8002298 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2221      	movs	r2, #33	; 0x21
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2240      	movs	r2, #64	; 0x40
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a3a      	ldr	r2, [r7, #32]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4a4d      	ldr	r2, [pc, #308]	; (800240c <HAL_I2C_Mem_Write+0x1f0>)
 80022d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022da:	88f8      	ldrh	r0, [r7, #6]
 80022dc:	893a      	ldrh	r2, [r7, #8]
 80022de:	8979      	ldrh	r1, [r7, #10]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	9301      	str	r3, [sp, #4]
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	4603      	mov	r3, r0
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fab6 	bl	800285c <I2C_RequestMemoryWrite>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d052      	beq.n	800239c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e081      	b.n	80023fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 fd00 	bl	8002d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00d      	beq.n	8002326 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	2b04      	cmp	r3, #4
 8002310:	d107      	bne.n	8002322 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002320:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e06b      	b.n	80023fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002340:	3b01      	subs	r3, #1
 8002342:	b29a      	uxth	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b04      	cmp	r3, #4
 8002362:	d11b      	bne.n	800239c <HAL_I2C_Mem_Write+0x180>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002368:	2b00      	cmp	r3, #0
 800236a:	d017      	beq.n	800239c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	781a      	ldrb	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1aa      	bne.n	80022fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fcec 	bl	8002d86 <I2C_WaitOnBTFFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00d      	beq.n	80023d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d107      	bne.n	80023cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e016      	b.n	80023fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	00100002 	.word	0x00100002
 800240c:	ffff0000 	.word	0xffff0000

08002410 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	; 0x30
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	4608      	mov	r0, r1
 800241a:	4611      	mov	r1, r2
 800241c:	461a      	mov	r2, r3
 800241e:	4603      	mov	r3, r0
 8002420:	817b      	strh	r3, [r7, #10]
 8002422:	460b      	mov	r3, r1
 8002424:	813b      	strh	r3, [r7, #8]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800242a:	f7ff fa1b 	bl	8001864 <HAL_GetTick>
 800242e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b20      	cmp	r3, #32
 800243a:	f040 8208 	bne.w	800284e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2319      	movs	r3, #25
 8002444:	2201      	movs	r2, #1
 8002446:	497b      	ldr	r1, [pc, #492]	; (8002634 <HAL_I2C_Mem_Read+0x224>)
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fb85 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002454:	2302      	movs	r3, #2
 8002456:	e1fb      	b.n	8002850 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_I2C_Mem_Read+0x56>
 8002462:	2302      	movs	r3, #2
 8002464:	e1f4      	b.n	8002850 <HAL_I2C_Mem_Read+0x440>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d007      	beq.n	800248c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800249a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2222      	movs	r2, #34	; 0x22
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2240      	movs	r2, #64	; 0x40
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80024bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a5b      	ldr	r2, [pc, #364]	; (8002638 <HAL_I2C_Mem_Read+0x228>)
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024ce:	88f8      	ldrh	r0, [r7, #6]
 80024d0:	893a      	ldrh	r2, [r7, #8]
 80024d2:	8979      	ldrh	r1, [r7, #10]
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	4603      	mov	r3, r0
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fa52 	bl	8002988 <I2C_RequestMemoryRead>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e1b0      	b.n	8002850 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d113      	bne.n	800251e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f6:	2300      	movs	r3, #0
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	623b      	str	r3, [r7, #32]
 800250a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e184      	b.n	8002828 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002522:	2b01      	cmp	r3, #1
 8002524:	d11b      	bne.n	800255e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002534:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e164      	b.n	8002828 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	2b02      	cmp	r3, #2
 8002564:	d11b      	bne.n	800259e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002574:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002584:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	e144      	b.n	8002828 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025b4:	e138      	b.n	8002828 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	2b03      	cmp	r3, #3
 80025bc:	f200 80f1 	bhi.w	80027a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d123      	bne.n	8002610 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fc1b 	bl	8002e08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e139      	b.n	8002850 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800260e:	e10b      	b.n	8002828 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002614:	2b02      	cmp	r3, #2
 8002616:	d14e      	bne.n	80026b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	2200      	movs	r2, #0
 8002620:	4906      	ldr	r1, [pc, #24]	; (800263c <HAL_I2C_Mem_Read+0x22c>)
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fa98 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d008      	beq.n	8002640 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e10e      	b.n	8002850 <HAL_I2C_Mem_Read+0x440>
 8002632:	bf00      	nop
 8002634:	00100002 	.word	0x00100002
 8002638:	ffff0000 	.word	0xffff0000
 800263c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	3b01      	subs	r3, #1
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026b4:	e0b8      	b.n	8002828 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	2200      	movs	r2, #0
 80026be:	4966      	ldr	r1, [pc, #408]	; (8002858 <HAL_I2C_Mem_Read+0x448>)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fa49 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0bf      	b.n	8002850 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	2200      	movs	r2, #0
 800271a:	494f      	ldr	r1, [pc, #316]	; (8002858 <HAL_I2C_Mem_Read+0x448>)
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f000 fa1b 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e091      	b.n	8002850 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002764:	b29b      	uxth	r3, r3
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027a0:	e042      	b.n	8002828 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fb2e 	bl	8002e08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e04c      	b.n	8002850 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d118      	bne.n	8002828 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	2b00      	cmp	r3, #0
 800282e:	f47f aec2 	bne.w	80025b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	00010004 	.word	0x00010004

0800285c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	4608      	mov	r0, r1
 8002866:	4611      	mov	r1, r2
 8002868:	461a      	mov	r2, r3
 800286a:	4603      	mov	r3, r0
 800286c:	817b      	strh	r3, [r7, #10]
 800286e:	460b      	mov	r3, r1
 8002870:	813b      	strh	r3, [r7, #8]
 8002872:	4613      	mov	r3, r2
 8002874:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002884:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	2200      	movs	r2, #0
 800288e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f960 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028ac:	d103      	bne.n	80028b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e05f      	b.n	800297a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ba:	897b      	ldrh	r3, [r7, #10]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	6a3a      	ldr	r2, [r7, #32]
 80028ce:	492d      	ldr	r1, [pc, #180]	; (8002984 <I2C_RequestMemoryWrite+0x128>)
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f998 	bl	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e04c      	b.n	800297a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fa02 	bl	8002d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00d      	beq.n	8002922 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	2b04      	cmp	r3, #4
 800290c:	d107      	bne.n	800291e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e02b      	b.n	800297a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002928:	893b      	ldrh	r3, [r7, #8]
 800292a:	b2da      	uxtb	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	611a      	str	r2, [r3, #16]
 8002932:	e021      	b.n	8002978 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002934:	893b      	ldrh	r3, [r7, #8]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	b29b      	uxth	r3, r3
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	6a39      	ldr	r1, [r7, #32]
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f9dc 	bl	8002d04 <I2C_WaitOnTXEFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00d      	beq.n	800296e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	2b04      	cmp	r3, #4
 8002958:	d107      	bne.n	800296a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002968:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e005      	b.n	800297a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800296e:	893b      	ldrh	r3, [r7, #8]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	00010002 	.word	0x00010002

08002988 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	4608      	mov	r0, r1
 8002992:	4611      	mov	r1, r2
 8002994:	461a      	mov	r2, r3
 8002996:	4603      	mov	r3, r0
 8002998:	817b      	strh	r3, [r7, #10]
 800299a:	460b      	mov	r3, r1
 800299c:	813b      	strh	r3, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f8c2 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00d      	beq.n	80029f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e8:	d103      	bne.n	80029f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e0aa      	b.n	8002b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	6a3a      	ldr	r2, [r7, #32]
 8002a0a:	4952      	ldr	r1, [pc, #328]	; (8002b54 <I2C_RequestMemoryRead+0x1cc>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f8fa 	bl	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e097      	b.n	8002b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a34:	6a39      	ldr	r1, [r7, #32]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f964 	bl	8002d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d107      	bne.n	8002a5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e076      	b.n	8002b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d105      	bne.n	8002a70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a64:	893b      	ldrh	r3, [r7, #8]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	611a      	str	r2, [r3, #16]
 8002a6e:	e021      	b.n	8002ab4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a70:	893b      	ldrh	r3, [r7, #8]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a80:	6a39      	ldr	r1, [r7, #32]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f93e 	bl	8002d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d107      	bne.n	8002aa6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e050      	b.n	8002b4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aaa:	893b      	ldrh	r3, [r7, #8]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab6:	6a39      	ldr	r1, [r7, #32]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f923 	bl	8002d04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00d      	beq.n	8002ae0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d107      	bne.n	8002adc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ada:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e035      	b.n	8002b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f82b 	bl	8002b58 <I2C_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b16:	d103      	bne.n	8002b20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e013      	b.n	8002b4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b24:	897b      	ldrh	r3, [r7, #10]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	6a3a      	ldr	r2, [r7, #32]
 8002b38:	4906      	ldr	r1, [pc, #24]	; (8002b54 <I2C_RequestMemoryRead+0x1cc>)
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 f863 	bl	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e000      	b.n	8002b4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	00010002 	.word	0x00010002

08002b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	603b      	str	r3, [r7, #0]
 8002b64:	4613      	mov	r3, r2
 8002b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b68:	e025      	b.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d021      	beq.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b72:	f7fe fe77 	bl	8001864 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d302      	bcc.n	8002b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d116      	bne.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f043 0220 	orr.w	r2, r3, #32
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e023      	b.n	8002bfe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	0c1b      	lsrs	r3, r3, #16
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d10d      	bne.n	8002bdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf0c      	ite	eq
 8002bd2:	2301      	moveq	r3, #1
 8002bd4:	2300      	movne	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	461a      	mov	r2, r3
 8002bda:	e00c      	b.n	8002bf6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4013      	ands	r3, r2
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	bf0c      	ite	eq
 8002bee:	2301      	moveq	r3, #1
 8002bf0:	2300      	movne	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d0b6      	beq.n	8002b6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
 8002c12:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c14:	e051      	b.n	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c24:	d123      	bne.n	8002c6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c34:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c3e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f043 0204 	orr.w	r2, r3, #4
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e046      	b.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c74:	d021      	beq.n	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c76:	f7fe fdf5 	bl	8001864 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d302      	bcc.n	8002c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d116      	bne.n	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f043 0220 	orr.w	r2, r3, #32
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e020      	b.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	0c1b      	lsrs	r3, r3, #16
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d10c      	bne.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf14      	ite	ne
 8002cd6:	2301      	movne	r3, #1
 8002cd8:	2300      	moveq	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	e00b      	b.n	8002cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d18d      	bne.n	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d10:	e02d      	b.n	8002d6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f8ce 	bl	8002eb4 <I2C_IsAcknowledgeFailed>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e02d      	b.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d021      	beq.n	8002d6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2a:	f7fe fd9b 	bl	8001864 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d302      	bcc.n	8002d40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d116      	bne.n	8002d6e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e007      	b.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d78:	2b80      	cmp	r3, #128	; 0x80
 8002d7a:	d1ca      	bne.n	8002d12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b084      	sub	sp, #16
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d92:	e02d      	b.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 f88d 	bl	8002eb4 <I2C_IsAcknowledgeFailed>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e02d      	b.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002daa:	d021      	beq.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dac:	f7fe fd5a 	bl	8001864 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d302      	bcc.n	8002dc2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d116      	bne.n	8002df0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e007      	b.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d1ca      	bne.n	8002d94 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e14:	e042      	b.n	8002e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b10      	cmp	r3, #16
 8002e22:	d119      	bne.n	8002e58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0210 	mvn.w	r2, #16
 8002e2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e029      	b.n	8002eac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e58:	f7fe fd04 	bl	8001864 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d302      	bcc.n	8002e6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d116      	bne.n	8002e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f043 0220 	orr.w	r2, r3, #32
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e007      	b.n	8002eac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d1b5      	bne.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d11b      	bne.n	8002f04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ed4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b20      	cmp	r3, #32
 8002f26:	d129      	bne.n	8002f7c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	; 0x24
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0210 	bic.w	r2, r2, #16
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2220      	movs	r2, #32
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e000      	b.n	8002f7e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
  }
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b085      	sub	sp, #20
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b20      	cmp	r3, #32
 8002fa2:	d12a      	bne.n	8002ffa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002fc4:	89fb      	ldrh	r3, [r7, #14]
 8002fc6:	f023 030f 	bic.w	r3, r3, #15
 8002fca:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	89fb      	ldrh	r3, [r7, #14]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	89fa      	ldrh	r2, [r7, #14]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	e000      	b.n	8002ffc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002ffa:	2302      	movs	r3, #2
  }
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e267      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d075      	beq.n	8003112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003026:	4b88      	ldr	r3, [pc, #544]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b04      	cmp	r3, #4
 8003030:	d00c      	beq.n	800304c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003032:	4b85      	ldr	r3, [pc, #532]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800303a:	2b08      	cmp	r3, #8
 800303c:	d112      	bne.n	8003064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800303e:	4b82      	ldr	r3, [pc, #520]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800304a:	d10b      	bne.n	8003064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	4b7e      	ldr	r3, [pc, #504]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d05b      	beq.n	8003110 <HAL_RCC_OscConfig+0x108>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d157      	bne.n	8003110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e242      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800306c:	d106      	bne.n	800307c <HAL_RCC_OscConfig+0x74>
 800306e:	4b76      	ldr	r3, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a75      	ldr	r2, [pc, #468]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e01d      	b.n	80030b8 <HAL_RCC_OscConfig+0xb0>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x98>
 8003086:	4b70      	ldr	r3, [pc, #448]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6f      	ldr	r2, [pc, #444]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800308c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b6d      	ldr	r3, [pc, #436]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a6c      	ldr	r2, [pc, #432]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e00b      	b.n	80030b8 <HAL_RCC_OscConfig+0xb0>
 80030a0:	4b69      	ldr	r3, [pc, #420]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a68      	ldr	r2, [pc, #416]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b66      	ldr	r3, [pc, #408]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a65      	ldr	r2, [pc, #404]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fe fbd0 	bl	8001864 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe fbcc 	bl	8001864 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	; 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e207      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b5b      	ldr	r3, [pc, #364]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0xc0>
 80030e6:	e014      	b.n	8003112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fbbc 	bl	8001864 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe fbb8 	bl	8001864 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e1f3      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003102:	4b51      	ldr	r3, [pc, #324]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0xe8>
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d063      	beq.n	80031e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311e:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003132:	2b08      	cmp	r3, #8
 8003134:	d11c      	bne.n	8003170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003136:	4b44      	ldr	r3, [pc, #272]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d116      	bne.n	8003170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_RCC_OscConfig+0x152>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e1c7      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315a:	4b3b      	ldr	r3, [pc, #236]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4937      	ldr	r1, [pc, #220]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	e03a      	b.n	80031e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003178:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCC_OscConfig+0x244>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317e:	f7fe fb71 	bl	8001864 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003186:	f7fe fb6d 	bl	8001864 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e1a8      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4925      	ldr	r1, [pc, #148]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]
 80031b8:	e015      	b.n	80031e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ba:	4b24      	ldr	r3, [pc, #144]	; (800324c <HAL_RCC_OscConfig+0x244>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fe fb50 	bl	8001864 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c8:	f7fe fb4c 	bl	8001864 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e187      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031da:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d036      	beq.n	8003260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d016      	beq.n	8003228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fa:	4b15      	ldr	r3, [pc, #84]	; (8003250 <HAL_RCC_OscConfig+0x248>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fe fb30 	bl	8001864 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003208:	f7fe fb2c 	bl	8001864 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e167      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321a:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_OscConfig+0x240>)
 800321c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f0      	beq.n	8003208 <HAL_RCC_OscConfig+0x200>
 8003226:	e01b      	b.n	8003260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_OscConfig+0x248>)
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322e:	f7fe fb19 	bl	8001864 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003234:	e00e      	b.n	8003254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003236:	f7fe fb15 	bl	8001864 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d907      	bls.n	8003254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e150      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
 8003248:	40023800 	.word	0x40023800
 800324c:	42470000 	.word	0x42470000
 8003250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003254:	4b88      	ldr	r3, [pc, #544]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ea      	bne.n	8003236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 8097 	beq.w	800339c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003272:	4b81      	ldr	r3, [pc, #516]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10f      	bne.n	800329e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	4b7d      	ldr	r3, [pc, #500]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4a7c      	ldr	r2, [pc, #496]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
 800328e:	4b7a      	ldr	r3, [pc, #488]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329a:	2301      	movs	r3, #1
 800329c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329e:	4b77      	ldr	r3, [pc, #476]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d118      	bne.n	80032dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032aa:	4b74      	ldr	r3, [pc, #464]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a73      	ldr	r2, [pc, #460]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b6:	f7fe fad5 	bl	8001864 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032be:	f7fe fad1 	bl	8001864 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e10c      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d0:	4b6a      	ldr	r3, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x474>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2ea>
 80032e4:	4b64      	ldr	r3, [pc, #400]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a63      	ldr	r2, [pc, #396]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6713      	str	r3, [r2, #112]	; 0x70
 80032f0:	e01c      	b.n	800332c <HAL_RCC_OscConfig+0x324>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x30c>
 80032fa:	4b5f      	ldr	r3, [pc, #380]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	4a5e      	ldr	r2, [pc, #376]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	6713      	str	r3, [r2, #112]	; 0x70
 8003306:	4b5c      	ldr	r3, [pc, #368]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330a:	4a5b      	ldr	r2, [pc, #364]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	6713      	str	r3, [r2, #112]	; 0x70
 8003312:	e00b      	b.n	800332c <HAL_RCC_OscConfig+0x324>
 8003314:	4b58      	ldr	r3, [pc, #352]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003318:	4a57      	ldr	r2, [pc, #348]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6713      	str	r3, [r2, #112]	; 0x70
 8003320:	4b55      	ldr	r3, [pc, #340]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a54      	ldr	r2, [pc, #336]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003326:	f023 0304 	bic.w	r3, r3, #4
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d015      	beq.n	8003360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003334:	f7fe fa96 	bl	8001864 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fe fa92 	bl	8001864 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	; 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0cb      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003352:	4b49      	ldr	r3, [pc, #292]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ee      	beq.n	800333c <HAL_RCC_OscConfig+0x334>
 800335e:	e014      	b.n	800338a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003360:	f7fe fa80 	bl	8001864 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	e00a      	b.n	800337e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003368:	f7fe fa7c 	bl	8001864 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f241 3288 	movw	r2, #5000	; 0x1388
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e0b5      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800337e:	4b3e      	ldr	r3, [pc, #248]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1ee      	bne.n	8003368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800338a:	7dfb      	ldrb	r3, [r7, #23]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003390:	4b39      	ldr	r3, [pc, #228]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	4a38      	ldr	r2, [pc, #224]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800339a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 80a1 	beq.w	80034e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033a6:	4b34      	ldr	r3, [pc, #208]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d05c      	beq.n	800346c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d141      	bne.n	800343e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fe fa50 	bl	8001864 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c8:	f7fe fa4c 	bl	8001864 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e087      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	019b      	lsls	r3, r3, #6
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	3b01      	subs	r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	061b      	lsls	r3, r3, #24
 800340a:	491b      	ldr	r1, [pc, #108]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003410:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe fa25 	bl	8001864 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341e:	f7fe fa21 	bl	8001864 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e05c      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x416>
 800343c:	e054      	b.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_RCC_OscConfig+0x478>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe fa0e 	bl	8001864 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe fa0a 	bl	8001864 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e045      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_RCC_OscConfig+0x470>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x444>
 800346a:	e03d      	b.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d107      	bne.n	8003484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e038      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
 8003478:	40023800 	.word	0x40023800
 800347c:	40007000 	.word	0x40007000
 8003480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_RCC_OscConfig+0x4ec>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d028      	beq.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d121      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d11a      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034bc:	4293      	cmp	r3, r2
 80034be:	d111      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	3b01      	subs	r3, #1
 80034ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d001      	beq.n	80034e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800

080034f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0cc      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	4b68      	ldr	r3, [pc, #416]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d90c      	bls.n	8003534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b65      	ldr	r3, [pc, #404]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b63      	ldr	r3, [pc, #396]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e0b8      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0302 	and.w	r3, r3, #2
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800354c:	4b59      	ldr	r3, [pc, #356]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a58      	ldr	r2, [pc, #352]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003564:	4b53      	ldr	r3, [pc, #332]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	4a52      	ldr	r2, [pc, #328]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800356e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003570:	4b50      	ldr	r3, [pc, #320]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	494d      	ldr	r1, [pc, #308]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	4313      	orrs	r3, r2
 8003580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d044      	beq.n	8003618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	4b47      	ldr	r3, [pc, #284]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d119      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e07f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d003      	beq.n	80035b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d107      	bne.n	80035c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b6:	4b3f      	ldr	r3, [pc, #252]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e06f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c6:	4b3b      	ldr	r3, [pc, #236]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e067      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 0203 	bic.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4934      	ldr	r1, [pc, #208]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e8:	f7fe f93c 	bl	8001864 <HAL_GetTick>
 80035ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035f0:	f7fe f938 	bl	8001864 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e04f      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003606:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 020c 	and.w	r2, r3, #12
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	429a      	cmp	r2, r3
 8003616:	d1eb      	bne.n	80035f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d20c      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b22      	ldr	r3, [pc, #136]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e032      	b.n	80036a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	4916      	ldr	r1, [pc, #88]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	490e      	ldr	r1, [pc, #56]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800367e:	f000 f821 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003682:	4602      	mov	r2, r0
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	091b      	lsrs	r3, r3, #4
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	490a      	ldr	r1, [pc, #40]	; (80036b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	5ccb      	ldrb	r3, [r1, r3]
 8003692:	fa22 f303 	lsr.w	r3, r2, r3
 8003696:	4a09      	ldr	r2, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1c4>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800369a:	4b09      	ldr	r3, [pc, #36]	; (80036c0 <HAL_RCC_ClockConfig+0x1c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fe f89c 	bl	80017dc <HAL_InitTick>

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023c00 	.word	0x40023c00
 80036b4:	40023800 	.word	0x40023800
 80036b8:	080060fc 	.word	0x080060fc
 80036bc:	20000134 	.word	0x20000134
 80036c0:	20000138 	.word	0x20000138

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c8:	b090      	sub	sp, #64	; 0x40
 80036ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
 80036d0:	2300      	movs	r3, #0
 80036d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d4:	2300      	movs	r3, #0
 80036d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036dc:	4b59      	ldr	r3, [pc, #356]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d00d      	beq.n	8003704 <HAL_RCC_GetSysClockFreq+0x40>
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	f200 80a1 	bhi.w	8003830 <HAL_RCC_GetSysClockFreq+0x16c>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x34>
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_GetSysClockFreq+0x3a>
 80036f6:	e09b      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036f8:	4b53      	ldr	r3, [pc, #332]	; (8003848 <HAL_RCC_GetSysClockFreq+0x184>)
 80036fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80036fc:	e09b      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036fe:	4b53      	ldr	r3, [pc, #332]	; (800384c <HAL_RCC_GetSysClockFreq+0x188>)
 8003700:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003702:	e098      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003704:	4b4f      	ldr	r3, [pc, #316]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800370e:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d028      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800371a:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	099b      	lsrs	r3, r3, #6
 8003720:	2200      	movs	r2, #0
 8003722:	623b      	str	r3, [r7, #32]
 8003724:	627a      	str	r2, [r7, #36]	; 0x24
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800372c:	2100      	movs	r1, #0
 800372e:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_RCC_GetSysClockFreq+0x188>)
 8003730:	fb03 f201 	mul.w	r2, r3, r1
 8003734:	2300      	movs	r3, #0
 8003736:	fb00 f303 	mul.w	r3, r0, r3
 800373a:	4413      	add	r3, r2
 800373c:	4a43      	ldr	r2, [pc, #268]	; (800384c <HAL_RCC_GetSysClockFreq+0x188>)
 800373e:	fba0 1202 	umull	r1, r2, r0, r2
 8003742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003744:	460a      	mov	r2, r1
 8003746:	62ba      	str	r2, [r7, #40]	; 0x28
 8003748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374a:	4413      	add	r3, r2
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800374e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003750:	2200      	movs	r2, #0
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	61fa      	str	r2, [r7, #28]
 8003756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800375a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800375e:	f7fc fd9f 	bl	80002a0 <__aeabi_uldivmod>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4613      	mov	r3, r2
 8003768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376a:	e053      	b.n	8003814 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	099b      	lsrs	r3, r3, #6
 8003772:	2200      	movs	r2, #0
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	617a      	str	r2, [r7, #20]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800377e:	f04f 0b00 	mov.w	fp, #0
 8003782:	4652      	mov	r2, sl
 8003784:	465b      	mov	r3, fp
 8003786:	f04f 0000 	mov.w	r0, #0
 800378a:	f04f 0100 	mov.w	r1, #0
 800378e:	0159      	lsls	r1, r3, #5
 8003790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003794:	0150      	lsls	r0, r2, #5
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	ebb2 080a 	subs.w	r8, r2, sl
 800379e:	eb63 090b 	sbc.w	r9, r3, fp
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037b6:	ebb2 0408 	subs.w	r4, r2, r8
 80037ba:	eb63 0509 	sbc.w	r5, r3, r9
 80037be:	f04f 0200 	mov.w	r2, #0
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	00eb      	lsls	r3, r5, #3
 80037c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037cc:	00e2      	lsls	r2, r4, #3
 80037ce:	4614      	mov	r4, r2
 80037d0:	461d      	mov	r5, r3
 80037d2:	eb14 030a 	adds.w	r3, r4, sl
 80037d6:	603b      	str	r3, [r7, #0]
 80037d8:	eb45 030b 	adc.w	r3, r5, fp
 80037dc:	607b      	str	r3, [r7, #4]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037ea:	4629      	mov	r1, r5
 80037ec:	028b      	lsls	r3, r1, #10
 80037ee:	4621      	mov	r1, r4
 80037f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f4:	4621      	mov	r1, r4
 80037f6:	028a      	lsls	r2, r1, #10
 80037f8:	4610      	mov	r0, r2
 80037fa:	4619      	mov	r1, r3
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fe:	2200      	movs	r2, #0
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	60fa      	str	r2, [r7, #12]
 8003804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003808:	f7fc fd4a 	bl	80002a0 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4613      	mov	r3, r2
 8003812:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003814:	4b0b      	ldr	r3, [pc, #44]	; (8003844 <HAL_RCC_GetSysClockFreq+0x180>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	3301      	adds	r3, #1
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800382e:	e002      	b.n	8003836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetSysClockFreq+0x184>)
 8003832:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003838:	4618      	mov	r0, r3
 800383a:	3740      	adds	r7, #64	; 0x40
 800383c:	46bd      	mov	sp, r7
 800383e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	00f42400 	.word	0x00f42400
 800384c:	017d7840 	.word	0x017d7840

08003850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000134 	.word	0x20000134

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800386c:	f7ff fff0 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0a9b      	lsrs	r3, r3, #10
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	; (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	0800610c 	.word	0x0800610c

08003890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003894:	f7ff ffdc 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0b5b      	lsrs	r3, r3, #13
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4903      	ldr	r1, [pc, #12]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	0800610c 	.word	0x0800610c

080038b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e041      	b.n	800394e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fe54 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4610      	mov	r0, r2
 80038f8:	f000 fba8 	bl	800404c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d001      	beq.n	8003970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	e04e      	b.n	8003a0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f042 0201 	orr.w	r2, r2, #1
 8003986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a23      	ldr	r2, [pc, #140]	; (8003a1c <HAL_TIM_Base_Start_IT+0xc4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d022      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x80>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d01d      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x80>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a1f      	ldr	r2, [pc, #124]	; (8003a20 <HAL_TIM_Base_Start_IT+0xc8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d018      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x80>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a1e      	ldr	r2, [pc, #120]	; (8003a24 <HAL_TIM_Base_Start_IT+0xcc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d013      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x80>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <HAL_TIM_Base_Start_IT+0xd0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00e      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x80>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <HAL_TIM_Base_Start_IT+0xd4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d009      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x80>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a19      	ldr	r2, [pc, #100]	; (8003a30 <HAL_TIM_Base_Start_IT+0xd8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <HAL_TIM_Base_Start_IT+0x80>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a18      	ldr	r2, [pc, #96]	; (8003a34 <HAL_TIM_Base_Start_IT+0xdc>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d111      	bne.n	80039fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d010      	beq.n	8003a0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f042 0201 	orr.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fa:	e007      	b.n	8003a0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800
 8003a28:	40000c00 	.word	0x40000c00
 8003a2c:	40010400 	.word	0x40010400
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40001800 	.word	0x40001800

08003a38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e041      	b.n	8003ace <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d106      	bne.n	8003a64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fd fd72 	bl	8001548 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3304      	adds	r3, #4
 8003a74:	4619      	mov	r1, r3
 8003a76:	4610      	mov	r0, r2
 8003a78:	f000 fae8 	bl	800404c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <HAL_TIM_PWM_Start+0x24>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e022      	b.n	8003b42 <HAL_TIM_PWM_Start+0x6a>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d109      	bne.n	8003b16 <HAL_TIM_PWM_Start+0x3e>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	bf14      	ite	ne
 8003b0e:	2301      	movne	r3, #1
 8003b10:	2300      	moveq	r3, #0
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	e015      	b.n	8003b42 <HAL_TIM_PWM_Start+0x6a>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d109      	bne.n	8003b30 <HAL_TIM_PWM_Start+0x58>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	bf14      	ite	ne
 8003b28:	2301      	movne	r3, #1
 8003b2a:	2300      	moveq	r3, #0
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	e008      	b.n	8003b42 <HAL_TIM_PWM_Start+0x6a>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	bf14      	ite	ne
 8003b3c:	2301      	movne	r3, #1
 8003b3e:	2300      	moveq	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e07c      	b.n	8003c44 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_PWM_Start+0x82>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b58:	e013      	b.n	8003b82 <HAL_TIM_PWM_Start+0xaa>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d104      	bne.n	8003b6a <HAL_TIM_PWM_Start+0x92>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b68:	e00b      	b.n	8003b82 <HAL_TIM_PWM_Start+0xaa>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d104      	bne.n	8003b7a <HAL_TIM_PWM_Start+0xa2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b78:	e003      	b.n	8003b82 <HAL_TIM_PWM_Start+0xaa>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2201      	movs	r2, #1
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 fcae 	bl	80044ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2d      	ldr	r2, [pc, #180]	; (8003c4c <HAL_TIM_PWM_Start+0x174>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_TIM_PWM_Start+0xcc>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2c      	ldr	r2, [pc, #176]	; (8003c50 <HAL_TIM_PWM_Start+0x178>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_TIM_PWM_Start+0xd0>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_TIM_PWM_Start+0xd2>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a22      	ldr	r2, [pc, #136]	; (8003c4c <HAL_TIM_PWM_Start+0x174>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d022      	beq.n	8003c0e <HAL_TIM_PWM_Start+0x136>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd0:	d01d      	beq.n	8003c0e <HAL_TIM_PWM_Start+0x136>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1f      	ldr	r2, [pc, #124]	; (8003c54 <HAL_TIM_PWM_Start+0x17c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <HAL_TIM_PWM_Start+0x136>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <HAL_TIM_PWM_Start+0x180>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_TIM_PWM_Start+0x136>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <HAL_TIM_PWM_Start+0x184>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_TIM_PWM_Start+0x136>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	; (8003c50 <HAL_TIM_PWM_Start+0x178>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_TIM_PWM_Start+0x136>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a18      	ldr	r2, [pc, #96]	; (8003c60 <HAL_TIM_PWM_Start+0x188>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_TIM_PWM_Start+0x136>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_TIM_PWM_Start+0x18c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d111      	bne.n	8003c32 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b06      	cmp	r3, #6
 8003c1e:	d010      	beq.n	8003c42 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c30:	e007      	b.n	8003c42 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40010400 	.word	0x40010400
 8003c54:	40000400 	.word	0x40000400
 8003c58:	40000800 	.word	0x40000800
 8003c5c:	40000c00 	.word	0x40000c00
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40001800 	.word	0x40001800

08003c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d122      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d11b      	bne.n	8003cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0202 	mvn.w	r2, #2
 8003c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f9b0 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003cb0:	e005      	b.n	8003cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f9a2 	bl	8003ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 f9b3 	bl	8004024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d122      	bne.n	8003d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d11b      	bne.n	8003d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0204 	mvn.w	r2, #4
 8003ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2202      	movs	r2, #2
 8003cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f986 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003d04:	e005      	b.n	8003d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f978 	bl	8003ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f989 	bl	8004024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d122      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d11b      	bne.n	8003d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0208 	mvn.w	r2, #8
 8003d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2204      	movs	r2, #4
 8003d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f95c 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003d58:	e005      	b.n	8003d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f94e 	bl	8003ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f95f 	bl	8004024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d122      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	d11b      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0210 	mvn.w	r2, #16
 8003d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2208      	movs	r2, #8
 8003d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f932 	bl	8004010 <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f924 	bl	8003ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f935 	bl	8004024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d10e      	bne.n	8003dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d107      	bne.n	8003dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0201 	mvn.w	r2, #1
 8003de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fd f8da 	bl	8000fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df6:	2b80      	cmp	r3, #128	; 0x80
 8003df8:	d10e      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e04:	2b80      	cmp	r3, #128	; 0x80
 8003e06:	d107      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fc68 	bl	80046e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	d10e      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b40      	cmp	r3, #64	; 0x40
 8003e32:	d107      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f8fa 	bl	8004038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d10e      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d107      	bne.n	8003e70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f06f 0220 	mvn.w	r2, #32
 8003e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fc32 	bl	80046d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e70:	bf00      	nop
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e0ae      	b.n	8003ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b0c      	cmp	r3, #12
 8003ea2:	f200 809f 	bhi.w	8003fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ea6:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003ee1 	.word	0x08003ee1
 8003eb0:	08003fe5 	.word	0x08003fe5
 8003eb4:	08003fe5 	.word	0x08003fe5
 8003eb8:	08003fe5 	.word	0x08003fe5
 8003ebc:	08003f21 	.word	0x08003f21
 8003ec0:	08003fe5 	.word	0x08003fe5
 8003ec4:	08003fe5 	.word	0x08003fe5
 8003ec8:	08003fe5 	.word	0x08003fe5
 8003ecc:	08003f63 	.word	0x08003f63
 8003ed0:	08003fe5 	.word	0x08003fe5
 8003ed4:	08003fe5 	.word	0x08003fe5
 8003ed8:	08003fe5 	.word	0x08003fe5
 8003edc:	08003fa3 	.word	0x08003fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f950 	bl	800418c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0208 	orr.w	r2, r2, #8
 8003efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0204 	bic.w	r2, r2, #4
 8003f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6999      	ldr	r1, [r3, #24]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	619a      	str	r2, [r3, #24]
      break;
 8003f1e:	e064      	b.n	8003fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f9a0 	bl	800426c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699a      	ldr	r2, [r3, #24]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6999      	ldr	r1, [r3, #24]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	619a      	str	r2, [r3, #24]
      break;
 8003f60:	e043      	b.n	8003fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f9f5 	bl	8004358 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0208 	orr.w	r2, r2, #8
 8003f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0204 	bic.w	r2, r2, #4
 8003f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69d9      	ldr	r1, [r3, #28]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	61da      	str	r2, [r3, #28]
      break;
 8003fa0:	e023      	b.n	8003fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fa49 	bl	8004440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69da      	ldr	r2, [r3, #28]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69da      	ldr	r2, [r3, #28]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69d9      	ldr	r1, [r3, #28]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	021a      	lsls	r2, r3, #8
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	61da      	str	r2, [r3, #28]
      break;
 8003fe2:	e002      	b.n	8003fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a40      	ldr	r2, [pc, #256]	; (8004160 <TIM_Base_SetConfig+0x114>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406a:	d00f      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a3d      	ldr	r2, [pc, #244]	; (8004164 <TIM_Base_SetConfig+0x118>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00b      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a3c      	ldr	r2, [pc, #240]	; (8004168 <TIM_Base_SetConfig+0x11c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d007      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a3b      	ldr	r2, [pc, #236]	; (800416c <TIM_Base_SetConfig+0x120>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a3a      	ldr	r2, [pc, #232]	; (8004170 <TIM_Base_SetConfig+0x124>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d108      	bne.n	800409e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a2f      	ldr	r2, [pc, #188]	; (8004160 <TIM_Base_SetConfig+0x114>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d02b      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ac:	d027      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <TIM_Base_SetConfig+0x118>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d023      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a2b      	ldr	r2, [pc, #172]	; (8004168 <TIM_Base_SetConfig+0x11c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01f      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a2a      	ldr	r2, [pc, #168]	; (800416c <TIM_Base_SetConfig+0x120>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01b      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a29      	ldr	r2, [pc, #164]	; (8004170 <TIM_Base_SetConfig+0x124>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d017      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a28      	ldr	r2, [pc, #160]	; (8004174 <TIM_Base_SetConfig+0x128>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d013      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a27      	ldr	r2, [pc, #156]	; (8004178 <TIM_Base_SetConfig+0x12c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00f      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a26      	ldr	r2, [pc, #152]	; (800417c <TIM_Base_SetConfig+0x130>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00b      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a25      	ldr	r2, [pc, #148]	; (8004180 <TIM_Base_SetConfig+0x134>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d007      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a24      	ldr	r2, [pc, #144]	; (8004184 <TIM_Base_SetConfig+0x138>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d003      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a23      	ldr	r2, [pc, #140]	; (8004188 <TIM_Base_SetConfig+0x13c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d108      	bne.n	8004110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a0a      	ldr	r2, [pc, #40]	; (8004160 <TIM_Base_SetConfig+0x114>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_Base_SetConfig+0xf8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a0c      	ldr	r2, [pc, #48]	; (8004170 <TIM_Base_SetConfig+0x124>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d103      	bne.n	800414c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	615a      	str	r2, [r3, #20]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800
 800416c:	40000c00 	.word	0x40000c00
 8004170:	40010400 	.word	0x40010400
 8004174:	40014000 	.word	0x40014000
 8004178:	40014400 	.word	0x40014400
 800417c:	40014800 	.word	0x40014800
 8004180:	40001800 	.word	0x40001800
 8004184:	40001c00 	.word	0x40001c00
 8004188:	40002000 	.word	0x40002000

0800418c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f023 0201 	bic.w	r2, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 0302 	bic.w	r3, r3, #2
 80041d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	4313      	orrs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a20      	ldr	r2, [pc, #128]	; (8004264 <TIM_OC1_SetConfig+0xd8>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d003      	beq.n	80041f0 <TIM_OC1_SetConfig+0x64>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a1f      	ldr	r2, [pc, #124]	; (8004268 <TIM_OC1_SetConfig+0xdc>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10c      	bne.n	800420a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 0308 	bic.w	r3, r3, #8
 80041f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f023 0304 	bic.w	r3, r3, #4
 8004208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a15      	ldr	r2, [pc, #84]	; (8004264 <TIM_OC1_SetConfig+0xd8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_OC1_SetConfig+0x8e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a14      	ldr	r2, [pc, #80]	; (8004268 <TIM_OC1_SetConfig+0xdc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d111      	bne.n	800423e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	693a      	ldr	r2, [r7, #16]
 8004242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	621a      	str	r2, [r3, #32]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	40010000 	.word	0x40010000
 8004268:	40010400 	.word	0x40010400

0800426c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f023 0210 	bic.w	r2, r3, #16
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0320 	bic.w	r3, r3, #32
 80042b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a22      	ldr	r2, [pc, #136]	; (8004350 <TIM_OC2_SetConfig+0xe4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_OC2_SetConfig+0x68>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a21      	ldr	r2, [pc, #132]	; (8004354 <TIM_OC2_SetConfig+0xe8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d10d      	bne.n	80042f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a17      	ldr	r2, [pc, #92]	; (8004350 <TIM_OC2_SetConfig+0xe4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_OC2_SetConfig+0x94>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a16      	ldr	r2, [pc, #88]	; (8004354 <TIM_OC2_SetConfig+0xe8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d113      	bne.n	8004328 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800430e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40010000 	.word	0x40010000
 8004354:	40010400 	.word	0x40010400

08004358 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0303 	bic.w	r3, r3, #3
 800438e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a21      	ldr	r2, [pc, #132]	; (8004438 <TIM_OC3_SetConfig+0xe0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_OC3_SetConfig+0x66>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a20      	ldr	r2, [pc, #128]	; (800443c <TIM_OC3_SetConfig+0xe4>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d10d      	bne.n	80043da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <TIM_OC3_SetConfig+0xe0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d003      	beq.n	80043ea <TIM_OC3_SetConfig+0x92>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a15      	ldr	r2, [pc, #84]	; (800443c <TIM_OC3_SetConfig+0xe4>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d113      	bne.n	8004412 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	621a      	str	r2, [r3, #32]
}
 800442c:	bf00      	nop
 800442e:	371c      	adds	r7, #28
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40010000 	.word	0x40010000
 800443c:	40010400 	.word	0x40010400

08004440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	021b      	lsls	r3, r3, #8
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800448a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	031b      	lsls	r3, r3, #12
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <TIM_OC4_SetConfig+0xa4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d003      	beq.n	80044a8 <TIM_OC4_SetConfig+0x68>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a11      	ldr	r2, [pc, #68]	; (80044e8 <TIM_OC4_SetConfig+0xa8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d109      	bne.n	80044bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	019b      	lsls	r3, r3, #6
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	621a      	str	r2, [r3, #32]
}
 80044d6:	bf00      	nop
 80044d8:	371c      	adds	r7, #28
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40010000 	.word	0x40010000
 80044e8:	40010400 	.word	0x40010400

080044ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2201      	movs	r2, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1a      	ldr	r2, [r3, #32]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	43db      	mvns	r3, r3
 800450e:	401a      	ands	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1a      	ldr	r2, [r3, #32]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 031f 	and.w	r3, r3, #31
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800454c:	2302      	movs	r3, #2
 800454e:	e05a      	b.n	8004606 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a21      	ldr	r2, [pc, #132]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d022      	beq.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d01d      	beq.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d018      	beq.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a1b      	ldr	r2, [pc, #108]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a18      	ldr	r2, [pc, #96]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a17      	ldr	r2, [pc, #92]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a15      	ldr	r2, [pc, #84]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d10c      	bne.n	80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800
 8004620:	40000c00 	.word	0x40000c00
 8004624:	40010400 	.word	0x40010400
 8004628:	40014000 	.word	0x40014000
 800462c:	40001800 	.word	0x40001800

08004630 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800463a:	2300      	movs	r3, #0
 800463c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004648:	2302      	movs	r3, #2
 800464a:	e03d      	b.n	80046c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e03f      	b.n	800478e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fc ffbe 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2224      	movs	r2, #36	; 0x24
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800473e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fd19 	bl	8005178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691a      	ldr	r2, [r3, #16]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695a      	ldr	r2, [r3, #20]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004796:	b480      	push	{r7}
 8004798:	b085      	sub	sp, #20
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	4613      	mov	r3, r2
 80047a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d130      	bne.n	8004812 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_UART_Transmit_IT+0x26>
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e029      	b.n	8004814 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_UART_Transmit_IT+0x38>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e022      	b.n	8004814 <HAL_UART_Transmit_IT+0x7e>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	88fa      	ldrh	r2, [r7, #6]
 80047e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2221      	movs	r2, #33	; 0x21
 80047f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800480c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	4613      	mov	r3, r2
 800482c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b20      	cmp	r3, #32
 8004838:	d11d      	bne.n	8004876 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_UART_Receive_IT+0x26>
 8004840:	88fb      	ldrh	r3, [r7, #6]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e016      	b.n	8004878 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_UART_Receive_IT+0x38>
 8004854:	2302      	movs	r3, #2
 8004856:	e00f      	b.n	8004878 <HAL_UART_Receive_IT+0x58>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	461a      	mov	r2, r3
 800486a:	68b9      	ldr	r1, [r7, #8]
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 faab 	bl	8004dc8 <UART_Start_Receive_IT>
 8004872:	4603      	mov	r3, r0
 8004874:	e000      	b.n	8004878 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004876:	2302      	movs	r3, #2
  }
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b0ba      	sub	sp, #232	; 0xe8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_UART_IRQHandler+0x66>
 80048d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 fb8f 	bl	8005002 <UART_Receive_IT>
      return;
 80048e4:	e256      	b.n	8004d94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80de 	beq.w	8004aac <HAL_UART_IRQHandler+0x22c>
 80048f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004900:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 80d1 	beq.w	8004aac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800490a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <HAL_UART_IRQHandler+0xae>
 8004916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f043 0201 	orr.w	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00b      	beq.n	8004952 <HAL_UART_IRQHandler+0xd2>
 800493a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f043 0202 	orr.w	r2, r3, #2
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_UART_IRQHandler+0xf6>
 800495e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f043 0204 	orr.w	r2, r3, #4
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d011      	beq.n	80049a6 <HAL_UART_IRQHandler+0x126>
 8004982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004986:	f003 0320 	and.w	r3, r3, #32
 800498a:	2b00      	cmp	r3, #0
 800498c:	d105      	bne.n	800499a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800498e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f043 0208 	orr.w	r2, r3, #8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 81ed 	beq.w	8004d8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_UART_IRQHandler+0x14e>
 80049bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fb1a 	bl	8005002 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <HAL_UART_IRQHandler+0x17a>
 80049f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d04f      	beq.n	8004a9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fa22 	bl	8004e44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0a:	2b40      	cmp	r3, #64	; 0x40
 8004a0c:	d141      	bne.n	8004a92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3314      	adds	r3, #20
 8004a14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a1c:	e853 3f00 	ldrex	r3, [r3]
 8004a20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3314      	adds	r3, #20
 8004a36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1d9      	bne.n	8004a0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d013      	beq.n	8004a8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	4a7d      	ldr	r2, [pc, #500]	; (8004c5c <HAL_UART_IRQHandler+0x3dc>)
 8004a68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fd f8a9 	bl	8001bc6 <HAL_DMA_Abort_IT>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a84:	4610      	mov	r0, r2
 8004a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a88:	e00e      	b.n	8004aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f986 	bl	8004d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a90:	e00a      	b.n	8004aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f982 	bl	8004d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a98:	e006      	b.n	8004aa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f97e 	bl	8004d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004aa6:	e170      	b.n	8004d8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa8:	bf00      	nop
    return;
 8004aaa:	e16e      	b.n	8004d8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	f040 814a 	bne.w	8004d4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8143 	beq.w	8004d4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 813c 	beq.w	8004d4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	f040 80b4 	bne.w	8004c60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8140 	beq.w	8004d8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b16:	429a      	cmp	r2, r3
 8004b18:	f080 8139 	bcs.w	8004d8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2e:	f000 8088 	beq.w	8004c42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	330c      	adds	r3, #12
 8004b38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b6e:	e841 2300 	strex	r3, r2, [r1]
 8004b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1d9      	bne.n	8004b32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3314      	adds	r3, #20
 8004b84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ba2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004baa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004bb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e1      	bne.n	8004b7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3314      	adds	r3, #20
 8004bc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3314      	adds	r3, #20
 8004bda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004be0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004be4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e3      	bne.n	8004bba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	330c      	adds	r3, #12
 8004c06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c12:	f023 0310 	bic.w	r3, r3, #16
 8004c16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	330c      	adds	r3, #12
 8004c20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c24:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e3      	bne.n	8004c00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fc ff52 	bl	8001ae6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f8ac 	bl	8004db0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c58:	e099      	b.n	8004d8e <HAL_UART_IRQHandler+0x50e>
 8004c5a:	bf00      	nop
 8004c5c:	08004f0b 	.word	0x08004f0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f000 808b 	beq.w	8004d92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8086 	beq.w	8004d92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004caa:	647a      	str	r2, [r7, #68]	; 0x44
 8004cac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cb2:	e841 2300 	strex	r3, r2, [r1]
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1e3      	bne.n	8004c86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3314      	adds	r3, #20
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	e853 3f00 	ldrex	r3, [r3]
 8004ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3314      	adds	r3, #20
 8004cde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ce2:	633a      	str	r2, [r7, #48]	; 0x30
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e3      	bne.n	8004cbe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0310 	bic.w	r3, r3, #16
 8004d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	330c      	adds	r3, #12
 8004d24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d28:	61fa      	str	r2, [r7, #28]
 8004d2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	69b9      	ldr	r1, [r7, #24]
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	617b      	str	r3, [r7, #20]
   return(result);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e3      	bne.n	8004d04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d40:	4619      	mov	r1, r3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f834 	bl	8004db0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d48:	e023      	b.n	8004d92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d009      	beq.n	8004d6a <HAL_UART_IRQHandler+0x4ea>
 8004d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8e5 	bl	8004f32 <UART_Transmit_IT>
    return;
 8004d68:	e014      	b.n	8004d94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00e      	beq.n	8004d94 <HAL_UART_IRQHandler+0x514>
 8004d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f925 	bl	8004fd2 <UART_EndTransmit_IT>
    return;
 8004d88:	e004      	b.n	8004d94 <HAL_UART_IRQHandler+0x514>
    return;
 8004d8a:	bf00      	nop
 8004d8c:	e002      	b.n	8004d94 <HAL_UART_IRQHandler+0x514>
      return;
 8004d8e:	bf00      	nop
 8004d90:	e000      	b.n	8004d94 <HAL_UART_IRQHandler+0x514>
      return;
 8004d92:	bf00      	nop
  }
}
 8004d94:	37e8      	adds	r7, #232	; 0xe8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop

08004d9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	460b      	mov	r3, r1
 8004dba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2222      	movs	r2, #34	; 0x22
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e14:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695a      	ldr	r2, [r3, #20]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0201 	orr.w	r2, r2, #1
 8004e24:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0220 	orr.w	r2, r2, #32
 8004e34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b095      	sub	sp, #84	; 0x54
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e56:	e853 3f00 	ldrex	r3, [r3]
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e6c:	643a      	str	r2, [r7, #64]	; 0x40
 8004e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e74:	e841 2300 	strex	r3, r2, [r1]
 8004e78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1e5      	bne.n	8004e4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3314      	adds	r3, #20
 8004e86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3314      	adds	r3, #20
 8004e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ea0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e5      	bne.n	8004e80 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d119      	bne.n	8004ef0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f023 0310 	bic.w	r3, r3, #16
 8004ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004edc:	61ba      	str	r2, [r7, #24]
 8004ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	6979      	ldr	r1, [r7, #20]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e5      	bne.n	8004ebc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2220      	movs	r2, #32
 8004ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004efe:	bf00      	nop
 8004f00:	3754      	adds	r7, #84	; 0x54
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff ff39 	bl	8004d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f2a:	bf00      	nop
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b085      	sub	sp, #20
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b21      	cmp	r3, #33	; 0x21
 8004f44:	d13e      	bne.n	8004fc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4e:	d114      	bne.n	8004f7a <UART_Transmit_IT+0x48>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d110      	bne.n	8004f7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	1c9a      	adds	r2, r3, #2
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	621a      	str	r2, [r3, #32]
 8004f78:	e008      	b.n	8004f8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	1c59      	adds	r1, r3, #1
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6211      	str	r1, [r2, #32]
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	3b01      	subs	r3, #1
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10f      	bne.n	8004fc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e000      	b.n	8004fc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fc4:	2302      	movs	r3, #2
  }
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fc f89e 	bl	8001134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3708      	adds	r7, #8
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b08c      	sub	sp, #48	; 0x30
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b22      	cmp	r3, #34	; 0x22
 8005014:	f040 80ab 	bne.w	800516e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005020:	d117      	bne.n	8005052 <UART_Receive_IT+0x50>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d113      	bne.n	8005052 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800502a:	2300      	movs	r3, #0
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005040:	b29a      	uxth	r2, r3
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	1c9a      	adds	r2, r3, #2
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
 8005050:	e026      	b.n	80050a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005058:	2300      	movs	r3, #0
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005064:	d007      	beq.n	8005076 <UART_Receive_IT+0x74>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <UART_Receive_IT+0x82>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	e008      	b.n	8005096 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005090:	b2da      	uxtb	r2, r3
 8005092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005094:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	4619      	mov	r1, r3
 80050ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d15a      	bne.n	800516a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0220 	bic.w	r2, r2, #32
 80050c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695a      	ldr	r2, [r3, #20]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0201 	bic.w	r2, r2, #1
 80050e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d135      	bne.n	8005160 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	613b      	str	r3, [r7, #16]
   return(result);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f023 0310 	bic.w	r3, r3, #16
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511a:	623a      	str	r2, [r7, #32]
 800511c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	69f9      	ldr	r1, [r7, #28]
 8005120:	6a3a      	ldr	r2, [r7, #32]
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	61bb      	str	r3, [r7, #24]
   return(result);
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e5      	bne.n	80050fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b10      	cmp	r3, #16
 800513a:	d10a      	bne.n	8005152 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005156:	4619      	mov	r1, r3
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff fe29 	bl	8004db0 <HAL_UARTEx_RxEventCallback>
 800515e:	e002      	b.n	8005166 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f7fb ffc7 	bl	80010f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e002      	b.n	8005170 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	e000      	b.n	8005170 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
  }
}
 8005170:	4618      	mov	r0, r3
 8005172:	3730      	adds	r7, #48	; 0x30
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800517c:	b0c0      	sub	sp, #256	; 0x100
 800517e:	af00      	add	r7, sp, #0
 8005180:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005194:	68d9      	ldr	r1, [r3, #12]
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	ea40 0301 	orr.w	r3, r0, r1
 80051a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a6:	689a      	ldr	r2, [r3, #8]
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	431a      	orrs	r2, r3
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	4313      	orrs	r3, r2
 80051c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051d0:	f021 010c 	bic.w	r1, r1, #12
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051de:	430b      	orrs	r3, r1
 80051e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f2:	6999      	ldr	r1, [r3, #24]
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	ea40 0301 	orr.w	r3, r0, r1
 80051fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b8f      	ldr	r3, [pc, #572]	; (8005444 <UART_SetConfig+0x2cc>)
 8005208:	429a      	cmp	r2, r3
 800520a:	d005      	beq.n	8005218 <UART_SetConfig+0xa0>
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b8d      	ldr	r3, [pc, #564]	; (8005448 <UART_SetConfig+0x2d0>)
 8005214:	429a      	cmp	r2, r3
 8005216:	d104      	bne.n	8005222 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005218:	f7fe fb3a 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 800521c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005220:	e003      	b.n	800522a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005222:	f7fe fb21 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8005226:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005234:	f040 810c 	bne.w	8005450 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523c:	2200      	movs	r2, #0
 800523e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005242:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005246:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800524a:	4622      	mov	r2, r4
 800524c:	462b      	mov	r3, r5
 800524e:	1891      	adds	r1, r2, r2
 8005250:	65b9      	str	r1, [r7, #88]	; 0x58
 8005252:	415b      	adcs	r3, r3
 8005254:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005256:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800525a:	4621      	mov	r1, r4
 800525c:	eb12 0801 	adds.w	r8, r2, r1
 8005260:	4629      	mov	r1, r5
 8005262:	eb43 0901 	adc.w	r9, r3, r1
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800527a:	4690      	mov	r8, r2
 800527c:	4699      	mov	r9, r3
 800527e:	4623      	mov	r3, r4
 8005280:	eb18 0303 	adds.w	r3, r8, r3
 8005284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005288:	462b      	mov	r3, r5
 800528a:	eb49 0303 	adc.w	r3, r9, r3
 800528e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800529e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052a6:	460b      	mov	r3, r1
 80052a8:	18db      	adds	r3, r3, r3
 80052aa:	653b      	str	r3, [r7, #80]	; 0x50
 80052ac:	4613      	mov	r3, r2
 80052ae:	eb42 0303 	adc.w	r3, r2, r3
 80052b2:	657b      	str	r3, [r7, #84]	; 0x54
 80052b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052bc:	f7fa fff0 	bl	80002a0 <__aeabi_uldivmod>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4b61      	ldr	r3, [pc, #388]	; (800544c <UART_SetConfig+0x2d4>)
 80052c6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	011c      	lsls	r4, r3, #4
 80052ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052e0:	4642      	mov	r2, r8
 80052e2:	464b      	mov	r3, r9
 80052e4:	1891      	adds	r1, r2, r2
 80052e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80052e8:	415b      	adcs	r3, r3
 80052ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052f0:	4641      	mov	r1, r8
 80052f2:	eb12 0a01 	adds.w	sl, r2, r1
 80052f6:	4649      	mov	r1, r9
 80052f8:	eb43 0b01 	adc.w	fp, r3, r1
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005308:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800530c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005310:	4692      	mov	sl, r2
 8005312:	469b      	mov	fp, r3
 8005314:	4643      	mov	r3, r8
 8005316:	eb1a 0303 	adds.w	r3, sl, r3
 800531a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800531e:	464b      	mov	r3, r9
 8005320:	eb4b 0303 	adc.w	r3, fp, r3
 8005324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005334:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005338:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800533c:	460b      	mov	r3, r1
 800533e:	18db      	adds	r3, r3, r3
 8005340:	643b      	str	r3, [r7, #64]	; 0x40
 8005342:	4613      	mov	r3, r2
 8005344:	eb42 0303 	adc.w	r3, r2, r3
 8005348:	647b      	str	r3, [r7, #68]	; 0x44
 800534a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800534e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005352:	f7fa ffa5 	bl	80002a0 <__aeabi_uldivmod>
 8005356:	4602      	mov	r2, r0
 8005358:	460b      	mov	r3, r1
 800535a:	4611      	mov	r1, r2
 800535c:	4b3b      	ldr	r3, [pc, #236]	; (800544c <UART_SetConfig+0x2d4>)
 800535e:	fba3 2301 	umull	r2, r3, r3, r1
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	2264      	movs	r2, #100	; 0x64
 8005366:	fb02 f303 	mul.w	r3, r2, r3
 800536a:	1acb      	subs	r3, r1, r3
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005372:	4b36      	ldr	r3, [pc, #216]	; (800544c <UART_SetConfig+0x2d4>)
 8005374:	fba3 2302 	umull	r2, r3, r3, r2
 8005378:	095b      	lsrs	r3, r3, #5
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005380:	441c      	add	r4, r3
 8005382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005386:	2200      	movs	r2, #0
 8005388:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800538c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005390:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005394:	4642      	mov	r2, r8
 8005396:	464b      	mov	r3, r9
 8005398:	1891      	adds	r1, r2, r2
 800539a:	63b9      	str	r1, [r7, #56]	; 0x38
 800539c:	415b      	adcs	r3, r3
 800539e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053a4:	4641      	mov	r1, r8
 80053a6:	1851      	adds	r1, r2, r1
 80053a8:	6339      	str	r1, [r7, #48]	; 0x30
 80053aa:	4649      	mov	r1, r9
 80053ac:	414b      	adcs	r3, r1
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053bc:	4659      	mov	r1, fp
 80053be:	00cb      	lsls	r3, r1, #3
 80053c0:	4651      	mov	r1, sl
 80053c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053c6:	4651      	mov	r1, sl
 80053c8:	00ca      	lsls	r2, r1, #3
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	4642      	mov	r2, r8
 80053d2:	189b      	adds	r3, r3, r2
 80053d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053d8:	464b      	mov	r3, r9
 80053da:	460a      	mov	r2, r1
 80053dc:	eb42 0303 	adc.w	r3, r2, r3
 80053e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053f8:	460b      	mov	r3, r1
 80053fa:	18db      	adds	r3, r3, r3
 80053fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053fe:	4613      	mov	r3, r2
 8005400:	eb42 0303 	adc.w	r3, r2, r3
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005406:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800540a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800540e:	f7fa ff47 	bl	80002a0 <__aeabi_uldivmod>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <UART_SetConfig+0x2d4>)
 8005418:	fba3 1302 	umull	r1, r3, r3, r2
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	2164      	movs	r1, #100	; 0x64
 8005420:	fb01 f303 	mul.w	r3, r1, r3
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	3332      	adds	r3, #50	; 0x32
 800542a:	4a08      	ldr	r2, [pc, #32]	; (800544c <UART_SetConfig+0x2d4>)
 800542c:	fba2 2303 	umull	r2, r3, r2, r3
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	f003 0207 	and.w	r2, r3, #7
 8005436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4422      	add	r2, r4
 800543e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005440:	e105      	b.n	800564e <UART_SetConfig+0x4d6>
 8005442:	bf00      	nop
 8005444:	40011000 	.word	0x40011000
 8005448:	40011400 	.word	0x40011400
 800544c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005454:	2200      	movs	r2, #0
 8005456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800545a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800545e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005462:	4642      	mov	r2, r8
 8005464:	464b      	mov	r3, r9
 8005466:	1891      	adds	r1, r2, r2
 8005468:	6239      	str	r1, [r7, #32]
 800546a:	415b      	adcs	r3, r3
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
 800546e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005472:	4641      	mov	r1, r8
 8005474:	1854      	adds	r4, r2, r1
 8005476:	4649      	mov	r1, r9
 8005478:	eb43 0501 	adc.w	r5, r3, r1
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	00eb      	lsls	r3, r5, #3
 8005486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800548a:	00e2      	lsls	r2, r4, #3
 800548c:	4614      	mov	r4, r2
 800548e:	461d      	mov	r5, r3
 8005490:	4643      	mov	r3, r8
 8005492:	18e3      	adds	r3, r4, r3
 8005494:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005498:	464b      	mov	r3, r9
 800549a:	eb45 0303 	adc.w	r3, r5, r3
 800549e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054be:	4629      	mov	r1, r5
 80054c0:	008b      	lsls	r3, r1, #2
 80054c2:	4621      	mov	r1, r4
 80054c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c8:	4621      	mov	r1, r4
 80054ca:	008a      	lsls	r2, r1, #2
 80054cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054d0:	f7fa fee6 	bl	80002a0 <__aeabi_uldivmod>
 80054d4:	4602      	mov	r2, r0
 80054d6:	460b      	mov	r3, r1
 80054d8:	4b60      	ldr	r3, [pc, #384]	; (800565c <UART_SetConfig+0x4e4>)
 80054da:	fba3 2302 	umull	r2, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	011c      	lsls	r4, r3, #4
 80054e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054e6:	2200      	movs	r2, #0
 80054e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	1891      	adds	r1, r2, r2
 80054fa:	61b9      	str	r1, [r7, #24]
 80054fc:	415b      	adcs	r3, r3
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005504:	4641      	mov	r1, r8
 8005506:	1851      	adds	r1, r2, r1
 8005508:	6139      	str	r1, [r7, #16]
 800550a:	4649      	mov	r1, r9
 800550c:	414b      	adcs	r3, r1
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	f04f 0200 	mov.w	r2, #0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800551c:	4659      	mov	r1, fp
 800551e:	00cb      	lsls	r3, r1, #3
 8005520:	4651      	mov	r1, sl
 8005522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005526:	4651      	mov	r1, sl
 8005528:	00ca      	lsls	r2, r1, #3
 800552a:	4610      	mov	r0, r2
 800552c:	4619      	mov	r1, r3
 800552e:	4603      	mov	r3, r0
 8005530:	4642      	mov	r2, r8
 8005532:	189b      	adds	r3, r3, r2
 8005534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005538:	464b      	mov	r3, r9
 800553a:	460a      	mov	r2, r1
 800553c:	eb42 0303 	adc.w	r3, r2, r3
 8005540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	67bb      	str	r3, [r7, #120]	; 0x78
 800554e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800555c:	4649      	mov	r1, r9
 800555e:	008b      	lsls	r3, r1, #2
 8005560:	4641      	mov	r1, r8
 8005562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005566:	4641      	mov	r1, r8
 8005568:	008a      	lsls	r2, r1, #2
 800556a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800556e:	f7fa fe97 	bl	80002a0 <__aeabi_uldivmod>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4b39      	ldr	r3, [pc, #228]	; (800565c <UART_SetConfig+0x4e4>)
 8005578:	fba3 1302 	umull	r1, r3, r3, r2
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	2164      	movs	r1, #100	; 0x64
 8005580:	fb01 f303 	mul.w	r3, r1, r3
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	3332      	adds	r3, #50	; 0x32
 800558a:	4a34      	ldr	r2, [pc, #208]	; (800565c <UART_SetConfig+0x4e4>)
 800558c:	fba2 2303 	umull	r2, r3, r2, r3
 8005590:	095b      	lsrs	r3, r3, #5
 8005592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005596:	441c      	add	r4, r3
 8005598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559c:	2200      	movs	r2, #0
 800559e:	673b      	str	r3, [r7, #112]	; 0x70
 80055a0:	677a      	str	r2, [r7, #116]	; 0x74
 80055a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055a6:	4642      	mov	r2, r8
 80055a8:	464b      	mov	r3, r9
 80055aa:	1891      	adds	r1, r2, r2
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	415b      	adcs	r3, r3
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055b6:	4641      	mov	r1, r8
 80055b8:	1851      	adds	r1, r2, r1
 80055ba:	6039      	str	r1, [r7, #0]
 80055bc:	4649      	mov	r1, r9
 80055be:	414b      	adcs	r3, r1
 80055c0:	607b      	str	r3, [r7, #4]
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055ce:	4659      	mov	r1, fp
 80055d0:	00cb      	lsls	r3, r1, #3
 80055d2:	4651      	mov	r1, sl
 80055d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055d8:	4651      	mov	r1, sl
 80055da:	00ca      	lsls	r2, r1, #3
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	4603      	mov	r3, r0
 80055e2:	4642      	mov	r2, r8
 80055e4:	189b      	adds	r3, r3, r2
 80055e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80055e8:	464b      	mov	r3, r9
 80055ea:	460a      	mov	r2, r1
 80055ec:	eb42 0303 	adc.w	r3, r2, r3
 80055f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	663b      	str	r3, [r7, #96]	; 0x60
 80055fc:	667a      	str	r2, [r7, #100]	; 0x64
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800560a:	4649      	mov	r1, r9
 800560c:	008b      	lsls	r3, r1, #2
 800560e:	4641      	mov	r1, r8
 8005610:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005614:	4641      	mov	r1, r8
 8005616:	008a      	lsls	r2, r1, #2
 8005618:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800561c:	f7fa fe40 	bl	80002a0 <__aeabi_uldivmod>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4b0d      	ldr	r3, [pc, #52]	; (800565c <UART_SetConfig+0x4e4>)
 8005626:	fba3 1302 	umull	r1, r3, r3, r2
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	2164      	movs	r1, #100	; 0x64
 800562e:	fb01 f303 	mul.w	r3, r1, r3
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	3332      	adds	r3, #50	; 0x32
 8005638:	4a08      	ldr	r2, [pc, #32]	; (800565c <UART_SetConfig+0x4e4>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	f003 020f 	and.w	r2, r3, #15
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4422      	add	r2, r4
 800564c:	609a      	str	r2, [r3, #8]
}
 800564e:	bf00      	nop
 8005650:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005654:	46bd      	mov	sp, r7
 8005656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800565a:	bf00      	nop
 800565c:	51eb851f 	.word	0x51eb851f

08005660 <__errno>:
 8005660:	4b01      	ldr	r3, [pc, #4]	; (8005668 <__errno+0x8>)
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000140 	.word	0x20000140

0800566c <__libc_init_array>:
 800566c:	b570      	push	{r4, r5, r6, lr}
 800566e:	4d0d      	ldr	r5, [pc, #52]	; (80056a4 <__libc_init_array+0x38>)
 8005670:	4c0d      	ldr	r4, [pc, #52]	; (80056a8 <__libc_init_array+0x3c>)
 8005672:	1b64      	subs	r4, r4, r5
 8005674:	10a4      	asrs	r4, r4, #2
 8005676:	2600      	movs	r6, #0
 8005678:	42a6      	cmp	r6, r4
 800567a:	d109      	bne.n	8005690 <__libc_init_array+0x24>
 800567c:	4d0b      	ldr	r5, [pc, #44]	; (80056ac <__libc_init_array+0x40>)
 800567e:	4c0c      	ldr	r4, [pc, #48]	; (80056b0 <__libc_init_array+0x44>)
 8005680:	f000 fcae 	bl	8005fe0 <_init>
 8005684:	1b64      	subs	r4, r4, r5
 8005686:	10a4      	asrs	r4, r4, #2
 8005688:	2600      	movs	r6, #0
 800568a:	42a6      	cmp	r6, r4
 800568c:	d105      	bne.n	800569a <__libc_init_array+0x2e>
 800568e:	bd70      	pop	{r4, r5, r6, pc}
 8005690:	f855 3b04 	ldr.w	r3, [r5], #4
 8005694:	4798      	blx	r3
 8005696:	3601      	adds	r6, #1
 8005698:	e7ee      	b.n	8005678 <__libc_init_array+0xc>
 800569a:	f855 3b04 	ldr.w	r3, [r5], #4
 800569e:	4798      	blx	r3
 80056a0:	3601      	adds	r6, #1
 80056a2:	e7f2      	b.n	800568a <__libc_init_array+0x1e>
 80056a4:	08006150 	.word	0x08006150
 80056a8:	08006150 	.word	0x08006150
 80056ac:	08006150 	.word	0x08006150
 80056b0:	08006154 	.word	0x08006154

080056b4 <malloc>:
 80056b4:	4b02      	ldr	r3, [pc, #8]	; (80056c0 <malloc+0xc>)
 80056b6:	4601      	mov	r1, r0
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	f000 b877 	b.w	80057ac <_malloc_r>
 80056be:	bf00      	nop
 80056c0:	20000140 	.word	0x20000140

080056c4 <memset>:
 80056c4:	4402      	add	r2, r0
 80056c6:	4603      	mov	r3, r0
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d100      	bne.n	80056ce <memset+0xa>
 80056cc:	4770      	bx	lr
 80056ce:	f803 1b01 	strb.w	r1, [r3], #1
 80056d2:	e7f9      	b.n	80056c8 <memset+0x4>

080056d4 <_free_r>:
 80056d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056d6:	2900      	cmp	r1, #0
 80056d8:	d044      	beq.n	8005764 <_free_r+0x90>
 80056da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056de:	9001      	str	r0, [sp, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f1a1 0404 	sub.w	r4, r1, #4
 80056e6:	bfb8      	it	lt
 80056e8:	18e4      	addlt	r4, r4, r3
 80056ea:	f000 f91b 	bl	8005924 <__malloc_lock>
 80056ee:	4a1e      	ldr	r2, [pc, #120]	; (8005768 <_free_r+0x94>)
 80056f0:	9801      	ldr	r0, [sp, #4]
 80056f2:	6813      	ldr	r3, [r2, #0]
 80056f4:	b933      	cbnz	r3, 8005704 <_free_r+0x30>
 80056f6:	6063      	str	r3, [r4, #4]
 80056f8:	6014      	str	r4, [r2, #0]
 80056fa:	b003      	add	sp, #12
 80056fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005700:	f000 b916 	b.w	8005930 <__malloc_unlock>
 8005704:	42a3      	cmp	r3, r4
 8005706:	d908      	bls.n	800571a <_free_r+0x46>
 8005708:	6825      	ldr	r5, [r4, #0]
 800570a:	1961      	adds	r1, r4, r5
 800570c:	428b      	cmp	r3, r1
 800570e:	bf01      	itttt	eq
 8005710:	6819      	ldreq	r1, [r3, #0]
 8005712:	685b      	ldreq	r3, [r3, #4]
 8005714:	1949      	addeq	r1, r1, r5
 8005716:	6021      	streq	r1, [r4, #0]
 8005718:	e7ed      	b.n	80056f6 <_free_r+0x22>
 800571a:	461a      	mov	r2, r3
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	b10b      	cbz	r3, 8005724 <_free_r+0x50>
 8005720:	42a3      	cmp	r3, r4
 8005722:	d9fa      	bls.n	800571a <_free_r+0x46>
 8005724:	6811      	ldr	r1, [r2, #0]
 8005726:	1855      	adds	r5, r2, r1
 8005728:	42a5      	cmp	r5, r4
 800572a:	d10b      	bne.n	8005744 <_free_r+0x70>
 800572c:	6824      	ldr	r4, [r4, #0]
 800572e:	4421      	add	r1, r4
 8005730:	1854      	adds	r4, r2, r1
 8005732:	42a3      	cmp	r3, r4
 8005734:	6011      	str	r1, [r2, #0]
 8005736:	d1e0      	bne.n	80056fa <_free_r+0x26>
 8005738:	681c      	ldr	r4, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	6053      	str	r3, [r2, #4]
 800573e:	4421      	add	r1, r4
 8005740:	6011      	str	r1, [r2, #0]
 8005742:	e7da      	b.n	80056fa <_free_r+0x26>
 8005744:	d902      	bls.n	800574c <_free_r+0x78>
 8005746:	230c      	movs	r3, #12
 8005748:	6003      	str	r3, [r0, #0]
 800574a:	e7d6      	b.n	80056fa <_free_r+0x26>
 800574c:	6825      	ldr	r5, [r4, #0]
 800574e:	1961      	adds	r1, r4, r5
 8005750:	428b      	cmp	r3, r1
 8005752:	bf04      	itt	eq
 8005754:	6819      	ldreq	r1, [r3, #0]
 8005756:	685b      	ldreq	r3, [r3, #4]
 8005758:	6063      	str	r3, [r4, #4]
 800575a:	bf04      	itt	eq
 800575c:	1949      	addeq	r1, r1, r5
 800575e:	6021      	streq	r1, [r4, #0]
 8005760:	6054      	str	r4, [r2, #4]
 8005762:	e7ca      	b.n	80056fa <_free_r+0x26>
 8005764:	b003      	add	sp, #12
 8005766:	bd30      	pop	{r4, r5, pc}
 8005768:	200003c4 	.word	0x200003c4

0800576c <sbrk_aligned>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	4e0e      	ldr	r6, [pc, #56]	; (80057a8 <sbrk_aligned+0x3c>)
 8005770:	460c      	mov	r4, r1
 8005772:	6831      	ldr	r1, [r6, #0]
 8005774:	4605      	mov	r5, r0
 8005776:	b911      	cbnz	r1, 800577e <sbrk_aligned+0x12>
 8005778:	f000 f88c 	bl	8005894 <_sbrk_r>
 800577c:	6030      	str	r0, [r6, #0]
 800577e:	4621      	mov	r1, r4
 8005780:	4628      	mov	r0, r5
 8005782:	f000 f887 	bl	8005894 <_sbrk_r>
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	d00a      	beq.n	80057a0 <sbrk_aligned+0x34>
 800578a:	1cc4      	adds	r4, r0, #3
 800578c:	f024 0403 	bic.w	r4, r4, #3
 8005790:	42a0      	cmp	r0, r4
 8005792:	d007      	beq.n	80057a4 <sbrk_aligned+0x38>
 8005794:	1a21      	subs	r1, r4, r0
 8005796:	4628      	mov	r0, r5
 8005798:	f000 f87c 	bl	8005894 <_sbrk_r>
 800579c:	3001      	adds	r0, #1
 800579e:	d101      	bne.n	80057a4 <sbrk_aligned+0x38>
 80057a0:	f04f 34ff 	mov.w	r4, #4294967295
 80057a4:	4620      	mov	r0, r4
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	200003c8 	.word	0x200003c8

080057ac <_malloc_r>:
 80057ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057b0:	1ccd      	adds	r5, r1, #3
 80057b2:	f025 0503 	bic.w	r5, r5, #3
 80057b6:	3508      	adds	r5, #8
 80057b8:	2d0c      	cmp	r5, #12
 80057ba:	bf38      	it	cc
 80057bc:	250c      	movcc	r5, #12
 80057be:	2d00      	cmp	r5, #0
 80057c0:	4607      	mov	r7, r0
 80057c2:	db01      	blt.n	80057c8 <_malloc_r+0x1c>
 80057c4:	42a9      	cmp	r1, r5
 80057c6:	d905      	bls.n	80057d4 <_malloc_r+0x28>
 80057c8:	230c      	movs	r3, #12
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	2600      	movs	r6, #0
 80057ce:	4630      	mov	r0, r6
 80057d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d4:	4e2e      	ldr	r6, [pc, #184]	; (8005890 <_malloc_r+0xe4>)
 80057d6:	f000 f8a5 	bl	8005924 <__malloc_lock>
 80057da:	6833      	ldr	r3, [r6, #0]
 80057dc:	461c      	mov	r4, r3
 80057de:	bb34      	cbnz	r4, 800582e <_malloc_r+0x82>
 80057e0:	4629      	mov	r1, r5
 80057e2:	4638      	mov	r0, r7
 80057e4:	f7ff ffc2 	bl	800576c <sbrk_aligned>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	4604      	mov	r4, r0
 80057ec:	d14d      	bne.n	800588a <_malloc_r+0xde>
 80057ee:	6834      	ldr	r4, [r6, #0]
 80057f0:	4626      	mov	r6, r4
 80057f2:	2e00      	cmp	r6, #0
 80057f4:	d140      	bne.n	8005878 <_malloc_r+0xcc>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	4631      	mov	r1, r6
 80057fa:	4638      	mov	r0, r7
 80057fc:	eb04 0803 	add.w	r8, r4, r3
 8005800:	f000 f848 	bl	8005894 <_sbrk_r>
 8005804:	4580      	cmp	r8, r0
 8005806:	d13a      	bne.n	800587e <_malloc_r+0xd2>
 8005808:	6821      	ldr	r1, [r4, #0]
 800580a:	3503      	adds	r5, #3
 800580c:	1a6d      	subs	r5, r5, r1
 800580e:	f025 0503 	bic.w	r5, r5, #3
 8005812:	3508      	adds	r5, #8
 8005814:	2d0c      	cmp	r5, #12
 8005816:	bf38      	it	cc
 8005818:	250c      	movcc	r5, #12
 800581a:	4629      	mov	r1, r5
 800581c:	4638      	mov	r0, r7
 800581e:	f7ff ffa5 	bl	800576c <sbrk_aligned>
 8005822:	3001      	adds	r0, #1
 8005824:	d02b      	beq.n	800587e <_malloc_r+0xd2>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	442b      	add	r3, r5
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	e00e      	b.n	800584c <_malloc_r+0xa0>
 800582e:	6822      	ldr	r2, [r4, #0]
 8005830:	1b52      	subs	r2, r2, r5
 8005832:	d41e      	bmi.n	8005872 <_malloc_r+0xc6>
 8005834:	2a0b      	cmp	r2, #11
 8005836:	d916      	bls.n	8005866 <_malloc_r+0xba>
 8005838:	1961      	adds	r1, r4, r5
 800583a:	42a3      	cmp	r3, r4
 800583c:	6025      	str	r5, [r4, #0]
 800583e:	bf18      	it	ne
 8005840:	6059      	strne	r1, [r3, #4]
 8005842:	6863      	ldr	r3, [r4, #4]
 8005844:	bf08      	it	eq
 8005846:	6031      	streq	r1, [r6, #0]
 8005848:	5162      	str	r2, [r4, r5]
 800584a:	604b      	str	r3, [r1, #4]
 800584c:	4638      	mov	r0, r7
 800584e:	f104 060b 	add.w	r6, r4, #11
 8005852:	f000 f86d 	bl	8005930 <__malloc_unlock>
 8005856:	f026 0607 	bic.w	r6, r6, #7
 800585a:	1d23      	adds	r3, r4, #4
 800585c:	1af2      	subs	r2, r6, r3
 800585e:	d0b6      	beq.n	80057ce <_malloc_r+0x22>
 8005860:	1b9b      	subs	r3, r3, r6
 8005862:	50a3      	str	r3, [r4, r2]
 8005864:	e7b3      	b.n	80057ce <_malloc_r+0x22>
 8005866:	6862      	ldr	r2, [r4, #4]
 8005868:	42a3      	cmp	r3, r4
 800586a:	bf0c      	ite	eq
 800586c:	6032      	streq	r2, [r6, #0]
 800586e:	605a      	strne	r2, [r3, #4]
 8005870:	e7ec      	b.n	800584c <_malloc_r+0xa0>
 8005872:	4623      	mov	r3, r4
 8005874:	6864      	ldr	r4, [r4, #4]
 8005876:	e7b2      	b.n	80057de <_malloc_r+0x32>
 8005878:	4634      	mov	r4, r6
 800587a:	6876      	ldr	r6, [r6, #4]
 800587c:	e7b9      	b.n	80057f2 <_malloc_r+0x46>
 800587e:	230c      	movs	r3, #12
 8005880:	603b      	str	r3, [r7, #0]
 8005882:	4638      	mov	r0, r7
 8005884:	f000 f854 	bl	8005930 <__malloc_unlock>
 8005888:	e7a1      	b.n	80057ce <_malloc_r+0x22>
 800588a:	6025      	str	r5, [r4, #0]
 800588c:	e7de      	b.n	800584c <_malloc_r+0xa0>
 800588e:	bf00      	nop
 8005890:	200003c4 	.word	0x200003c4

08005894 <_sbrk_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4d06      	ldr	r5, [pc, #24]	; (80058b0 <_sbrk_r+0x1c>)
 8005898:	2300      	movs	r3, #0
 800589a:	4604      	mov	r4, r0
 800589c:	4608      	mov	r0, r1
 800589e:	602b      	str	r3, [r5, #0]
 80058a0:	f7fb fd50 	bl	8001344 <_sbrk>
 80058a4:	1c43      	adds	r3, r0, #1
 80058a6:	d102      	bne.n	80058ae <_sbrk_r+0x1a>
 80058a8:	682b      	ldr	r3, [r5, #0]
 80058aa:	b103      	cbz	r3, 80058ae <_sbrk_r+0x1a>
 80058ac:	6023      	str	r3, [r4, #0]
 80058ae:	bd38      	pop	{r3, r4, r5, pc}
 80058b0:	200003cc 	.word	0x200003cc

080058b4 <siprintf>:
 80058b4:	b40e      	push	{r1, r2, r3}
 80058b6:	b500      	push	{lr}
 80058b8:	b09c      	sub	sp, #112	; 0x70
 80058ba:	ab1d      	add	r3, sp, #116	; 0x74
 80058bc:	9002      	str	r0, [sp, #8]
 80058be:	9006      	str	r0, [sp, #24]
 80058c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058c4:	4809      	ldr	r0, [pc, #36]	; (80058ec <siprintf+0x38>)
 80058c6:	9107      	str	r1, [sp, #28]
 80058c8:	9104      	str	r1, [sp, #16]
 80058ca:	4909      	ldr	r1, [pc, #36]	; (80058f0 <siprintf+0x3c>)
 80058cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80058d0:	9105      	str	r1, [sp, #20]
 80058d2:	6800      	ldr	r0, [r0, #0]
 80058d4:	9301      	str	r3, [sp, #4]
 80058d6:	a902      	add	r1, sp, #8
 80058d8:	f000 f88c 	bl	80059f4 <_svfiprintf_r>
 80058dc:	9b02      	ldr	r3, [sp, #8]
 80058de:	2200      	movs	r2, #0
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	b01c      	add	sp, #112	; 0x70
 80058e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80058e8:	b003      	add	sp, #12
 80058ea:	4770      	bx	lr
 80058ec:	20000140 	.word	0x20000140
 80058f0:	ffff0208 	.word	0xffff0208

080058f4 <strcat>:
 80058f4:	b510      	push	{r4, lr}
 80058f6:	4602      	mov	r2, r0
 80058f8:	7814      	ldrb	r4, [r2, #0]
 80058fa:	4613      	mov	r3, r2
 80058fc:	3201      	adds	r2, #1
 80058fe:	2c00      	cmp	r4, #0
 8005900:	d1fa      	bne.n	80058f8 <strcat+0x4>
 8005902:	3b01      	subs	r3, #1
 8005904:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005908:	f803 2f01 	strb.w	r2, [r3, #1]!
 800590c:	2a00      	cmp	r2, #0
 800590e:	d1f9      	bne.n	8005904 <strcat+0x10>
 8005910:	bd10      	pop	{r4, pc}

08005912 <strcpy>:
 8005912:	4603      	mov	r3, r0
 8005914:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005918:	f803 2b01 	strb.w	r2, [r3], #1
 800591c:	2a00      	cmp	r2, #0
 800591e:	d1f9      	bne.n	8005914 <strcpy+0x2>
 8005920:	4770      	bx	lr
	...

08005924 <__malloc_lock>:
 8005924:	4801      	ldr	r0, [pc, #4]	; (800592c <__malloc_lock+0x8>)
 8005926:	f000 baf9 	b.w	8005f1c <__retarget_lock_acquire_recursive>
 800592a:	bf00      	nop
 800592c:	200003d0 	.word	0x200003d0

08005930 <__malloc_unlock>:
 8005930:	4801      	ldr	r0, [pc, #4]	; (8005938 <__malloc_unlock+0x8>)
 8005932:	f000 baf4 	b.w	8005f1e <__retarget_lock_release_recursive>
 8005936:	bf00      	nop
 8005938:	200003d0 	.word	0x200003d0

0800593c <__ssputs_r>:
 800593c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	688e      	ldr	r6, [r1, #8]
 8005942:	429e      	cmp	r6, r3
 8005944:	4682      	mov	sl, r0
 8005946:	460c      	mov	r4, r1
 8005948:	4690      	mov	r8, r2
 800594a:	461f      	mov	r7, r3
 800594c:	d838      	bhi.n	80059c0 <__ssputs_r+0x84>
 800594e:	898a      	ldrh	r2, [r1, #12]
 8005950:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005954:	d032      	beq.n	80059bc <__ssputs_r+0x80>
 8005956:	6825      	ldr	r5, [r4, #0]
 8005958:	6909      	ldr	r1, [r1, #16]
 800595a:	eba5 0901 	sub.w	r9, r5, r1
 800595e:	6965      	ldr	r5, [r4, #20]
 8005960:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005964:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005968:	3301      	adds	r3, #1
 800596a:	444b      	add	r3, r9
 800596c:	106d      	asrs	r5, r5, #1
 800596e:	429d      	cmp	r5, r3
 8005970:	bf38      	it	cc
 8005972:	461d      	movcc	r5, r3
 8005974:	0553      	lsls	r3, r2, #21
 8005976:	d531      	bpl.n	80059dc <__ssputs_r+0xa0>
 8005978:	4629      	mov	r1, r5
 800597a:	f7ff ff17 	bl	80057ac <_malloc_r>
 800597e:	4606      	mov	r6, r0
 8005980:	b950      	cbnz	r0, 8005998 <__ssputs_r+0x5c>
 8005982:	230c      	movs	r3, #12
 8005984:	f8ca 3000 	str.w	r3, [sl]
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800598e:	81a3      	strh	r3, [r4, #12]
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005998:	6921      	ldr	r1, [r4, #16]
 800599a:	464a      	mov	r2, r9
 800599c:	f000 fac0 	bl	8005f20 <memcpy>
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059aa:	81a3      	strh	r3, [r4, #12]
 80059ac:	6126      	str	r6, [r4, #16]
 80059ae:	6165      	str	r5, [r4, #20]
 80059b0:	444e      	add	r6, r9
 80059b2:	eba5 0509 	sub.w	r5, r5, r9
 80059b6:	6026      	str	r6, [r4, #0]
 80059b8:	60a5      	str	r5, [r4, #8]
 80059ba:	463e      	mov	r6, r7
 80059bc:	42be      	cmp	r6, r7
 80059be:	d900      	bls.n	80059c2 <__ssputs_r+0x86>
 80059c0:	463e      	mov	r6, r7
 80059c2:	6820      	ldr	r0, [r4, #0]
 80059c4:	4632      	mov	r2, r6
 80059c6:	4641      	mov	r1, r8
 80059c8:	f000 fab8 	bl	8005f3c <memmove>
 80059cc:	68a3      	ldr	r3, [r4, #8]
 80059ce:	1b9b      	subs	r3, r3, r6
 80059d0:	60a3      	str	r3, [r4, #8]
 80059d2:	6823      	ldr	r3, [r4, #0]
 80059d4:	4433      	add	r3, r6
 80059d6:	6023      	str	r3, [r4, #0]
 80059d8:	2000      	movs	r0, #0
 80059da:	e7db      	b.n	8005994 <__ssputs_r+0x58>
 80059dc:	462a      	mov	r2, r5
 80059de:	f000 fac7 	bl	8005f70 <_realloc_r>
 80059e2:	4606      	mov	r6, r0
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d1e1      	bne.n	80059ac <__ssputs_r+0x70>
 80059e8:	6921      	ldr	r1, [r4, #16]
 80059ea:	4650      	mov	r0, sl
 80059ec:	f7ff fe72 	bl	80056d4 <_free_r>
 80059f0:	e7c7      	b.n	8005982 <__ssputs_r+0x46>
	...

080059f4 <_svfiprintf_r>:
 80059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f8:	4698      	mov	r8, r3
 80059fa:	898b      	ldrh	r3, [r1, #12]
 80059fc:	061b      	lsls	r3, r3, #24
 80059fe:	b09d      	sub	sp, #116	; 0x74
 8005a00:	4607      	mov	r7, r0
 8005a02:	460d      	mov	r5, r1
 8005a04:	4614      	mov	r4, r2
 8005a06:	d50e      	bpl.n	8005a26 <_svfiprintf_r+0x32>
 8005a08:	690b      	ldr	r3, [r1, #16]
 8005a0a:	b963      	cbnz	r3, 8005a26 <_svfiprintf_r+0x32>
 8005a0c:	2140      	movs	r1, #64	; 0x40
 8005a0e:	f7ff fecd 	bl	80057ac <_malloc_r>
 8005a12:	6028      	str	r0, [r5, #0]
 8005a14:	6128      	str	r0, [r5, #16]
 8005a16:	b920      	cbnz	r0, 8005a22 <_svfiprintf_r+0x2e>
 8005a18:	230c      	movs	r3, #12
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a20:	e0d1      	b.n	8005bc6 <_svfiprintf_r+0x1d2>
 8005a22:	2340      	movs	r3, #64	; 0x40
 8005a24:	616b      	str	r3, [r5, #20]
 8005a26:	2300      	movs	r3, #0
 8005a28:	9309      	str	r3, [sp, #36]	; 0x24
 8005a2a:	2320      	movs	r3, #32
 8005a2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a34:	2330      	movs	r3, #48	; 0x30
 8005a36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005be0 <_svfiprintf_r+0x1ec>
 8005a3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a3e:	f04f 0901 	mov.w	r9, #1
 8005a42:	4623      	mov	r3, r4
 8005a44:	469a      	mov	sl, r3
 8005a46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a4a:	b10a      	cbz	r2, 8005a50 <_svfiprintf_r+0x5c>
 8005a4c:	2a25      	cmp	r2, #37	; 0x25
 8005a4e:	d1f9      	bne.n	8005a44 <_svfiprintf_r+0x50>
 8005a50:	ebba 0b04 	subs.w	fp, sl, r4
 8005a54:	d00b      	beq.n	8005a6e <_svfiprintf_r+0x7a>
 8005a56:	465b      	mov	r3, fp
 8005a58:	4622      	mov	r2, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	f7ff ff6d 	bl	800593c <__ssputs_r>
 8005a62:	3001      	adds	r0, #1
 8005a64:	f000 80aa 	beq.w	8005bbc <_svfiprintf_r+0x1c8>
 8005a68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a6a:	445a      	add	r2, fp
 8005a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 80a2 	beq.w	8005bbc <_svfiprintf_r+0x1c8>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a82:	f10a 0a01 	add.w	sl, sl, #1
 8005a86:	9304      	str	r3, [sp, #16]
 8005a88:	9307      	str	r3, [sp, #28]
 8005a8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a8e:	931a      	str	r3, [sp, #104]	; 0x68
 8005a90:	4654      	mov	r4, sl
 8005a92:	2205      	movs	r2, #5
 8005a94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a98:	4851      	ldr	r0, [pc, #324]	; (8005be0 <_svfiprintf_r+0x1ec>)
 8005a9a:	f7fa fbb1 	bl	8000200 <memchr>
 8005a9e:	9a04      	ldr	r2, [sp, #16]
 8005aa0:	b9d8      	cbnz	r0, 8005ada <_svfiprintf_r+0xe6>
 8005aa2:	06d0      	lsls	r0, r2, #27
 8005aa4:	bf44      	itt	mi
 8005aa6:	2320      	movmi	r3, #32
 8005aa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aac:	0711      	lsls	r1, r2, #28
 8005aae:	bf44      	itt	mi
 8005ab0:	232b      	movmi	r3, #43	; 0x2b
 8005ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8005aba:	2b2a      	cmp	r3, #42	; 0x2a
 8005abc:	d015      	beq.n	8005aea <_svfiprintf_r+0xf6>
 8005abe:	9a07      	ldr	r2, [sp, #28]
 8005ac0:	4654      	mov	r4, sl
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	f04f 0c0a 	mov.w	ip, #10
 8005ac8:	4621      	mov	r1, r4
 8005aca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ace:	3b30      	subs	r3, #48	; 0x30
 8005ad0:	2b09      	cmp	r3, #9
 8005ad2:	d94e      	bls.n	8005b72 <_svfiprintf_r+0x17e>
 8005ad4:	b1b0      	cbz	r0, 8005b04 <_svfiprintf_r+0x110>
 8005ad6:	9207      	str	r2, [sp, #28]
 8005ad8:	e014      	b.n	8005b04 <_svfiprintf_r+0x110>
 8005ada:	eba0 0308 	sub.w	r3, r0, r8
 8005ade:	fa09 f303 	lsl.w	r3, r9, r3
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	46a2      	mov	sl, r4
 8005ae8:	e7d2      	b.n	8005a90 <_svfiprintf_r+0x9c>
 8005aea:	9b03      	ldr	r3, [sp, #12]
 8005aec:	1d19      	adds	r1, r3, #4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	9103      	str	r1, [sp, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bfbb      	ittet	lt
 8005af6:	425b      	neglt	r3, r3
 8005af8:	f042 0202 	orrlt.w	r2, r2, #2
 8005afc:	9307      	strge	r3, [sp, #28]
 8005afe:	9307      	strlt	r3, [sp, #28]
 8005b00:	bfb8      	it	lt
 8005b02:	9204      	strlt	r2, [sp, #16]
 8005b04:	7823      	ldrb	r3, [r4, #0]
 8005b06:	2b2e      	cmp	r3, #46	; 0x2e
 8005b08:	d10c      	bne.n	8005b24 <_svfiprintf_r+0x130>
 8005b0a:	7863      	ldrb	r3, [r4, #1]
 8005b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0e:	d135      	bne.n	8005b7c <_svfiprintf_r+0x188>
 8005b10:	9b03      	ldr	r3, [sp, #12]
 8005b12:	1d1a      	adds	r2, r3, #4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	9203      	str	r2, [sp, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	bfb8      	it	lt
 8005b1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b20:	3402      	adds	r4, #2
 8005b22:	9305      	str	r3, [sp, #20]
 8005b24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005bf0 <_svfiprintf_r+0x1fc>
 8005b28:	7821      	ldrb	r1, [r4, #0]
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	4650      	mov	r0, sl
 8005b2e:	f7fa fb67 	bl	8000200 <memchr>
 8005b32:	b140      	cbz	r0, 8005b46 <_svfiprintf_r+0x152>
 8005b34:	2340      	movs	r3, #64	; 0x40
 8005b36:	eba0 000a 	sub.w	r0, r0, sl
 8005b3a:	fa03 f000 	lsl.w	r0, r3, r0
 8005b3e:	9b04      	ldr	r3, [sp, #16]
 8005b40:	4303      	orrs	r3, r0
 8005b42:	3401      	adds	r4, #1
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b4a:	4826      	ldr	r0, [pc, #152]	; (8005be4 <_svfiprintf_r+0x1f0>)
 8005b4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b50:	2206      	movs	r2, #6
 8005b52:	f7fa fb55 	bl	8000200 <memchr>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d038      	beq.n	8005bcc <_svfiprintf_r+0x1d8>
 8005b5a:	4b23      	ldr	r3, [pc, #140]	; (8005be8 <_svfiprintf_r+0x1f4>)
 8005b5c:	bb1b      	cbnz	r3, 8005ba6 <_svfiprintf_r+0x1b2>
 8005b5e:	9b03      	ldr	r3, [sp, #12]
 8005b60:	3307      	adds	r3, #7
 8005b62:	f023 0307 	bic.w	r3, r3, #7
 8005b66:	3308      	adds	r3, #8
 8005b68:	9303      	str	r3, [sp, #12]
 8005b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6c:	4433      	add	r3, r6
 8005b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b70:	e767      	b.n	8005a42 <_svfiprintf_r+0x4e>
 8005b72:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b76:	460c      	mov	r4, r1
 8005b78:	2001      	movs	r0, #1
 8005b7a:	e7a5      	b.n	8005ac8 <_svfiprintf_r+0xd4>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	3401      	adds	r4, #1
 8005b80:	9305      	str	r3, [sp, #20]
 8005b82:	4619      	mov	r1, r3
 8005b84:	f04f 0c0a 	mov.w	ip, #10
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b8e:	3a30      	subs	r2, #48	; 0x30
 8005b90:	2a09      	cmp	r2, #9
 8005b92:	d903      	bls.n	8005b9c <_svfiprintf_r+0x1a8>
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0c5      	beq.n	8005b24 <_svfiprintf_r+0x130>
 8005b98:	9105      	str	r1, [sp, #20]
 8005b9a:	e7c3      	b.n	8005b24 <_svfiprintf_r+0x130>
 8005b9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e7f0      	b.n	8005b88 <_svfiprintf_r+0x194>
 8005ba6:	ab03      	add	r3, sp, #12
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	462a      	mov	r2, r5
 8005bac:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <_svfiprintf_r+0x1f8>)
 8005bae:	a904      	add	r1, sp, #16
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	f3af 8000 	nop.w
 8005bb6:	1c42      	adds	r2, r0, #1
 8005bb8:	4606      	mov	r6, r0
 8005bba:	d1d6      	bne.n	8005b6a <_svfiprintf_r+0x176>
 8005bbc:	89ab      	ldrh	r3, [r5, #12]
 8005bbe:	065b      	lsls	r3, r3, #25
 8005bc0:	f53f af2c 	bmi.w	8005a1c <_svfiprintf_r+0x28>
 8005bc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bc6:	b01d      	add	sp, #116	; 0x74
 8005bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bcc:	ab03      	add	r3, sp, #12
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	462a      	mov	r2, r5
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <_svfiprintf_r+0x1f8>)
 8005bd4:	a904      	add	r1, sp, #16
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	f000 f87a 	bl	8005cd0 <_printf_i>
 8005bdc:	e7eb      	b.n	8005bb6 <_svfiprintf_r+0x1c2>
 8005bde:	bf00      	nop
 8005be0:	08006114 	.word	0x08006114
 8005be4:	0800611e 	.word	0x0800611e
 8005be8:	00000000 	.word	0x00000000
 8005bec:	0800593d 	.word	0x0800593d
 8005bf0:	0800611a 	.word	0x0800611a

08005bf4 <_printf_common>:
 8005bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	4699      	mov	r9, r3
 8005bfc:	688a      	ldr	r2, [r1, #8]
 8005bfe:	690b      	ldr	r3, [r1, #16]
 8005c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c04:	4293      	cmp	r3, r2
 8005c06:	bfb8      	it	lt
 8005c08:	4613      	movlt	r3, r2
 8005c0a:	6033      	str	r3, [r6, #0]
 8005c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c10:	4607      	mov	r7, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	b10a      	cbz	r2, 8005c1a <_printf_common+0x26>
 8005c16:	3301      	adds	r3, #1
 8005c18:	6033      	str	r3, [r6, #0]
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	0699      	lsls	r1, r3, #26
 8005c1e:	bf42      	ittt	mi
 8005c20:	6833      	ldrmi	r3, [r6, #0]
 8005c22:	3302      	addmi	r3, #2
 8005c24:	6033      	strmi	r3, [r6, #0]
 8005c26:	6825      	ldr	r5, [r4, #0]
 8005c28:	f015 0506 	ands.w	r5, r5, #6
 8005c2c:	d106      	bne.n	8005c3c <_printf_common+0x48>
 8005c2e:	f104 0a19 	add.w	sl, r4, #25
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	6832      	ldr	r2, [r6, #0]
 8005c36:	1a9b      	subs	r3, r3, r2
 8005c38:	42ab      	cmp	r3, r5
 8005c3a:	dc26      	bgt.n	8005c8a <_printf_common+0x96>
 8005c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c40:	1e13      	subs	r3, r2, #0
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	bf18      	it	ne
 8005c46:	2301      	movne	r3, #1
 8005c48:	0692      	lsls	r2, r2, #26
 8005c4a:	d42b      	bmi.n	8005ca4 <_printf_common+0xb0>
 8005c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c50:	4649      	mov	r1, r9
 8005c52:	4638      	mov	r0, r7
 8005c54:	47c0      	blx	r8
 8005c56:	3001      	adds	r0, #1
 8005c58:	d01e      	beq.n	8005c98 <_printf_common+0xa4>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	68e5      	ldr	r5, [r4, #12]
 8005c5e:	6832      	ldr	r2, [r6, #0]
 8005c60:	f003 0306 	and.w	r3, r3, #6
 8005c64:	2b04      	cmp	r3, #4
 8005c66:	bf08      	it	eq
 8005c68:	1aad      	subeq	r5, r5, r2
 8005c6a:	68a3      	ldr	r3, [r4, #8]
 8005c6c:	6922      	ldr	r2, [r4, #16]
 8005c6e:	bf0c      	ite	eq
 8005c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c74:	2500      	movne	r5, #0
 8005c76:	4293      	cmp	r3, r2
 8005c78:	bfc4      	itt	gt
 8005c7a:	1a9b      	subgt	r3, r3, r2
 8005c7c:	18ed      	addgt	r5, r5, r3
 8005c7e:	2600      	movs	r6, #0
 8005c80:	341a      	adds	r4, #26
 8005c82:	42b5      	cmp	r5, r6
 8005c84:	d11a      	bne.n	8005cbc <_printf_common+0xc8>
 8005c86:	2000      	movs	r0, #0
 8005c88:	e008      	b.n	8005c9c <_printf_common+0xa8>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	4652      	mov	r2, sl
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4638      	mov	r0, r7
 8005c92:	47c0      	blx	r8
 8005c94:	3001      	adds	r0, #1
 8005c96:	d103      	bne.n	8005ca0 <_printf_common+0xac>
 8005c98:	f04f 30ff 	mov.w	r0, #4294967295
 8005c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca0:	3501      	adds	r5, #1
 8005ca2:	e7c6      	b.n	8005c32 <_printf_common+0x3e>
 8005ca4:	18e1      	adds	r1, r4, r3
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	2030      	movs	r0, #48	; 0x30
 8005caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cae:	4422      	add	r2, r4
 8005cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cb8:	3302      	adds	r3, #2
 8005cba:	e7c7      	b.n	8005c4c <_printf_common+0x58>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	4622      	mov	r2, r4
 8005cc0:	4649      	mov	r1, r9
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	47c0      	blx	r8
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d0e6      	beq.n	8005c98 <_printf_common+0xa4>
 8005cca:	3601      	adds	r6, #1
 8005ccc:	e7d9      	b.n	8005c82 <_printf_common+0x8e>
	...

08005cd0 <_printf_i>:
 8005cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd4:	7e0f      	ldrb	r7, [r1, #24]
 8005cd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cd8:	2f78      	cmp	r7, #120	; 0x78
 8005cda:	4691      	mov	r9, r2
 8005cdc:	4680      	mov	r8, r0
 8005cde:	460c      	mov	r4, r1
 8005ce0:	469a      	mov	sl, r3
 8005ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ce6:	d807      	bhi.n	8005cf8 <_printf_i+0x28>
 8005ce8:	2f62      	cmp	r7, #98	; 0x62
 8005cea:	d80a      	bhi.n	8005d02 <_printf_i+0x32>
 8005cec:	2f00      	cmp	r7, #0
 8005cee:	f000 80d8 	beq.w	8005ea2 <_printf_i+0x1d2>
 8005cf2:	2f58      	cmp	r7, #88	; 0x58
 8005cf4:	f000 80a3 	beq.w	8005e3e <_printf_i+0x16e>
 8005cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d00:	e03a      	b.n	8005d78 <_printf_i+0xa8>
 8005d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d06:	2b15      	cmp	r3, #21
 8005d08:	d8f6      	bhi.n	8005cf8 <_printf_i+0x28>
 8005d0a:	a101      	add	r1, pc, #4	; (adr r1, 8005d10 <_printf_i+0x40>)
 8005d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d10:	08005d69 	.word	0x08005d69
 8005d14:	08005d7d 	.word	0x08005d7d
 8005d18:	08005cf9 	.word	0x08005cf9
 8005d1c:	08005cf9 	.word	0x08005cf9
 8005d20:	08005cf9 	.word	0x08005cf9
 8005d24:	08005cf9 	.word	0x08005cf9
 8005d28:	08005d7d 	.word	0x08005d7d
 8005d2c:	08005cf9 	.word	0x08005cf9
 8005d30:	08005cf9 	.word	0x08005cf9
 8005d34:	08005cf9 	.word	0x08005cf9
 8005d38:	08005cf9 	.word	0x08005cf9
 8005d3c:	08005e89 	.word	0x08005e89
 8005d40:	08005dad 	.word	0x08005dad
 8005d44:	08005e6b 	.word	0x08005e6b
 8005d48:	08005cf9 	.word	0x08005cf9
 8005d4c:	08005cf9 	.word	0x08005cf9
 8005d50:	08005eab 	.word	0x08005eab
 8005d54:	08005cf9 	.word	0x08005cf9
 8005d58:	08005dad 	.word	0x08005dad
 8005d5c:	08005cf9 	.word	0x08005cf9
 8005d60:	08005cf9 	.word	0x08005cf9
 8005d64:	08005e73 	.word	0x08005e73
 8005d68:	682b      	ldr	r3, [r5, #0]
 8005d6a:	1d1a      	adds	r2, r3, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	602a      	str	r2, [r5, #0]
 8005d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e0a3      	b.n	8005ec4 <_printf_i+0x1f4>
 8005d7c:	6820      	ldr	r0, [r4, #0]
 8005d7e:	6829      	ldr	r1, [r5, #0]
 8005d80:	0606      	lsls	r6, r0, #24
 8005d82:	f101 0304 	add.w	r3, r1, #4
 8005d86:	d50a      	bpl.n	8005d9e <_printf_i+0xce>
 8005d88:	680e      	ldr	r6, [r1, #0]
 8005d8a:	602b      	str	r3, [r5, #0]
 8005d8c:	2e00      	cmp	r6, #0
 8005d8e:	da03      	bge.n	8005d98 <_printf_i+0xc8>
 8005d90:	232d      	movs	r3, #45	; 0x2d
 8005d92:	4276      	negs	r6, r6
 8005d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d98:	485e      	ldr	r0, [pc, #376]	; (8005f14 <_printf_i+0x244>)
 8005d9a:	230a      	movs	r3, #10
 8005d9c:	e019      	b.n	8005dd2 <_printf_i+0x102>
 8005d9e:	680e      	ldr	r6, [r1, #0]
 8005da0:	602b      	str	r3, [r5, #0]
 8005da2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005da6:	bf18      	it	ne
 8005da8:	b236      	sxthne	r6, r6
 8005daa:	e7ef      	b.n	8005d8c <_printf_i+0xbc>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	6820      	ldr	r0, [r4, #0]
 8005db0:	1d19      	adds	r1, r3, #4
 8005db2:	6029      	str	r1, [r5, #0]
 8005db4:	0601      	lsls	r1, r0, #24
 8005db6:	d501      	bpl.n	8005dbc <_printf_i+0xec>
 8005db8:	681e      	ldr	r6, [r3, #0]
 8005dba:	e002      	b.n	8005dc2 <_printf_i+0xf2>
 8005dbc:	0646      	lsls	r6, r0, #25
 8005dbe:	d5fb      	bpl.n	8005db8 <_printf_i+0xe8>
 8005dc0:	881e      	ldrh	r6, [r3, #0]
 8005dc2:	4854      	ldr	r0, [pc, #336]	; (8005f14 <_printf_i+0x244>)
 8005dc4:	2f6f      	cmp	r7, #111	; 0x6f
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2308      	moveq	r3, #8
 8005dca:	230a      	movne	r3, #10
 8005dcc:	2100      	movs	r1, #0
 8005dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dd2:	6865      	ldr	r5, [r4, #4]
 8005dd4:	60a5      	str	r5, [r4, #8]
 8005dd6:	2d00      	cmp	r5, #0
 8005dd8:	bfa2      	ittt	ge
 8005dda:	6821      	ldrge	r1, [r4, #0]
 8005ddc:	f021 0104 	bicge.w	r1, r1, #4
 8005de0:	6021      	strge	r1, [r4, #0]
 8005de2:	b90e      	cbnz	r6, 8005de8 <_printf_i+0x118>
 8005de4:	2d00      	cmp	r5, #0
 8005de6:	d04d      	beq.n	8005e84 <_printf_i+0x1b4>
 8005de8:	4615      	mov	r5, r2
 8005dea:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dee:	fb03 6711 	mls	r7, r3, r1, r6
 8005df2:	5dc7      	ldrb	r7, [r0, r7]
 8005df4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005df8:	4637      	mov	r7, r6
 8005dfa:	42bb      	cmp	r3, r7
 8005dfc:	460e      	mov	r6, r1
 8005dfe:	d9f4      	bls.n	8005dea <_printf_i+0x11a>
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d10b      	bne.n	8005e1c <_printf_i+0x14c>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	07de      	lsls	r6, r3, #31
 8005e08:	d508      	bpl.n	8005e1c <_printf_i+0x14c>
 8005e0a:	6923      	ldr	r3, [r4, #16]
 8005e0c:	6861      	ldr	r1, [r4, #4]
 8005e0e:	4299      	cmp	r1, r3
 8005e10:	bfde      	ittt	le
 8005e12:	2330      	movle	r3, #48	; 0x30
 8005e14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e1c:	1b52      	subs	r2, r2, r5
 8005e1e:	6122      	str	r2, [r4, #16]
 8005e20:	f8cd a000 	str.w	sl, [sp]
 8005e24:	464b      	mov	r3, r9
 8005e26:	aa03      	add	r2, sp, #12
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	f7ff fee2 	bl	8005bf4 <_printf_common>
 8005e30:	3001      	adds	r0, #1
 8005e32:	d14c      	bne.n	8005ece <_printf_i+0x1fe>
 8005e34:	f04f 30ff 	mov.w	r0, #4294967295
 8005e38:	b004      	add	sp, #16
 8005e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3e:	4835      	ldr	r0, [pc, #212]	; (8005f14 <_printf_i+0x244>)
 8005e40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e44:	6829      	ldr	r1, [r5, #0]
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e4c:	6029      	str	r1, [r5, #0]
 8005e4e:	061d      	lsls	r5, r3, #24
 8005e50:	d514      	bpl.n	8005e7c <_printf_i+0x1ac>
 8005e52:	07df      	lsls	r7, r3, #31
 8005e54:	bf44      	itt	mi
 8005e56:	f043 0320 	orrmi.w	r3, r3, #32
 8005e5a:	6023      	strmi	r3, [r4, #0]
 8005e5c:	b91e      	cbnz	r6, 8005e66 <_printf_i+0x196>
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	f023 0320 	bic.w	r3, r3, #32
 8005e64:	6023      	str	r3, [r4, #0]
 8005e66:	2310      	movs	r3, #16
 8005e68:	e7b0      	b.n	8005dcc <_printf_i+0xfc>
 8005e6a:	6823      	ldr	r3, [r4, #0]
 8005e6c:	f043 0320 	orr.w	r3, r3, #32
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	2378      	movs	r3, #120	; 0x78
 8005e74:	4828      	ldr	r0, [pc, #160]	; (8005f18 <_printf_i+0x248>)
 8005e76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e7a:	e7e3      	b.n	8005e44 <_printf_i+0x174>
 8005e7c:	0659      	lsls	r1, r3, #25
 8005e7e:	bf48      	it	mi
 8005e80:	b2b6      	uxthmi	r6, r6
 8005e82:	e7e6      	b.n	8005e52 <_printf_i+0x182>
 8005e84:	4615      	mov	r5, r2
 8005e86:	e7bb      	b.n	8005e00 <_printf_i+0x130>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	6826      	ldr	r6, [r4, #0]
 8005e8c:	6961      	ldr	r1, [r4, #20]
 8005e8e:	1d18      	adds	r0, r3, #4
 8005e90:	6028      	str	r0, [r5, #0]
 8005e92:	0635      	lsls	r5, r6, #24
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	d501      	bpl.n	8005e9c <_printf_i+0x1cc>
 8005e98:	6019      	str	r1, [r3, #0]
 8005e9a:	e002      	b.n	8005ea2 <_printf_i+0x1d2>
 8005e9c:	0670      	lsls	r0, r6, #25
 8005e9e:	d5fb      	bpl.n	8005e98 <_printf_i+0x1c8>
 8005ea0:	8019      	strh	r1, [r3, #0]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	6123      	str	r3, [r4, #16]
 8005ea6:	4615      	mov	r5, r2
 8005ea8:	e7ba      	b.n	8005e20 <_printf_i+0x150>
 8005eaa:	682b      	ldr	r3, [r5, #0]
 8005eac:	1d1a      	adds	r2, r3, #4
 8005eae:	602a      	str	r2, [r5, #0]
 8005eb0:	681d      	ldr	r5, [r3, #0]
 8005eb2:	6862      	ldr	r2, [r4, #4]
 8005eb4:	2100      	movs	r1, #0
 8005eb6:	4628      	mov	r0, r5
 8005eb8:	f7fa f9a2 	bl	8000200 <memchr>
 8005ebc:	b108      	cbz	r0, 8005ec2 <_printf_i+0x1f2>
 8005ebe:	1b40      	subs	r0, r0, r5
 8005ec0:	6060      	str	r0, [r4, #4]
 8005ec2:	6863      	ldr	r3, [r4, #4]
 8005ec4:	6123      	str	r3, [r4, #16]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ecc:	e7a8      	b.n	8005e20 <_printf_i+0x150>
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	47d0      	blx	sl
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d0ab      	beq.n	8005e34 <_printf_i+0x164>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	079b      	lsls	r3, r3, #30
 8005ee0:	d413      	bmi.n	8005f0a <_printf_i+0x23a>
 8005ee2:	68e0      	ldr	r0, [r4, #12]
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	4298      	cmp	r0, r3
 8005ee8:	bfb8      	it	lt
 8005eea:	4618      	movlt	r0, r3
 8005eec:	e7a4      	b.n	8005e38 <_printf_i+0x168>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	47d0      	blx	sl
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d09b      	beq.n	8005e34 <_printf_i+0x164>
 8005efc:	3501      	adds	r5, #1
 8005efe:	68e3      	ldr	r3, [r4, #12]
 8005f00:	9903      	ldr	r1, [sp, #12]
 8005f02:	1a5b      	subs	r3, r3, r1
 8005f04:	42ab      	cmp	r3, r5
 8005f06:	dcf2      	bgt.n	8005eee <_printf_i+0x21e>
 8005f08:	e7eb      	b.n	8005ee2 <_printf_i+0x212>
 8005f0a:	2500      	movs	r5, #0
 8005f0c:	f104 0619 	add.w	r6, r4, #25
 8005f10:	e7f5      	b.n	8005efe <_printf_i+0x22e>
 8005f12:	bf00      	nop
 8005f14:	08006125 	.word	0x08006125
 8005f18:	08006136 	.word	0x08006136

08005f1c <__retarget_lock_acquire_recursive>:
 8005f1c:	4770      	bx	lr

08005f1e <__retarget_lock_release_recursive>:
 8005f1e:	4770      	bx	lr

08005f20 <memcpy>:
 8005f20:	440a      	add	r2, r1
 8005f22:	4291      	cmp	r1, r2
 8005f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f28:	d100      	bne.n	8005f2c <memcpy+0xc>
 8005f2a:	4770      	bx	lr
 8005f2c:	b510      	push	{r4, lr}
 8005f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f36:	4291      	cmp	r1, r2
 8005f38:	d1f9      	bne.n	8005f2e <memcpy+0xe>
 8005f3a:	bd10      	pop	{r4, pc}

08005f3c <memmove>:
 8005f3c:	4288      	cmp	r0, r1
 8005f3e:	b510      	push	{r4, lr}
 8005f40:	eb01 0402 	add.w	r4, r1, r2
 8005f44:	d902      	bls.n	8005f4c <memmove+0x10>
 8005f46:	4284      	cmp	r4, r0
 8005f48:	4623      	mov	r3, r4
 8005f4a:	d807      	bhi.n	8005f5c <memmove+0x20>
 8005f4c:	1e43      	subs	r3, r0, #1
 8005f4e:	42a1      	cmp	r1, r4
 8005f50:	d008      	beq.n	8005f64 <memmove+0x28>
 8005f52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f5a:	e7f8      	b.n	8005f4e <memmove+0x12>
 8005f5c:	4402      	add	r2, r0
 8005f5e:	4601      	mov	r1, r0
 8005f60:	428a      	cmp	r2, r1
 8005f62:	d100      	bne.n	8005f66 <memmove+0x2a>
 8005f64:	bd10      	pop	{r4, pc}
 8005f66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f6e:	e7f7      	b.n	8005f60 <memmove+0x24>

08005f70 <_realloc_r>:
 8005f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f74:	4680      	mov	r8, r0
 8005f76:	4614      	mov	r4, r2
 8005f78:	460e      	mov	r6, r1
 8005f7a:	b921      	cbnz	r1, 8005f86 <_realloc_r+0x16>
 8005f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f80:	4611      	mov	r1, r2
 8005f82:	f7ff bc13 	b.w	80057ac <_malloc_r>
 8005f86:	b92a      	cbnz	r2, 8005f94 <_realloc_r+0x24>
 8005f88:	f7ff fba4 	bl	80056d4 <_free_r>
 8005f8c:	4625      	mov	r5, r4
 8005f8e:	4628      	mov	r0, r5
 8005f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f94:	f000 f81b 	bl	8005fce <_malloc_usable_size_r>
 8005f98:	4284      	cmp	r4, r0
 8005f9a:	4607      	mov	r7, r0
 8005f9c:	d802      	bhi.n	8005fa4 <_realloc_r+0x34>
 8005f9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005fa2:	d812      	bhi.n	8005fca <_realloc_r+0x5a>
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff fc00 	bl	80057ac <_malloc_r>
 8005fac:	4605      	mov	r5, r0
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d0ed      	beq.n	8005f8e <_realloc_r+0x1e>
 8005fb2:	42bc      	cmp	r4, r7
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	bf28      	it	cs
 8005fba:	463a      	movcs	r2, r7
 8005fbc:	f7ff ffb0 	bl	8005f20 <memcpy>
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f7ff fb86 	bl	80056d4 <_free_r>
 8005fc8:	e7e1      	b.n	8005f8e <_realloc_r+0x1e>
 8005fca:	4635      	mov	r5, r6
 8005fcc:	e7df      	b.n	8005f8e <_realloc_r+0x1e>

08005fce <_malloc_usable_size_r>:
 8005fce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fd2:	1f18      	subs	r0, r3, #4
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	bfbc      	itt	lt
 8005fd8:	580b      	ldrlt	r3, [r1, r0]
 8005fda:	18c0      	addlt	r0, r0, r3
 8005fdc:	4770      	bx	lr
	...

08005fe0 <_init>:
 8005fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fe2:	bf00      	nop
 8005fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe6:	bc08      	pop	{r3}
 8005fe8:	469e      	mov	lr, r3
 8005fea:	4770      	bx	lr

08005fec <_fini>:
 8005fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fee:	bf00      	nop
 8005ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff2:	bc08      	pop	{r3}
 8005ff4:	469e      	mov	lr, r3
 8005ff6:	4770      	bx	lr
