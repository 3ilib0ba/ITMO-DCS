
Lab-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004840  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004afc  08004afc  000201a0  2**0
                  CONTENTS
  4 .ARM          00000008  08004afc  08004afc  00014afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b04  08004b04  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  08004b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a0  2**0
                  CONTENTS
 10 .bss          000001d8  200001a0  200001a0  000201a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000378  20000378  000201a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3fa  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025bf  00000000  00000000  0002f5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  00031b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cb8  00000000  00000000  00032960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f13  00000000  00000000  00033618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109e1  00000000  00000000  0005752b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8033  00000000  00000000  00067f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ff3f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c64  00000000  00000000  0013ff90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a0 	.word	0x200001a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080049d8 	.word	0x080049d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	080049d8 	.word	0x080049d8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <MX_GPIO_Init+0x84>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a1d      	ldr	r2, [pc, #116]	; (8000628 <MX_GPIO_Init+0x84>)
 80005b4:	f043 0310 	orr.w	r3, r3, #16
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <MX_GPIO_Init+0x84>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0310 	and.w	r3, r3, #16
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b17      	ldr	r3, [pc, #92]	; (8000628 <MX_GPIO_Init+0x84>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a16      	ldr	r2, [pc, #88]	; (8000628 <MX_GPIO_Init+0x84>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b14      	ldr	r3, [pc, #80]	; (8000628 <MX_GPIO_Init+0x84>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_GPIO_Init+0x84>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <MX_GPIO_Init+0x84>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_GPIO_Init+0x84>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_GPIO_Init+0x84>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a08      	ldr	r2, [pc, #32]	; (8000628 <MX_GPIO_Init+0x84>)
 8000608:	f043 0302 	orr.w	r3, r3, #2
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_GPIO_Init+0x84>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0302 	and.w	r3, r3, #2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]

}
 800061a:	bf00      	nop
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fe24 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f812 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f7ff ffb4 	bl	80005a4 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800063c:	f000 fd7a 	bl	8001134 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000640:	f000 fc3a 	bl	8000eb8 <MX_TIM1_Init>
  MX_TIM6_Init();
 8000644:	f000 fcbc 	bl	8000fc0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	set_default_value_for_sound();
 8000648:	f000 f97a 	bl	8000940 <set_default_value_for_sound>
	set_default_value_for_uart();
 800064c:	f000 fade 	bl	8000c0c <set_default_value_for_uart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		parse_symbol_if_available();
 8000650:	f000 f875 	bl	800073e <parse_symbol_if_available>
		send_message_by_uart_if_available();
 8000654:	f000 fab6 	bl	8000bc4 <send_message_by_uart_if_available>
	while (1) {
 8000658:	e7fa      	b.n	8000650 <main+0x24>
	...

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fd26 	bl	80040bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a28      	ldr	r2, [pc, #160]	; (800072c <SystemClock_Config+0xd0>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b23      	ldr	r3, [pc, #140]	; (8000730 <SystemClock_Config+0xd4>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd4>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80006d4:	2340      	movs	r3, #64	; 0x40
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 f98b 	bl	8001a00 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006f0:	f000 f820 	bl	8000734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV64;
 80006fc:	23c0      	movs	r3, #192	; 0xc0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000706:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fbec 	bl	8001ef0 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800071e:	f000 f809 	bl	8000734 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800073c:	e7fe      	b.n	800073c <Error_Handler+0x8>

0800073e <parse_symbol_if_available>:
#include "my_sound.h"
#include "my_uart.h"

//public functions start

void parse_symbol_if_available() {
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
	char* symb = read_char_by_uart();
 8000744:	f000 fa20 	bl	8000b88 <read_char_by_uart>
 8000748:	6078      	str	r0, [r7, #4]
	if (symb == NULL)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d005      	beq.n	800075c <parse_symbol_if_available+0x1e>
		return;
	parse_symbol(*symb);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f805 	bl	8000764 <parse_symbol>
 800075a:	e000      	b.n	800075e <parse_symbol_if_available+0x20>
		return;
 800075c:	bf00      	nop
}
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <parse_symbol>:

//public functions start
void parse_symbol(char symbol){
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b09d      	sub	sp, #116	; 0x74
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	char answer[100];
	if (symbol >= '1' && symbol <= '7') {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b30      	cmp	r3, #48	; 0x30
 8000772:	d91b      	bls.n	80007ac <parse_symbol+0x48>
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b37      	cmp	r3, #55	; 0x37
 8000778:	d818      	bhi.n	80007ac <parse_symbol+0x48>
		uint32_t note_index = symbol - '1';
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3b31      	subs	r3, #49	; 0x31
 800077e:	66fb      	str	r3, [r7, #108]	; 0x6c
		sprintf(answer, "Note: %s, octave: %d", get_note_name(note_index),
 8000780:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000782:	f000 f90d 	bl	80009a0 <get_note_name>
 8000786:	4604      	mov	r4, r0
 8000788:	f000 f8f2 	bl	8000970 <get_current_octave_number>
 800078c:	4603      	mov	r3, r0
 800078e:	f107 0008 	add.w	r0, r7, #8
 8000792:	4622      	mov	r2, r4
 8000794:	493a      	ldr	r1, [pc, #232]	; (8000880 <parse_symbol+0x11c>)
 8000796:	f003 fd89 	bl	80042ac <siprintf>
				get_current_octave_number());
		append_to_sending_buffer_by_uart(answer);
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fa44 	bl	8000c2c <append_to_sending_buffer_by_uart>
		play(note_index);
 80007a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80007a6:	f000 f90b 	bl	80009c0 <play>
	if (symbol >= '1' && symbol <= '7') {
 80007aa:	e064      	b.n	8000876 <parse_symbol+0x112>
	} else {
		switch (symbol) {
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b61      	cmp	r3, #97	; 0x61
 80007b0:	d02f      	beq.n	8000812 <parse_symbol+0xae>
 80007b2:	2b61      	cmp	r3, #97	; 0x61
 80007b4:	dc52      	bgt.n	800085c <parse_symbol+0xf8>
 80007b6:	2b41      	cmp	r3, #65	; 0x41
 80007b8:	d03c      	beq.n	8000834 <parse_symbol+0xd0>
 80007ba:	2b41      	cmp	r3, #65	; 0x41
 80007bc:	dc4e      	bgt.n	800085c <parse_symbol+0xf8>
 80007be:	2b2d      	cmp	r3, #45	; 0x2d
 80007c0:	d016      	beq.n	80007f0 <parse_symbol+0x8c>
 80007c2:	2b2d      	cmp	r3, #45	; 0x2d
 80007c4:	dc4a      	bgt.n	800085c <parse_symbol+0xf8>
 80007c6:	2b0d      	cmp	r3, #13
 80007c8:	d045      	beq.n	8000856 <parse_symbol+0xf2>
 80007ca:	2b2b      	cmp	r3, #43	; 0x2b
 80007cc:	d146      	bne.n	800085c <parse_symbol+0xf8>
		case '+':
			octave_increase_if_available();
 80007ce:	f000 f963 	bl	8000a98 <octave_increase_if_available>
			sprintf(answer, "New octave_index is: %d",
 80007d2:	f000 f8cd 	bl	8000970 <get_current_octave_number>
 80007d6:	4602      	mov	r2, r0
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4929      	ldr	r1, [pc, #164]	; (8000884 <parse_symbol+0x120>)
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 fd64 	bl	80042ac <siprintf>
					get_current_octave_number());
			append_to_sending_buffer_by_uart(answer);
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fa1f 	bl	8000c2c <append_to_sending_buffer_by_uart>
			break;
 80007ee:	e042      	b.n	8000876 <parse_symbol+0x112>
		case '-':
			octave_decrease_if_available();
 80007f0:	f000 f940 	bl	8000a74 <octave_decrease_if_available>
			sprintf(answer, "New octave_index is: %d",
 80007f4:	f000 f8bc 	bl	8000970 <get_current_octave_number>
 80007f8:	4602      	mov	r2, r0
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	4921      	ldr	r1, [pc, #132]	; (8000884 <parse_symbol+0x120>)
 8000800:	4618      	mov	r0, r3
 8000802:	f003 fd53 	bl	80042ac <siprintf>
					get_current_octave_number());
			append_to_sending_buffer_by_uart(answer);
 8000806:	f107 0308 	add.w	r3, r7, #8
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fa0e 	bl	8000c2c <append_to_sending_buffer_by_uart>
			break;
 8000810:	e031      	b.n	8000876 <parse_symbol+0x112>
		case 'a':
			duration_decrease_if_available();
 8000812:	f000 f953 	bl	8000abc <duration_decrease_if_available>
			sprintf(answer, "New duration is: %d ms", get_current_duration());
 8000816:	f000 f8b7 	bl	8000988 <get_current_duration>
 800081a:	4602      	mov	r2, r0
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4919      	ldr	r1, [pc, #100]	; (8000888 <parse_symbol+0x124>)
 8000822:	4618      	mov	r0, r3
 8000824:	f003 fd42 	bl	80042ac <siprintf>
			append_to_sending_buffer_by_uart(answer);
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f9fd 	bl	8000c2c <append_to_sending_buffer_by_uart>
			break;
 8000832:	e020      	b.n	8000876 <parse_symbol+0x112>
		case 'A':
			duration_increase_if_available();
 8000834:	f000 f95a 	bl	8000aec <duration_increase_if_available>
			sprintf(answer, "New duration is: %d ms", get_current_duration());
 8000838:	f000 f8a6 	bl	8000988 <get_current_duration>
 800083c:	4602      	mov	r2, r0
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4911      	ldr	r1, [pc, #68]	; (8000888 <parse_symbol+0x124>)
 8000844:	4618      	mov	r0, r3
 8000846:	f003 fd31 	bl	80042ac <siprintf>
			append_to_sending_buffer_by_uart(answer);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f9ec 	bl	8000c2c <append_to_sending_buffer_by_uart>
			break;
 8000854:	e00f      	b.n	8000876 <parse_symbol+0x112>
		case '\r':
			start_all_playing();
 8000856:	f000 f8ef 	bl	8000a38 <start_all_playing>
			break;
 800085a:	e00c      	b.n	8000876 <parse_symbol+0x112>
		default:
			sprintf(answer, "Incorrect symbol %u", symbol);
 800085c:	79fa      	ldrb	r2, [r7, #7]
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	490a      	ldr	r1, [pc, #40]	; (800088c <parse_symbol+0x128>)
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fd21 	bl	80042ac <siprintf>
			append_to_sending_buffer_by_uart(answer);
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f9dc 	bl	8000c2c <append_to_sending_buffer_by_uart>
			break;
 8000874:	bf00      	nop
		}
	}
}
 8000876:	bf00      	nop
 8000878:	3774      	adds	r7, #116	; 0x74
 800087a:	46bd      	mov	sp, r7
 800087c:	bd90      	pop	{r4, r7, pc}
 800087e:	bf00      	nop
 8000880:	080049f0 	.word	0x080049f0
 8000884:	08004a08 	.word	0x08004a08
 8000888:	08004a20 	.word	0x08004a20
 800088c:	08004a38 	.word	0x08004a38

08000890 <restart_timer>:
uint32_t octave_index = 4;
uint32_t duration = 1000;
uint8_t is_all_playing = 0;
char *note_name[] = { "До", "Ре", "Ми", "Фа", "Соль", "Ля", "Си" };

void restart_timer() {
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
	TIM6->CNT = 0;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <restart_timer+0x14>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	40001000 	.word	0x40001000

080008a8 <mute>:

void mute() {
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <mute+0x14>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr
 80008bc:	40010000 	.word	0x40010000

080008c0 <unmute>:

void unmute() {
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
	TIM1->CCR1 = TIM1->ARR / 2;
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <unmute+0x18>)
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	4a03      	ldr	r2, [pc, #12]	; (80008d8 <unmute+0x18>)
 80008ca:	085b      	lsrs	r3, r3, #1
 80008cc:	6353      	str	r3, [r2, #52]	; 0x34
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	40010000 	.word	0x40010000

080008dc <set_frequency>:

void set_frequency(uint32_t freq_millis) {
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	TIM1->PSC = 62500 / (freq_millis / 1000);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <set_frequency+0x2c>)
 80008e8:	fba2 2303 	umull	r2, r3, r2, r3
 80008ec:	099b      	lsrs	r3, r3, #6
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <set_frequency+0x30>)
 80008f0:	f24f 4124 	movw	r1, #62500	; 0xf424
 80008f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80008f8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	10624dd3 	.word	0x10624dd3
 800090c:	40010000 	.word	0x40010000

08000910 <get_frequency_by_index>:

uint32_t get_frequency_by_index(uint32_t index) {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	return freqs[index + (octave_index * OCTAVE_SIZE)];
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <get_frequency_by_index+0x28>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2207      	movs	r2, #7
 800091e:	fb03 f202 	mul.w	r2, r3, r2
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4413      	add	r3, r2
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <get_frequency_by_index+0x2c>)
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	200000fc 	.word	0x200000fc
 800093c:	20000000 	.word	0x20000000

08000940 <set_default_value_for_sound>:

//public functions start

void set_default_value_for_sound() {
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000944:	2100      	movs	r1, #0
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <set_default_value_for_sound+0x20>)
 8000948:	f001 fdc2 	bl	80024d0 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 800094c:	4805      	ldr	r0, [pc, #20]	; (8000964 <set_default_value_for_sound+0x24>)
 800094e:	f001 fcff 	bl	8002350 <HAL_TIM_Base_Start_IT>
	TIM6->ARR = duration;
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <set_default_value_for_sound+0x28>)
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <set_default_value_for_sound+0x2c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000290 	.word	0x20000290
 8000964:	200002d8 	.word	0x200002d8
 8000968:	40001000 	.word	0x40001000
 800096c:	20000100 	.word	0x20000100

08000970 <get_current_octave_number>:

uint32_t get_current_octave_number() {
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	return octave_index + 1;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <get_current_octave_number+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
}
 800097a:	4618      	mov	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	200000fc 	.word	0x200000fc

08000988 <get_current_duration>:
uint32_t get_current_duration() {
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
	return duration;
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <get_current_duration+0x14>)
 800098e:	681b      	ldr	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000100 	.word	0x20000100

080009a0 <get_note_name>:
char* get_note_name(uint32_t index) {
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	return note_name[index];
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <get_note_name+0x1c>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	20000104 	.word	0x20000104

080009c0 <play>:

void play(uint32_t note_index) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b09c      	sub	sp, #112	; 0x70
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	int freq = get_frequency_by_index(note_index);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ffa1 	bl	8000910 <get_frequency_by_index>
 80009ce:	4603      	mov	r3, r0
 80009d0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (freq > 0) {
 80009d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	dd08      	ble.n	80009ea <play+0x2a>
		set_frequency(freq);
 80009d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff7e 	bl	80008dc <set_frequency>
		restart_timer();
 80009e0:	f7ff ff56 	bl	8000890 <restart_timer>
		unmute();
 80009e4:	f7ff ff6c 	bl	80008c0 <unmute>
					note_name[note_index], octave_index + 1);
			append_to_sending_buffer_by_uart(answer);
		}
	}

}
 80009e8:	e01a      	b.n	8000a20 <play+0x60>
		if (is_all_playing) {
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <play+0x68>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d005      	beq.n	80009fe <play+0x3e>
			mute();
 80009f2:	f7ff ff59 	bl	80008a8 <mute>
			is_all_playing = 0;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <play+0x68>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
}
 80009fc:	e010      	b.n	8000a20 <play+0x60>
			sprintf(answer, "There is no note: %s in octave: %d!",
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <play+0x6c>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <play+0x70>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	f107 0008 	add.w	r0, r7, #8
 8000a10:	4908      	ldr	r1, [pc, #32]	; (8000a34 <play+0x74>)
 8000a12:	f003 fc4b 	bl	80042ac <siprintf>
			append_to_sending_buffer_by_uart(answer);
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f906 	bl	8000c2c <append_to_sending_buffer_by_uart>
}
 8000a20:	bf00      	nop
 8000a22:	3770      	adds	r7, #112	; 0x70
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200001c0 	.word	0x200001c0
 8000a2c:	20000104 	.word	0x20000104
 8000a30:	200000fc 	.word	0x200000fc
 8000a34:	08004a88 	.word	0x08004a88

08000a38 <start_all_playing>:

void start_all_playing() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
	is_all_playing = 1;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <start_all_playing+0x30>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
	if (octave_index > 0)
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <start_all_playing+0x34>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <start_all_playing+0x1a>
		note_index = 0;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <start_all_playing+0x38>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e002      	b.n	8000a58 <start_all_playing+0x20>
	else
		note_index = 2;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <start_all_playing+0x38>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	601a      	str	r2, [r3, #0]
	play(note_index);
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <start_all_playing+0x38>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ffaf 	bl	80009c0 <play>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200001c0 	.word	0x200001c0
 8000a6c:	200000fc 	.word	0x200000fc
 8000a70:	200001bc 	.word	0x200001bc

08000a74 <octave_decrease_if_available>:

void octave_decrease_if_available() {
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	if (octave_index > 0)
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <octave_decrease_if_available+0x20>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d004      	beq.n	8000a8a <octave_decrease_if_available+0x16>
		octave_index--;
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <octave_decrease_if_available+0x20>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <octave_decrease_if_available+0x20>)
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	200000fc 	.word	0x200000fc

08000a98 <octave_increase_if_available>:

void octave_increase_if_available() {
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	if (octave_index < 8)
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <octave_increase_if_available+0x20>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b07      	cmp	r3, #7
 8000aa2:	d804      	bhi.n	8000aae <octave_increase_if_available+0x16>
		octave_index++;
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <octave_increase_if_available+0x20>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a03      	ldr	r2, [pc, #12]	; (8000ab8 <octave_increase_if_available+0x20>)
 8000aac:	6013      	str	r3, [r2, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	200000fc 	.word	0x200000fc

08000abc <duration_decrease_if_available>:

void duration_decrease_if_available() {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	if (duration > 100) {
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <duration_decrease_if_available+0x28>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b64      	cmp	r3, #100	; 0x64
 8000ac6:	d90a      	bls.n	8000ade <duration_decrease_if_available+0x22>
		duration -= 100;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <duration_decrease_if_available+0x28>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3b64      	subs	r3, #100	; 0x64
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <duration_decrease_if_available+0x28>)
 8000ad0:	6013      	str	r3, [r2, #0]
		TIM6->ARR = duration;
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <duration_decrease_if_available+0x2c>)
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <duration_decrease_if_available+0x28>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	62d3      	str	r3, [r2, #44]	; 0x2c
		restart_timer();
 8000ada:	f7ff fed9 	bl	8000890 <restart_timer>
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000100 	.word	0x20000100
 8000ae8:	40001000 	.word	0x40001000

08000aec <duration_increase_if_available>:

void duration_increase_if_available() {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	if (duration < 5000) {
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <duration_increase_if_available+0x2c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f241 3287 	movw	r2, #4999	; 0x1387
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d80a      	bhi.n	8000b12 <duration_increase_if_available+0x26>
		duration += 100;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <duration_increase_if_available+0x2c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3364      	adds	r3, #100	; 0x64
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <duration_increase_if_available+0x2c>)
 8000b04:	6013      	str	r3, [r2, #0]
		TIM6->ARR = duration;
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <duration_increase_if_available+0x30>)
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <duration_increase_if_available+0x2c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	62d3      	str	r3, [r2, #44]	; 0x2c
		restart_timer();
 8000b0e:	f7ff febf 	bl	8000890 <restart_timer>
	}
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000100 	.word	0x20000100
 8000b1c:	40001000 	.word	0x40001000

08000b20 <HAL_TIM_PeriodElapsedCallback>:
//public functions start

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d101      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x16>
		mute();
 8000b32:	f7ff feb9 	bl	80008a8 <mute>
	}
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40001000 	.word	0x40001000

08000b44 <concat>:

#include "my_string.h"

//public functions start

char* concat(char *s1, char *s2) {
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
	char *result = malloc(strlen(s1) + strlen(s2) + 1);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff fb4e 	bl	80001f0 <strlen>
 8000b54:	4604      	mov	r4, r0
 8000b56:	6838      	ldr	r0, [r7, #0]
 8000b58:	f7ff fb4a 	bl	80001f0 <strlen>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4423      	add	r3, r4
 8000b60:	3301      	adds	r3, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f003 faa2 	bl	80040ac <malloc>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60fb      	str	r3, [r7, #12]
	strcpy(result, s1);
 8000b6c:	6879      	ldr	r1, [r7, #4]
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f003 fbcb 	bl	800430a <strcpy>
	strcat(result, s2);
 8000b74:	6839      	ldr	r1, [r7, #0]
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f003 fbb8 	bl	80042ec <strcat>
	return result;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd90      	pop	{r4, r7, pc}
	...

08000b88 <read_char_by_uart>:
char *cur_read_char = read_buffer;
char *transmit_from_pointer = write_buffer;
char *write_to_pointer = write_buffer;

//public functions start
char* read_char_by_uart() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
	char* ans = NULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
	if (cur_process_char != cur_read_char) {
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <read_char_by_uart+0x30>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <read_char_by_uart+0x34>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d006      	beq.n	8000bac <read_char_by_uart+0x24>
		ans = cur_process_char;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <read_char_by_uart+0x30>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	607b      	str	r3, [r7, #4]
		next(&cur_process_char, read_buffer);
 8000ba4:	4906      	ldr	r1, [pc, #24]	; (8000bc0 <read_char_by_uart+0x38>)
 8000ba6:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <read_char_by_uart+0x30>)
 8000ba8:	f000 f8be 	bl	8000d28 <next>
	}
	return ans;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000120 	.word	0x20000120
 8000bbc:	20000124 	.word	0x20000124
 8000bc0:	200001c4 	.word	0x200001c4

08000bc4 <send_message_by_uart_if_available>:

void send_message_by_uart_if_available() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	if (!is_writing_now) {
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <send_message_by_uart_if_available+0x38>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	f083 0301 	eor.w	r3, r3, #1
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00f      	beq.n	8000bf6 <send_message_by_uart_if_available+0x32>
		if (transmit_from_pointer != write_to_pointer) {
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <send_message_by_uart_if_available+0x3c>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <send_message_by_uart_if_available+0x40>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d009      	beq.n	8000bf6 <send_message_by_uart_if_available+0x32>
			is_writing_now = true;
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <send_message_by_uart_if_available+0x38>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart6, (uint8_t*) transmit_from_pointer,
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <send_message_by_uart_if_available+0x3c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2201      	movs	r2, #1
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <send_message_by_uart_if_available+0x44>)
 8000bf2:	f002 facc 	bl	800318e <HAL_UART_Transmit_IT>
					sizeof(char));
		}
	}
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200001c1 	.word	0x200001c1
 8000c00:	20000128 	.word	0x20000128
 8000c04:	2000012c 	.word	0x2000012c
 8000c08:	20000320 	.word	0x20000320

08000c0c <set_default_value_for_uart>:

void set_default_value_for_uart() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, (uint8_t*) cur_read_char, sizeof(char));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <set_default_value_for_uart+0x18>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2201      	movs	r2, #1
 8000c16:	4619      	mov	r1, r3
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <set_default_value_for_uart+0x1c>)
 8000c1a:	f002 fafd 	bl	8003218 <HAL_UART_Receive_IT>
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000124 	.word	0x20000124
 8000c28:	20000320 	.word	0x20000320

08000c2c <append_to_sending_buffer_by_uart>:

void append_to_sending_buffer_by_uart(char *str) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
//	char *str_with_newline = concat("\r\n", str);
	char *str_with_newline = concat(str, "\r\n");
 8000c34:	4911      	ldr	r1, [pc, #68]	; (8000c7c <append_to_sending_buffer_by_uart+0x50>)
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff84 	bl	8000b44 <concat>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	613b      	str	r3, [r7, #16]
	int size = sizeof(char) * strlen(str_with_newline);
 8000c40:	6938      	ldr	r0, [r7, #16]
 8000c42:	f7ff fad5 	bl	80001f0 <strlen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; str_with_newline[i] != '\0'; i++) {
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <append_to_sending_buffer_by_uart+0x38>
		write_char_to_buff(str_with_newline[i]);
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	4413      	add	r3, r2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f84f 	bl	8000cfc <write_char_to_buff>
	for (size_t i = 0; str_with_newline[i] != '\0'; i++) {
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1ef      	bne.n	8000c50 <append_to_sending_buffer_by_uart+0x24>
	}
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	08004aac 	.word	0x08004aac

08000c80 <HAL_UART_RxCpltCallback>:

//Callback of interrupt by uart

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart6.Instance) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_UART_RxCpltCallback+0x34>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d10a      	bne.n	8000caa <HAL_UART_RxCpltCallback+0x2a>
		next(&cur_read_char, read_buffer);
 8000c94:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <HAL_UART_RxCpltCallback+0x38>)
 8000c96:	4809      	ldr	r0, [pc, #36]	; (8000cbc <HAL_UART_RxCpltCallback+0x3c>)
 8000c98:	f000 f846 	bl	8000d28 <next>
		HAL_UART_Receive_IT(&huart6, (uint8_t*) cur_read_char, sizeof(char));
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <HAL_UART_RxCpltCallback+0x3c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4803      	ldr	r0, [pc, #12]	; (8000cb4 <HAL_UART_RxCpltCallback+0x34>)
 8000ca6:	f002 fab7 	bl	8003218 <HAL_UART_Receive_IT>
	}
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000320 	.word	0x20000320
 8000cb8:	200001c4 	.word	0x200001c4
 8000cbc:	20000124 	.word	0x20000124

08000cc0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart6.Instance) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_UART_TxCpltCallback+0x2c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d106      	bne.n	8000ce2 <HAL_UART_TxCpltCallback+0x22>
		is_writing_now = false;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_UART_TxCpltCallback+0x30>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
		next(&transmit_from_pointer, write_buffer);
 8000cda:	4906      	ldr	r1, [pc, #24]	; (8000cf4 <HAL_UART_TxCpltCallback+0x34>)
 8000cdc:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <HAL_UART_TxCpltCallback+0x38>)
 8000cde:	f000 f823 	bl	8000d28 <next>
	}
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000320 	.word	0x20000320
 8000cf0:	200001c1 	.word	0x200001c1
 8000cf4:	20000228 	.word	0x20000228
 8000cf8:	20000128 	.word	0x20000128

08000cfc <write_char_to_buff>:
//public functions end

void write_char_to_buff(char c) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	*write_to_pointer = c;
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <write_char_to_buff+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	701a      	strb	r2, [r3, #0]
	next(&write_to_pointer, write_buffer);
 8000d0e:	4905      	ldr	r1, [pc, #20]	; (8000d24 <write_char_to_buff+0x28>)
 8000d10:	4803      	ldr	r0, [pc, #12]	; (8000d20 <write_char_to_buff+0x24>)
 8000d12:	f000 f809 	bl	8000d28 <next>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000012c 	.word	0x2000012c
 8000d24:	20000228 	.word	0x20000228

08000d28 <next>:

void next(char **pointer, char *buffer) {
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
	if (*pointer >= buffer + 100)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	3364      	adds	r3, #100	; 0x64
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d303      	bcc.n	8000d46 <next+0x1e>
		*pointer = buffer;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	683a      	ldr	r2, [r7, #0]
 8000d42:	601a      	str	r2, [r3, #0]
	else
		(*pointer)++;
}
 8000d44:	e004      	b.n	8000d50 <next+0x28>
		(*pointer)++;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	601a      	str	r2, [r3, #0]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40023800 	.word	0x40023800

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <MemManage_Handler+0x4>

08000dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <BusFault_Handler+0x4>

08000dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <UsageFault_Handler+0x4>

08000dca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df8:	f000 fa92 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <TIM6_DAC_IRQHandler+0x10>)
 8000e06:	f001 fc2b 	bl	8002660 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200002d8 	.word	0x200002d8

08000e14 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <USART6_IRQHandler+0x10>)
 8000e1a:	f002 fa2d 	bl	8003278 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000320 	.word	0x20000320

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f003 f8fe 	bl	8004058 <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20030000 	.word	0x20030000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	2000028c 	.word	0x2000028c
 8000e90:	20000378 	.word	0x20000378

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b092      	sub	sp, #72	; 0x48
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	2220      	movs	r2, #32
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 f8ea 	bl	80040bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ee8:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000eea:	4a34      	ldr	r2, [pc, #208]	; (8000fbc <MX_TIM1_Init+0x104>)
 8000eec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 62500;
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000ef0:	f24f 4224 	movw	r2, #62500	; 0xf424
 8000ef4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2;
 8000efc:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f14:	4828      	ldr	r0, [pc, #160]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000f16:	f001 fa8b 	bl	8002430 <HAL_TIM_PWM_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000f20:	f7ff fc08 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f30:	4619      	mov	r1, r3
 8000f32:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000f34:	f001 fffc 	bl	8002f30 <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f3e:	f7ff fbf9 	bl	8000734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f42:	2360      	movs	r3, #96	; 0x60
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	2200      	movs	r2, #0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4814      	ldr	r0, [pc, #80]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000f68:	f001 fc82 	bl	8002870 <HAL_TIM_PWM_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000f72:	f7ff fbdf 	bl	8000734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000f9a:	f002 f845 	bl	8003028 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000fa4:	f7ff fbc6 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <MX_TIM1_Init+0x100>)
 8000faa:	f000 f889 	bl	80010c0 <HAL_TIM_MspPostInit>

}
 8000fae:	bf00      	nop
 8000fb0:	3748      	adds	r7, #72	; 0x48
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000290 	.word	0x20000290
 8000fbc:	40010000 	.word	0x40010000

08000fc0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_TIM6_Init+0x64>)
 8000fd0:	4a15      	ldr	r2, [pc, #84]	; (8001028 <MX_TIM6_Init+0x68>)
 8000fd2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 500;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_TIM6_Init+0x64>)
 8000fd6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_TIM6_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_TIM6_Init+0x64>)
 8000fe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fe8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_TIM6_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <MX_TIM6_Init+0x64>)
 8000ff2:	f001 f95d 	bl	80022b0 <HAL_TIM_Base_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ffc:	f7ff fb9a 	bl	8000734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_TIM6_Init+0x64>)
 800100e:	f001 ff8f 	bl	8002f30 <HAL_TIMEx_MasterConfigSynchronization>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001018:	f7ff fb8c 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200002d8 	.word	0x200002d8
 8001028:	40001000 	.word	0x40001000

0800102c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_TIM_PWM_MspInit+0x3c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10d      	bne.n	800105a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_TIM_PWM_MspInit+0x40>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a09      	ldr	r2, [pc, #36]	; (800106c <HAL_TIM_PWM_MspInit+0x40>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_TIM_PWM_MspInit+0x40>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40010000 	.word	0x40010000
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_TIM_Base_MspInit+0x48>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d115      	bne.n	80010ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_TIM_Base_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_TIM_Base_MspInit+0x4c>)
 800108c:	f043 0310 	orr.w	r3, r3, #16
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_TIM_Base_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2036      	movs	r0, #54	; 0x36
 80010a4:	f000 fa37 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010a8:	2036      	movs	r0, #54	; 0x36
 80010aa:	f000 fa50 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40001000 	.word	0x40001000
 80010bc:	40023800 	.word	0x40023800

080010c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <HAL_TIM_MspPostInit+0x68>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d11e      	bne.n	8001120 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_TIM_MspPostInit+0x6c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <HAL_TIM_MspPostInit+0x6c>)
 80010ec:	f043 0310 	orr.w	r3, r3, #16
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <HAL_TIM_MspPostInit+0x6c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0310 	and.w	r3, r3, #16
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001102:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001110:	2301      	movs	r3, #1
 8001112:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	4619      	mov	r1, r3
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <HAL_TIM_MspPostInit+0x70>)
 800111c:	f000 fac4 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40010000 	.word	0x40010000
 800112c:	40023800 	.word	0x40023800
 8001130:	40021000 	.word	0x40021000

08001134 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART6_UART_Init+0x4c>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_USART6_UART_Init+0x50>)
 800113c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 3906;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_USART6_UART_Init+0x4c>)
 8001140:	f640 7242 	movw	r2, #3906	; 0xf42
 8001144:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART6_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART6_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART6_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART6_UART_Init+0x4c>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART6_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USART6_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART6_UART_Init+0x4c>)
 800116c:	f001 ffc2 	bl	80030f4 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001176:	f7ff fadd 	bl	8000734 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000320 	.word	0x20000320
 8001184:	40011400 	.word	0x40011400

08001188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_UART_MspInit+0x94>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d133      	bne.n	8001212 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_UART_MspInit+0x98>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <HAL_UART_MspInit+0x98>)
 80011b4:	f043 0320 	orr.w	r3, r3, #32
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_UART_MspInit+0x98>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_UART_MspInit+0x98>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a14      	ldr	r2, [pc, #80]	; (8001220 <HAL_UART_MspInit+0x98>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_UART_MspInit+0x98>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e2:	23c0      	movs	r3, #192	; 0xc0
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011f2:	2308      	movs	r3, #8
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <HAL_UART_MspInit+0x9c>)
 80011fe:	f000 fa53 	bl	80016a8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2047      	movs	r0, #71	; 0x47
 8001208:	f000 f985 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800120c:	2047      	movs	r0, #71	; 0x47
 800120e:	f000 f99e 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001212:	bf00      	nop
 8001214:	3728      	adds	r7, #40	; 0x28
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40011400 	.word	0x40011400
 8001220:	40023800 	.word	0x40023800
 8001224:	40020800 	.word	0x40020800

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800122e:	490e      	ldr	r1, [pc, #56]	; (8001268 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001230:	4a0e      	ldr	r2, [pc, #56]	; (800126c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001244:	4c0b      	ldr	r4, [pc, #44]	; (8001274 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001252:	f7ff fe1f 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001256:	f002 ff05 	bl	8004064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff f9e7 	bl	800062c <main>
  bx  lr    
 800125e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 800126c:	08004b0c 	.word	0x08004b0c
  ldr r2, =_sbss
 8001270:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 8001274:	20000378 	.word	0x20000378

08001278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_Init+0x40>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_Init+0x40>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_Init+0x40>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f92b 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012aa:	200f      	movs	r0, #15
 80012ac:	f000 f808 	bl	80012c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b0:	f7ff fd54 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x54>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x58>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f943 	bl	800156a <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 f90b 	bl	8001516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_InitTick+0x5c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000130 	.word	0x20000130
 8001318:	20000138 	.word	0x20000138
 800131c:	20000134 	.word	0x20000134

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000138 	.word	0x20000138
 8001344:	20000364 	.word	0x20000364

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000364 	.word	0x20000364

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	; (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	; (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	; 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f7ff ff8e 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff29 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff3e 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff8e 	bl	8001454 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5d 	bl	8001400 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff31 	bl	80013c4 <__NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffa2 	bl	80014bc <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b084      	sub	sp, #16
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff feda 	bl	8001348 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d008      	beq.n	80015b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e052      	b.n	800165a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0216 	bic.w	r2, r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d103      	bne.n	80015e4 <HAL_DMA_Abort+0x62>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0208 	bic.w	r2, r2, #8
 80015f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0201 	bic.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001604:	e013      	b.n	800162e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001606:	f7ff fe9f 	bl	8001348 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b05      	cmp	r3, #5
 8001612:	d90c      	bls.n	800162e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2220      	movs	r2, #32
 8001618:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2203      	movs	r2, #3
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e015      	b.n	800165a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1e4      	bne.n	8001606 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	223f      	movs	r2, #63	; 0x3f
 8001642:	409a      	lsls	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d004      	beq.n	8001680 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2280      	movs	r2, #128	; 0x80
 800167a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e00c      	b.n	800169a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2205      	movs	r2, #5
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0201 	bic.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e177      	b.n	80019b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8166 	bne.w	80019ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d005      	beq.n	80016fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d130      	bne.n	800175c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	4013      	ands	r3, r2
 8001710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001730:	2201      	movs	r2, #1
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4013      	ands	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 0201 	and.w	r2, r3, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b03      	cmp	r3, #3
 8001766:	d017      	beq.n	8001798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d123      	bne.n	80017ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	220f      	movs	r2, #15
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	69b9      	ldr	r1, [r7, #24]
 80017e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0203 	and.w	r2, r3, #3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80c0 	beq.w	80019ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b66      	ldr	r3, [pc, #408]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a65      	ldr	r2, [pc, #404]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b63      	ldr	r3, [pc, #396]	; (80019cc <HAL_GPIO_Init+0x324>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184a:	4a61      	ldr	r2, [pc, #388]	; (80019d0 <HAL_GPIO_Init+0x328>)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a58      	ldr	r2, [pc, #352]	; (80019d4 <HAL_GPIO_Init+0x32c>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d037      	beq.n	80018e6 <HAL_GPIO_Init+0x23e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a57      	ldr	r2, [pc, #348]	; (80019d8 <HAL_GPIO_Init+0x330>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d031      	beq.n	80018e2 <HAL_GPIO_Init+0x23a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a56      	ldr	r2, [pc, #344]	; (80019dc <HAL_GPIO_Init+0x334>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d02b      	beq.n	80018de <HAL_GPIO_Init+0x236>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a55      	ldr	r2, [pc, #340]	; (80019e0 <HAL_GPIO_Init+0x338>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d025      	beq.n	80018da <HAL_GPIO_Init+0x232>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a54      	ldr	r2, [pc, #336]	; (80019e4 <HAL_GPIO_Init+0x33c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01f      	beq.n	80018d6 <HAL_GPIO_Init+0x22e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a53      	ldr	r2, [pc, #332]	; (80019e8 <HAL_GPIO_Init+0x340>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d019      	beq.n	80018d2 <HAL_GPIO_Init+0x22a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a52      	ldr	r2, [pc, #328]	; (80019ec <HAL_GPIO_Init+0x344>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d013      	beq.n	80018ce <HAL_GPIO_Init+0x226>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a51      	ldr	r2, [pc, #324]	; (80019f0 <HAL_GPIO_Init+0x348>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00d      	beq.n	80018ca <HAL_GPIO_Init+0x222>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <HAL_GPIO_Init+0x34c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d007      	beq.n	80018c6 <HAL_GPIO_Init+0x21e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4f      	ldr	r2, [pc, #316]	; (80019f8 <HAL_GPIO_Init+0x350>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_GPIO_Init+0x21a>
 80018be:	2309      	movs	r3, #9
 80018c0:	e012      	b.n	80018e8 <HAL_GPIO_Init+0x240>
 80018c2:	230a      	movs	r3, #10
 80018c4:	e010      	b.n	80018e8 <HAL_GPIO_Init+0x240>
 80018c6:	2308      	movs	r3, #8
 80018c8:	e00e      	b.n	80018e8 <HAL_GPIO_Init+0x240>
 80018ca:	2307      	movs	r3, #7
 80018cc:	e00c      	b.n	80018e8 <HAL_GPIO_Init+0x240>
 80018ce:	2306      	movs	r3, #6
 80018d0:	e00a      	b.n	80018e8 <HAL_GPIO_Init+0x240>
 80018d2:	2305      	movs	r3, #5
 80018d4:	e008      	b.n	80018e8 <HAL_GPIO_Init+0x240>
 80018d6:	2304      	movs	r3, #4
 80018d8:	e006      	b.n	80018e8 <HAL_GPIO_Init+0x240>
 80018da:	2303      	movs	r3, #3
 80018dc:	e004      	b.n	80018e8 <HAL_GPIO_Init+0x240>
 80018de:	2302      	movs	r3, #2
 80018e0:	e002      	b.n	80018e8 <HAL_GPIO_Init+0x240>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x240>
 80018e6:	2300      	movs	r3, #0
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	f002 0203 	and.w	r2, r2, #3
 80018ee:	0092      	lsls	r2, r2, #2
 80018f0:	4093      	lsls	r3, r2
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f8:	4935      	ldr	r1, [pc, #212]	; (80019d0 <HAL_GPIO_Init+0x328>)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	3302      	adds	r3, #2
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001906:	4b3d      	ldr	r3, [pc, #244]	; (80019fc <HAL_GPIO_Init+0x354>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800192a:	4a34      	ldr	r2, [pc, #208]	; (80019fc <HAL_GPIO_Init+0x354>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001930:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_GPIO_Init+0x354>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001954:	4a29      	ldr	r2, [pc, #164]	; (80019fc <HAL_GPIO_Init+0x354>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_GPIO_Init+0x354>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800197e:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <HAL_GPIO_Init+0x354>)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_GPIO_Init+0x354>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <HAL_GPIO_Init+0x354>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3301      	adds	r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	f67f ae84 	bls.w	80016c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40013800 	.word	0x40013800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020400 	.word	0x40020400
 80019dc:	40020800 	.word	0x40020800
 80019e0:	40020c00 	.word	0x40020c00
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40021400 	.word	0x40021400
 80019ec:	40021800 	.word	0x40021800
 80019f0:	40021c00 	.word	0x40021c00
 80019f4:	40022000 	.word	0x40022000
 80019f8:	40022400 	.word	0x40022400
 80019fc:	40013c00 	.word	0x40013c00

08001a00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e267      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d075      	beq.n	8001b0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d00c      	beq.n	8001a44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2a:	4b85      	ldr	r3, [pc, #532]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d112      	bne.n	8001a5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a36:	4b82      	ldr	r3, [pc, #520]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a42:	d10b      	bne.n	8001a5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a44:	4b7e      	ldr	r3, [pc, #504]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d05b      	beq.n	8001b08 <HAL_RCC_OscConfig+0x108>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d157      	bne.n	8001b08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e242      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a64:	d106      	bne.n	8001a74 <HAL_RCC_OscConfig+0x74>
 8001a66:	4b76      	ldr	r3, [pc, #472]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	e01d      	b.n	8001ab0 <HAL_RCC_OscConfig+0xb0>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a7c:	d10c      	bne.n	8001a98 <HAL_RCC_OscConfig+0x98>
 8001a7e:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a6f      	ldr	r2, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b6d      	ldr	r3, [pc, #436]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a6c      	ldr	r2, [pc, #432]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e00b      	b.n	8001ab0 <HAL_RCC_OscConfig+0xb0>
 8001a98:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a68      	ldr	r2, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a65      	ldr	r2, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d013      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fc46 	bl	8001348 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac0:	f7ff fc42 	bl	8001348 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b64      	cmp	r3, #100	; 0x64
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e207      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0xc0>
 8001ade:	e014      	b.n	8001b0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fc32 	bl	8001348 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fc2e 	bl	8001348 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e1f3      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	4b51      	ldr	r3, [pc, #324]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xe8>
 8001b06:	e000      	b.n	8001b0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d063      	beq.n	8001bde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b16:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00b      	beq.n	8001b3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d11c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2e:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d116      	bne.n	8001b68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x152>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e1c7      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4937      	ldr	r1, [pc, #220]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	e03a      	b.n	8001bde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d020      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b70:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <HAL_RCC_OscConfig+0x244>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff fbe7 	bl	8001348 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fbe3 	bl	8001348 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e1a8      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b90:	4b2b      	ldr	r3, [pc, #172]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9c:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4925      	ldr	r1, [pc, #148]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
 8001bb0:	e015      	b.n	8001bde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb2:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <HAL_RCC_OscConfig+0x244>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fbc6 	bl	8001348 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fbc2 	bl	8001348 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e187      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd2:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d036      	beq.n	8001c58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d016      	beq.n	8001c20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_RCC_OscConfig+0x248>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fba6 	bl	8001348 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c00:	f7ff fba2 	bl	8001348 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e167      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_OscConfig+0x240>)
 8001c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0f0      	beq.n	8001c00 <HAL_RCC_OscConfig+0x200>
 8001c1e:	e01b      	b.n	8001c58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_OscConfig+0x248>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fb8f 	bl	8001348 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c2c:	e00e      	b.n	8001c4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c2e:	f7ff fb8b 	bl	8001348 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d907      	bls.n	8001c4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e150      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
 8001c40:	40023800 	.word	0x40023800
 8001c44:	42470000 	.word	0x42470000
 8001c48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4c:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001c4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ea      	bne.n	8001c2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 8097 	beq.w	8001d94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c6a:	4b81      	ldr	r3, [pc, #516]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10f      	bne.n	8001c96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	4b7d      	ldr	r3, [pc, #500]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a7c      	ldr	r2, [pc, #496]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b7a      	ldr	r3, [pc, #488]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c92:	2301      	movs	r3, #1
 8001c94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c96:	4b77      	ldr	r3, [pc, #476]	; (8001e74 <HAL_RCC_OscConfig+0x474>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d118      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ca2:	4b74      	ldr	r3, [pc, #464]	; (8001e74 <HAL_RCC_OscConfig+0x474>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a73      	ldr	r2, [pc, #460]	; (8001e74 <HAL_RCC_OscConfig+0x474>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fb4b 	bl	8001348 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb6:	f7ff fb47 	bl	8001348 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e10c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b6a      	ldr	r3, [pc, #424]	; (8001e74 <HAL_RCC_OscConfig+0x474>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x2ea>
 8001cdc:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	4a63      	ldr	r2, [pc, #396]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	e01c      	b.n	8001d24 <HAL_RCC_OscConfig+0x324>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b05      	cmp	r3, #5
 8001cf0:	d10c      	bne.n	8001d0c <HAL_RCC_OscConfig+0x30c>
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf6:	4a5e      	ldr	r2, [pc, #376]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfe:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d02:	4a5b      	ldr	r2, [pc, #364]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_OscConfig+0x324>
 8001d0c:	4b58      	ldr	r3, [pc, #352]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	4a57      	ldr	r2, [pc, #348]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001d12:	f023 0301 	bic.w	r3, r3, #1
 8001d16:	6713      	str	r3, [r2, #112]	; 0x70
 8001d18:	4b55      	ldr	r3, [pc, #340]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	4a54      	ldr	r2, [pc, #336]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f023 0304 	bic.w	r3, r3, #4
 8001d22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d015      	beq.n	8001d58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff fb0c 	bl	8001348 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff fb08 	bl	8001348 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0cb      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4a:	4b49      	ldr	r3, [pc, #292]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0ee      	beq.n	8001d34 <HAL_RCC_OscConfig+0x334>
 8001d56:	e014      	b.n	8001d82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7ff faf6 	bl	8001348 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7ff faf2 	bl	8001348 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0b5      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d76:	4b3e      	ldr	r3, [pc, #248]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ee      	bne.n	8001d60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d82:	7dfb      	ldrb	r3, [r7, #23]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d88:	4b39      	ldr	r3, [pc, #228]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	4a38      	ldr	r2, [pc, #224]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a1 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d9e:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d05c      	beq.n	8001e64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d141      	bne.n	8001e36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fac6 	bl	8001348 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff fac2 	bl	8001348 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e087      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	4b27      	ldr	r3, [pc, #156]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	019b      	lsls	r3, r3, #6
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	085b      	lsrs	r3, r3, #1
 8001df6:	3b01      	subs	r3, #1
 8001df8:	041b      	lsls	r3, r3, #16
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e00:	061b      	lsls	r3, r3, #24
 8001e02:	491b      	ldr	r1, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fa9b 	bl	8001348 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff fa97 	bl	8001348 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e05c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x416>
 8001e34:	e054      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_RCC_OscConfig+0x478>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fa84 	bl	8001348 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff fa80 	bl	8001348 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e045      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_RCC_OscConfig+0x470>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x444>
 8001e62:	e03d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e038      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40007000 	.word	0x40007000
 8001e78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_RCC_OscConfig+0x4ec>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d028      	beq.n	8001edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d121      	bne.n	8001edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d11a      	bne.n	8001edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001eac:	4013      	ands	r3, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d107      	bne.n	8001edc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0cc      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b68      	ldr	r3, [pc, #416]	; (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d90c      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b65      	ldr	r3, [pc, #404]	; (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0b8      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d020      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f44:	4b59      	ldr	r3, [pc, #356]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	4a58      	ldr	r2, [pc, #352]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f5c:	4b53      	ldr	r3, [pc, #332]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	4a52      	ldr	r2, [pc, #328]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f68:	4b50      	ldr	r3, [pc, #320]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	494d      	ldr	r1, [pc, #308]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d044      	beq.n	8002010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	4b47      	ldr	r3, [pc, #284]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d119      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e07f      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d003      	beq.n	8001fae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fae:	4b3f      	ldr	r3, [pc, #252]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e06f      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e067      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fce:	4b37      	ldr	r3, [pc, #220]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f023 0203 	bic.w	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4934      	ldr	r1, [pc, #208]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe0:	f7ff f9b2 	bl	8001348 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe8:	f7ff f9ae 	bl	8001348 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e04f      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 020c 	and.w	r2, r3, #12
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	429a      	cmp	r2, r3
 800200e:	d1eb      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002010:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d20c      	bcs.n	8002038 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b22      	ldr	r3, [pc, #136]	; (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002026:	4b20      	ldr	r3, [pc, #128]	; (80020a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e032      	b.n	800209e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002044:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4916      	ldr	r1, [pc, #88]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	490e      	ldr	r1, [pc, #56]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 8002072:	4313      	orrs	r3, r2
 8002074:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002076:	f000 f821 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800207a:	4602      	mov	r2, r0
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	490a      	ldr	r1, [pc, #40]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	5ccb      	ldrb	r3, [r1, r3]
 800208a:	fa22 f303 	lsr.w	r3, r2, r3
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002092:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff f912 	bl	80012c0 <HAL_InitTick>

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40023c00 	.word	0x40023c00
 80020ac:	40023800 	.word	0x40023800
 80020b0:	08004ab0 	.word	0x08004ab0
 80020b4:	20000130 	.word	0x20000130
 80020b8:	20000134 	.word	0x20000134

080020bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c0:	b090      	sub	sp, #64	; 0x40
 80020c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
 80020c8:	2300      	movs	r3, #0
 80020ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020cc:	2300      	movs	r3, #0
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d4:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_RCC_GetSysClockFreq+0x180>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d00d      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0x40>
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	f200 80a1 	bhi.w	8002228 <HAL_RCC_GetSysClockFreq+0x16c>
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x34>
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d003      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ee:	e09b      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <HAL_RCC_GetSysClockFreq+0x184>)
 80020f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80020f4:	e09b      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020f6:	4b53      	ldr	r3, [pc, #332]	; (8002244 <HAL_RCC_GetSysClockFreq+0x188>)
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020fa:	e098      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020fc:	4b4f      	ldr	r3, [pc, #316]	; (800223c <HAL_RCC_GetSysClockFreq+0x180>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002106:	4b4d      	ldr	r3, [pc, #308]	; (800223c <HAL_RCC_GetSysClockFreq+0x180>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d028      	beq.n	8002164 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002112:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_RCC_GetSysClockFreq+0x180>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	099b      	lsrs	r3, r3, #6
 8002118:	2200      	movs	r2, #0
 800211a:	623b      	str	r3, [r7, #32]
 800211c:	627a      	str	r2, [r7, #36]	; 0x24
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002124:	2100      	movs	r1, #0
 8002126:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_RCC_GetSysClockFreq+0x188>)
 8002128:	fb03 f201 	mul.w	r2, r3, r1
 800212c:	2300      	movs	r3, #0
 800212e:	fb00 f303 	mul.w	r3, r0, r3
 8002132:	4413      	add	r3, r2
 8002134:	4a43      	ldr	r2, [pc, #268]	; (8002244 <HAL_RCC_GetSysClockFreq+0x188>)
 8002136:	fba0 1202 	umull	r1, r2, r0, r2
 800213a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800213c:	460a      	mov	r2, r1
 800213e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002142:	4413      	add	r3, r2
 8002144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002148:	2200      	movs	r2, #0
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	61fa      	str	r2, [r7, #28]
 800214e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002152:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002156:	f7fe f8a3 	bl	80002a0 <__aeabi_uldivmod>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4613      	mov	r3, r2
 8002160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002162:	e053      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002164:	4b35      	ldr	r3, [pc, #212]	; (800223c <HAL_RCC_GetSysClockFreq+0x180>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	2200      	movs	r2, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	617a      	str	r2, [r7, #20]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002176:	f04f 0b00 	mov.w	fp, #0
 800217a:	4652      	mov	r2, sl
 800217c:	465b      	mov	r3, fp
 800217e:	f04f 0000 	mov.w	r0, #0
 8002182:	f04f 0100 	mov.w	r1, #0
 8002186:	0159      	lsls	r1, r3, #5
 8002188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800218c:	0150      	lsls	r0, r2, #5
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	ebb2 080a 	subs.w	r8, r2, sl
 8002196:	eb63 090b 	sbc.w	r9, r3, fp
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021ae:	ebb2 0408 	subs.w	r4, r2, r8
 80021b2:	eb63 0509 	sbc.w	r5, r3, r9
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	00eb      	lsls	r3, r5, #3
 80021c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021c4:	00e2      	lsls	r2, r4, #3
 80021c6:	4614      	mov	r4, r2
 80021c8:	461d      	mov	r5, r3
 80021ca:	eb14 030a 	adds.w	r3, r4, sl
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	eb45 030b 	adc.w	r3, r5, fp
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021e2:	4629      	mov	r1, r5
 80021e4:	028b      	lsls	r3, r1, #10
 80021e6:	4621      	mov	r1, r4
 80021e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021ec:	4621      	mov	r1, r4
 80021ee:	028a      	lsls	r2, r1, #10
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f6:	2200      	movs	r2, #0
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	60fa      	str	r2, [r7, #12]
 80021fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002200:	f7fe f84e 	bl	80002a0 <__aeabi_uldivmod>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4613      	mov	r3, r2
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800220c:	4b0b      	ldr	r3, [pc, #44]	; (800223c <HAL_RCC_GetSysClockFreq+0x180>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	3301      	adds	r3, #1
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800221c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	fbb2 f3f3 	udiv	r3, r2, r3
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002226:	e002      	b.n	800222e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <HAL_RCC_GetSysClockFreq+0x184>)
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800222c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002230:	4618      	mov	r0, r3
 8002232:	3740      	adds	r7, #64	; 0x40
 8002234:	46bd      	mov	sp, r7
 8002236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	00f42400 	.word	0x00f42400
 8002244:	017d7840 	.word	0x017d7840

08002248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <HAL_RCC_GetHCLKFreq+0x14>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	20000130 	.word	0x20000130

08002260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002264:	f7ff fff0 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0a9b      	lsrs	r3, r3, #10
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4903      	ldr	r1, [pc, #12]	; (8002284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	08004ac0 	.word	0x08004ac0

08002288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800228c:	f7ff ffdc 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	0b5b      	lsrs	r3, r3, #13
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	4903      	ldr	r1, [pc, #12]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	08004ac0 	.word	0x08004ac0

080022b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e041      	b.n	8002346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe feca 	bl	8001070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f000 fba8 	bl	8002a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d001      	beq.n	8002368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e04e      	b.n	8002406 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0201 	orr.w	r2, r2, #1
 800237e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a23      	ldr	r2, [pc, #140]	; (8002414 <HAL_TIM_Base_Start_IT+0xc4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d022      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002392:	d01d      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1f      	ldr	r2, [pc, #124]	; (8002418 <HAL_TIM_Base_Start_IT+0xc8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d018      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1e      	ldr	r2, [pc, #120]	; (800241c <HAL_TIM_Base_Start_IT+0xcc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d013      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <HAL_TIM_Base_Start_IT+0xd0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00e      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <HAL_TIM_Base_Start_IT+0xd4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_TIM_Base_Start_IT+0xd8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d004      	beq.n	80023d0 <HAL_TIM_Base_Start_IT+0x80>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <HAL_TIM_Base_Start_IT+0xdc>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d111      	bne.n	80023f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d010      	beq.n	8002404 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f042 0201 	orr.w	r2, r2, #1
 80023f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f2:	e007      	b.n	8002404 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40010000 	.word	0x40010000
 8002418:	40000400 	.word	0x40000400
 800241c:	40000800 	.word	0x40000800
 8002420:	40000c00 	.word	0x40000c00
 8002424:	40010400 	.word	0x40010400
 8002428:	40014000 	.word	0x40014000
 800242c:	40001800 	.word	0x40001800

08002430 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e041      	b.n	80024c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe fde8 	bl	800102c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3304      	adds	r3, #4
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f000 fae8 	bl	8002a44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <HAL_TIM_PWM_Start+0x24>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	bf14      	ite	ne
 80024ec:	2301      	movne	r3, #1
 80024ee:	2300      	moveq	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e022      	b.n	800253a <HAL_TIM_PWM_Start+0x6a>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d109      	bne.n	800250e <HAL_TIM_PWM_Start+0x3e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b01      	cmp	r3, #1
 8002504:	bf14      	ite	ne
 8002506:	2301      	movne	r3, #1
 8002508:	2300      	moveq	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	e015      	b.n	800253a <HAL_TIM_PWM_Start+0x6a>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b08      	cmp	r3, #8
 8002512:	d109      	bne.n	8002528 <HAL_TIM_PWM_Start+0x58>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b01      	cmp	r3, #1
 800251e:	bf14      	ite	ne
 8002520:	2301      	movne	r3, #1
 8002522:	2300      	moveq	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e008      	b.n	800253a <HAL_TIM_PWM_Start+0x6a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	bf14      	ite	ne
 8002534:	2301      	movne	r3, #1
 8002536:	2300      	moveq	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e07c      	b.n	800263c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d104      	bne.n	8002552 <HAL_TIM_PWM_Start+0x82>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002550:	e013      	b.n	800257a <HAL_TIM_PWM_Start+0xaa>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d104      	bne.n	8002562 <HAL_TIM_PWM_Start+0x92>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002560:	e00b      	b.n	800257a <HAL_TIM_PWM_Start+0xaa>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d104      	bne.n	8002572 <HAL_TIM_PWM_Start+0xa2>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002570:	e003      	b.n	800257a <HAL_TIM_PWM_Start+0xaa>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2202      	movs	r2, #2
 8002576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2201      	movs	r2, #1
 8002580:	6839      	ldr	r1, [r7, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fcae 	bl	8002ee4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a2d      	ldr	r2, [pc, #180]	; (8002644 <HAL_TIM_PWM_Start+0x174>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d004      	beq.n	800259c <HAL_TIM_PWM_Start+0xcc>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a2c      	ldr	r2, [pc, #176]	; (8002648 <HAL_TIM_PWM_Start+0x178>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d101      	bne.n	80025a0 <HAL_TIM_PWM_Start+0xd0>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <HAL_TIM_PWM_Start+0xd2>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a22      	ldr	r2, [pc, #136]	; (8002644 <HAL_TIM_PWM_Start+0x174>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d022      	beq.n	8002606 <HAL_TIM_PWM_Start+0x136>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c8:	d01d      	beq.n	8002606 <HAL_TIM_PWM_Start+0x136>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1f      	ldr	r2, [pc, #124]	; (800264c <HAL_TIM_PWM_Start+0x17c>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d018      	beq.n	8002606 <HAL_TIM_PWM_Start+0x136>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <HAL_TIM_PWM_Start+0x180>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_TIM_PWM_Start+0x136>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1c      	ldr	r2, [pc, #112]	; (8002654 <HAL_TIM_PWM_Start+0x184>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d00e      	beq.n	8002606 <HAL_TIM_PWM_Start+0x136>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a16      	ldr	r2, [pc, #88]	; (8002648 <HAL_TIM_PWM_Start+0x178>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d009      	beq.n	8002606 <HAL_TIM_PWM_Start+0x136>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a18      	ldr	r2, [pc, #96]	; (8002658 <HAL_TIM_PWM_Start+0x188>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_TIM_PWM_Start+0x136>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a16      	ldr	r2, [pc, #88]	; (800265c <HAL_TIM_PWM_Start+0x18c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d111      	bne.n	800262a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b06      	cmp	r3, #6
 8002616:	d010      	beq.n	800263a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f042 0201 	orr.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002628:	e007      	b.n	800263a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40010000 	.word	0x40010000
 8002648:	40010400 	.word	0x40010400
 800264c:	40000400 	.word	0x40000400
 8002650:	40000800 	.word	0x40000800
 8002654:	40000c00 	.word	0x40000c00
 8002658:	40014000 	.word	0x40014000
 800265c:	40001800 	.word	0x40001800

08002660 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d122      	bne.n	80026bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b02      	cmp	r3, #2
 8002682:	d11b      	bne.n	80026bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0202 	mvn.w	r2, #2
 800268c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f9b0 	bl	8002a08 <HAL_TIM_IC_CaptureCallback>
 80026a8:	e005      	b.n	80026b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f9a2 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f9b3 	bl	8002a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d122      	bne.n	8002710 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d11b      	bne.n	8002710 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0204 	mvn.w	r2, #4
 80026e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f986 	bl	8002a08 <HAL_TIM_IC_CaptureCallback>
 80026fc:	e005      	b.n	800270a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f978 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f989 	bl	8002a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b08      	cmp	r3, #8
 800271c:	d122      	bne.n	8002764 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b08      	cmp	r3, #8
 800272a:	d11b      	bne.n	8002764 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0208 	mvn.w	r2, #8
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2204      	movs	r2, #4
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f95c 	bl	8002a08 <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f94e 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f95f 	bl	8002a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b10      	cmp	r3, #16
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b10      	cmp	r3, #16
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0210 	mvn.w	r2, #16
 8002788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2208      	movs	r2, #8
 800278e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f932 	bl	8002a08 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f924 	bl	80029f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f935 	bl	8002a1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10e      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d107      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0201 	mvn.w	r2, #1
 80027dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fe f99e 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ee:	2b80      	cmp	r3, #128	; 0x80
 80027f0:	d10e      	bne.n	8002810 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fc:	2b80      	cmp	r3, #128	; 0x80
 80027fe:	d107      	bne.n	8002810 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fc68 	bl	80030e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b40      	cmp	r3, #64	; 0x40
 800281c:	d10e      	bne.n	800283c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002828:	2b40      	cmp	r3, #64	; 0x40
 800282a:	d107      	bne.n	800283c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8fa 	bl	8002a30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b20      	cmp	r3, #32
 8002848:	d10e      	bne.n	8002868 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b20      	cmp	r3, #32
 8002856:	d107      	bne.n	8002868 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0220 	mvn.w	r2, #32
 8002860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fc32 	bl	80030cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800288a:	2302      	movs	r3, #2
 800288c:	e0ae      	b.n	80029ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b0c      	cmp	r3, #12
 800289a:	f200 809f 	bhi.w	80029dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800289e:	a201      	add	r2, pc, #4	; (adr r2, 80028a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a4:	080028d9 	.word	0x080028d9
 80028a8:	080029dd 	.word	0x080029dd
 80028ac:	080029dd 	.word	0x080029dd
 80028b0:	080029dd 	.word	0x080029dd
 80028b4:	08002919 	.word	0x08002919
 80028b8:	080029dd 	.word	0x080029dd
 80028bc:	080029dd 	.word	0x080029dd
 80028c0:	080029dd 	.word	0x080029dd
 80028c4:	0800295b 	.word	0x0800295b
 80028c8:	080029dd 	.word	0x080029dd
 80028cc:	080029dd 	.word	0x080029dd
 80028d0:	080029dd 	.word	0x080029dd
 80028d4:	0800299b 	.word	0x0800299b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f950 	bl	8002b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699a      	ldr	r2, [r3, #24]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0208 	orr.w	r2, r2, #8
 80028f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0204 	bic.w	r2, r2, #4
 8002902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6999      	ldr	r1, [r3, #24]
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	619a      	str	r2, [r3, #24]
      break;
 8002916:	e064      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	4618      	mov	r0, r3
 8002920:	f000 f9a0 	bl	8002c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6999      	ldr	r1, [r3, #24]
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	021a      	lsls	r2, r3, #8
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	619a      	str	r2, [r3, #24]
      break;
 8002958:	e043      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f9f5 	bl	8002d50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0208 	orr.w	r2, r2, #8
 8002974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0204 	bic.w	r2, r2, #4
 8002984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69d9      	ldr	r1, [r3, #28]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	61da      	str	r2, [r3, #28]
      break;
 8002998:	e023      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68b9      	ldr	r1, [r7, #8]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 fa49 	bl	8002e38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69da      	ldr	r2, [r3, #28]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	69d9      	ldr	r1, [r3, #28]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	021a      	lsls	r2, r3, #8
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	61da      	str	r2, [r3, #28]
      break;
 80029da:	e002      	b.n	80029e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	75fb      	strb	r3, [r7, #23]
      break;
 80029e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a40      	ldr	r2, [pc, #256]	; (8002b58 <TIM_Base_SetConfig+0x114>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d013      	beq.n	8002a84 <TIM_Base_SetConfig+0x40>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a62:	d00f      	beq.n	8002a84 <TIM_Base_SetConfig+0x40>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a3d      	ldr	r2, [pc, #244]	; (8002b5c <TIM_Base_SetConfig+0x118>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00b      	beq.n	8002a84 <TIM_Base_SetConfig+0x40>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a3c      	ldr	r2, [pc, #240]	; (8002b60 <TIM_Base_SetConfig+0x11c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d007      	beq.n	8002a84 <TIM_Base_SetConfig+0x40>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a3b      	ldr	r2, [pc, #236]	; (8002b64 <TIM_Base_SetConfig+0x120>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d003      	beq.n	8002a84 <TIM_Base_SetConfig+0x40>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a3a      	ldr	r2, [pc, #232]	; (8002b68 <TIM_Base_SetConfig+0x124>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d108      	bne.n	8002a96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a2f      	ldr	r2, [pc, #188]	; (8002b58 <TIM_Base_SetConfig+0x114>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d02b      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d027      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a2c      	ldr	r2, [pc, #176]	; (8002b5c <TIM_Base_SetConfig+0x118>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d023      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a2b      	ldr	r2, [pc, #172]	; (8002b60 <TIM_Base_SetConfig+0x11c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01f      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a2a      	ldr	r2, [pc, #168]	; (8002b64 <TIM_Base_SetConfig+0x120>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01b      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a29      	ldr	r2, [pc, #164]	; (8002b68 <TIM_Base_SetConfig+0x124>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d017      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <TIM_Base_SetConfig+0x128>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a27      	ldr	r2, [pc, #156]	; (8002b70 <TIM_Base_SetConfig+0x12c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00f      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a26      	ldr	r2, [pc, #152]	; (8002b74 <TIM_Base_SetConfig+0x130>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00b      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <TIM_Base_SetConfig+0x134>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a24      	ldr	r2, [pc, #144]	; (8002b7c <TIM_Base_SetConfig+0x138>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d003      	beq.n	8002af6 <TIM_Base_SetConfig+0xb2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <TIM_Base_SetConfig+0x13c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d108      	bne.n	8002b08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <TIM_Base_SetConfig+0x114>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d003      	beq.n	8002b3c <TIM_Base_SetConfig+0xf8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a0c      	ldr	r2, [pc, #48]	; (8002b68 <TIM_Base_SetConfig+0x124>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d103      	bne.n	8002b44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	615a      	str	r2, [r3, #20]
}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40010000 	.word	0x40010000
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40000c00 	.word	0x40000c00
 8002b68:	40010400 	.word	0x40010400
 8002b6c:	40014000 	.word	0x40014000
 8002b70:	40014400 	.word	0x40014400
 8002b74:	40014800 	.word	0x40014800
 8002b78:	40001800 	.word	0x40001800
 8002b7c:	40001c00 	.word	0x40001c00
 8002b80:	40002000 	.word	0x40002000

08002b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f023 0201 	bic.w	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0303 	bic.w	r3, r3, #3
 8002bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f023 0302 	bic.w	r3, r3, #2
 8002bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <TIM_OC1_SetConfig+0xd8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d003      	beq.n	8002be8 <TIM_OC1_SetConfig+0x64>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a1f      	ldr	r2, [pc, #124]	; (8002c60 <TIM_OC1_SetConfig+0xdc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d10c      	bne.n	8002c02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f023 0308 	bic.w	r3, r3, #8
 8002bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <TIM_OC1_SetConfig+0xd8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d003      	beq.n	8002c12 <TIM_OC1_SetConfig+0x8e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <TIM_OC1_SetConfig+0xdc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d111      	bne.n	8002c36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	621a      	str	r2, [r3, #32]
}
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40010000 	.word	0x40010000
 8002c60:	40010400 	.word	0x40010400

08002c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	f023 0210 	bic.w	r2, r3, #16
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f023 0320 	bic.w	r3, r3, #32
 8002cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a22      	ldr	r2, [pc, #136]	; (8002d48 <TIM_OC2_SetConfig+0xe4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <TIM_OC2_SetConfig+0x68>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a21      	ldr	r2, [pc, #132]	; (8002d4c <TIM_OC2_SetConfig+0xe8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d10d      	bne.n	8002ce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <TIM_OC2_SetConfig+0xe4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_OC2_SetConfig+0x94>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <TIM_OC2_SetConfig+0xe8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d113      	bne.n	8002d20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	621a      	str	r2, [r3, #32]
}
 8002d3a:	bf00      	nop
 8002d3c:	371c      	adds	r7, #28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40010400 	.word	0x40010400

08002d50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0303 	bic.w	r3, r3, #3
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <TIM_OC3_SetConfig+0xe0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <TIM_OC3_SetConfig+0x66>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <TIM_OC3_SetConfig+0xe4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d10d      	bne.n	8002dd2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	697a      	ldr	r2, [r7, #20]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <TIM_OC3_SetConfig+0xe0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <TIM_OC3_SetConfig+0x92>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a15      	ldr	r2, [pc, #84]	; (8002e34 <TIM_OC3_SetConfig+0xe4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d113      	bne.n	8002e0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	621a      	str	r2, [r3, #32]
}
 8002e24:	bf00      	nop
 8002e26:	371c      	adds	r7, #28
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40010000 	.word	0x40010000
 8002e34:	40010400 	.word	0x40010400

08002e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	031b      	lsls	r3, r3, #12
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a12      	ldr	r2, [pc, #72]	; (8002edc <TIM_OC4_SetConfig+0xa4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d003      	beq.n	8002ea0 <TIM_OC4_SetConfig+0x68>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <TIM_OC4_SetConfig+0xa8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d109      	bne.n	8002eb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ea6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	019b      	lsls	r3, r3, #6
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	621a      	str	r2, [r3, #32]
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	43db      	mvns	r3, r3
 8002f06:	401a      	ands	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a1a      	ldr	r2, [r3, #32]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	621a      	str	r2, [r3, #32]
}
 8002f22:	bf00      	nop
 8002f24:	371c      	adds	r7, #28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e05a      	b.n	8002ffe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a21      	ldr	r2, [pc, #132]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d022      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f94:	d01d      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00e      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a18      	ldr	r2, [pc, #96]	; (800301c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d009      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a17      	ldr	r2, [pc, #92]	; (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d004      	beq.n	8002fd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a15      	ldr	r2, [pc, #84]	; (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d10c      	bne.n	8002fec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40010000 	.word	0x40010000
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800
 8003018:	40000c00 	.word	0x40000c00
 800301c:	40010400 	.word	0x40010400
 8003020:	40014000 	.word	0x40014000
 8003024:	40001800 	.word	0x40001800

08003028 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d101      	bne.n	8003044 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003040:	2302      	movs	r3, #2
 8003042:	e03d      	b.n	80030c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	4313      	orrs	r3, r2
 8003066:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4313      	orrs	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4313      	orrs	r3, r2
 8003082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e03f      	b.n	8003186 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe f834 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	; 0x24
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003136:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fd19 	bl	8003b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691a      	ldr	r2, [r3, #16]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800314c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800315c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800316c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	4613      	mov	r3, r2
 800319a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d130      	bne.n	800320a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_UART_Transmit_IT+0x26>
 80031ae:	88fb      	ldrh	r3, [r7, #6]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e029      	b.n	800320c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Transmit_IT+0x38>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e022      	b.n	800320c <HAL_UART_Transmit_IT+0x7e>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	88fa      	ldrh	r2, [r7, #6]
 80031d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	88fa      	ldrh	r2, [r7, #6]
 80031de:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2221      	movs	r2, #33	; 0x21
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003204:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	e000      	b.n	800320c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800320a:	2302      	movs	r3, #2
  }
}
 800320c:	4618      	mov	r0, r3
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b20      	cmp	r3, #32
 8003230:	d11d      	bne.n	800326e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_UART_Receive_IT+0x26>
 8003238:	88fb      	ldrh	r3, [r7, #6]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e016      	b.n	8003270 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_UART_Receive_IT+0x38>
 800324c:	2302      	movs	r3, #2
 800324e:	e00f      	b.n	8003270 <HAL_UART_Receive_IT+0x58>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	461a      	mov	r2, r3
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 faab 	bl	80037c0 <UART_Start_Receive_IT>
 800326a:	4603      	mov	r3, r0
 800326c:	e000      	b.n	8003270 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800326e:	2302      	movs	r3, #2
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b0ba      	sub	sp, #232	; 0xe8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800329e:	2300      	movs	r3, #0
 80032a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10f      	bne.n	80032de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_UART_IRQHandler+0x66>
 80032ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fb8f 	bl	80039fa <UART_Receive_IT>
      return;
 80032dc:	e256      	b.n	800378c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80de 	beq.w	80034a4 <HAL_UART_IRQHandler+0x22c>
 80032e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 80d1 	beq.w	80034a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_UART_IRQHandler+0xae>
 800330e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0201 	orr.w	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <HAL_UART_IRQHandler+0xd2>
 8003332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	f043 0202 	orr.w	r2, r3, #2
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800334a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_UART_IRQHandler+0xf6>
 8003356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d005      	beq.n	800336e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f043 0204 	orr.w	r2, r3, #4
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d011      	beq.n	800339e <HAL_UART_IRQHandler+0x126>
 800337a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f043 0208 	orr.w	r2, r3, #8
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 81ed 	beq.w	8003782 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033ac:	f003 0320 	and.w	r3, r3, #32
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_UART_IRQHandler+0x14e>
 80033b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b8:	f003 0320 	and.w	r3, r3, #32
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fb1a 	bl	80039fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <HAL_UART_IRQHandler+0x17a>
 80033ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d04f      	beq.n	8003492 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fa22 	bl	800383c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b40      	cmp	r3, #64	; 0x40
 8003404:	d141      	bne.n	800348a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3314      	adds	r3, #20
 800340c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800341c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3314      	adds	r3, #20
 800342e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003432:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800343e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800344a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1d9      	bne.n	8003406 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	2b00      	cmp	r3, #0
 8003458:	d013      	beq.n	8003482 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345e:	4a7d      	ldr	r2, [pc, #500]	; (8003654 <HAL_UART_IRQHandler+0x3dc>)
 8003460:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe f8fb 	bl	8001662 <HAL_DMA_Abort_IT>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d016      	beq.n	80034a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800347c:	4610      	mov	r0, r2
 800347e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003480:	e00e      	b.n	80034a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f986 	bl	8003794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003488:	e00a      	b.n	80034a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f982 	bl	8003794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003490:	e006      	b.n	80034a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f97e 	bl	8003794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800349e:	e170      	b.n	8003782 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a0:	bf00      	nop
    return;
 80034a2:	e16e      	b.n	8003782 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	f040 814a 	bne.w	8003742 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 8143 	beq.w	8003742 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c0:	f003 0310 	and.w	r3, r3, #16
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 813c 	beq.w	8003742 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034ca:	2300      	movs	r3, #0
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	60bb      	str	r3, [r7, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b40      	cmp	r3, #64	; 0x40
 80034ec:	f040 80b4 	bne.w	8003658 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8140 	beq.w	8003786 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800350a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800350e:	429a      	cmp	r2, r3
 8003510:	f080 8139 	bcs.w	8003786 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800351a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003526:	f000 8088 	beq.w	800363a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	330c      	adds	r3, #12
 8003530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	330c      	adds	r3, #12
 8003552:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003556:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800355a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003562:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800356e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1d9      	bne.n	800352a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3314      	adds	r3, #20
 800357c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003588:	f023 0301 	bic.w	r3, r3, #1
 800358c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3314      	adds	r3, #20
 8003596:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800359a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800359e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80035a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80035ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e1      	bne.n	8003576 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3314      	adds	r3, #20
 80035b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3314      	adds	r3, #20
 80035d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035de:	e841 2300 	strex	r3, r2, [r1]
 80035e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1e3      	bne.n	80035b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330c      	adds	r3, #12
 80035fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003602:	e853 3f00 	ldrex	r3, [r3]
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800360a:	f023 0310 	bic.w	r3, r3, #16
 800360e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	330c      	adds	r3, #12
 8003618:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800361c:	65ba      	str	r2, [r7, #88]	; 0x58
 800361e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003620:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003622:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003624:	e841 2300 	strex	r3, r2, [r1]
 8003628:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800362a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e3      	bne.n	80035f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	4618      	mov	r0, r3
 8003636:	f7fd ffa4 	bl	8001582 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003642:	b29b      	uxth	r3, r3
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	b29b      	uxth	r3, r3
 8003648:	4619      	mov	r1, r3
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f8ac 	bl	80037a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003650:	e099      	b.n	8003786 <HAL_UART_IRQHandler+0x50e>
 8003652:	bf00      	nop
 8003654:	08003903 	.word	0x08003903
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003660:	b29b      	uxth	r3, r3
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 808b 	beq.w	800378a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8086 	beq.w	800378a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	330c      	adds	r3, #12
 8003684:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003690:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003694:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	330c      	adds	r3, #12
 800369e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80036a2:	647a      	str	r2, [r7, #68]	; 0x44
 80036a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80036a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e3      	bne.n	800367e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3314      	adds	r3, #20
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	623b      	str	r3, [r7, #32]
   return(result);
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3314      	adds	r3, #20
 80036d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036da:	633a      	str	r2, [r7, #48]	; 0x30
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e3      	bne.n	80036b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	330c      	adds	r3, #12
 8003702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	e853 3f00 	ldrex	r3, [r3]
 800370a:	60fb      	str	r3, [r7, #12]
   return(result);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0310 	bic.w	r3, r3, #16
 8003712:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	330c      	adds	r3, #12
 800371c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003720:	61fa      	str	r2, [r7, #28]
 8003722:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	69b9      	ldr	r1, [r7, #24]
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	617b      	str	r3, [r7, #20]
   return(result);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e3      	bne.n	80036fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003738:	4619      	mov	r1, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f834 	bl	80037a8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003740:	e023      	b.n	800378a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_UART_IRQHandler+0x4ea>
 800374e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8e5 	bl	800392a <UART_Transmit_IT>
    return;
 8003760:	e014      	b.n	800378c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <HAL_UART_IRQHandler+0x514>
 800376e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f925 	bl	80039ca <UART_EndTransmit_IT>
    return;
 8003780:	e004      	b.n	800378c <HAL_UART_IRQHandler+0x514>
    return;
 8003782:	bf00      	nop
 8003784:	e002      	b.n	800378c <HAL_UART_IRQHandler+0x514>
      return;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <HAL_UART_IRQHandler+0x514>
      return;
 800378a:	bf00      	nop
  }
}
 800378c:	37e8      	adds	r7, #232	; 0xe8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop

08003794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	4613      	mov	r3, r2
 80037cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	88fa      	ldrh	r2, [r7, #6]
 80037de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2222      	movs	r2, #34	; 0x22
 80037ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0220 	orr.w	r2, r2, #32
 800382c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800383c:	b480      	push	{r7}
 800383e:	b095      	sub	sp, #84	; 0x54
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	330c      	adds	r3, #12
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	e853 3f00 	ldrex	r3, [r3]
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800385a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003864:	643a      	str	r2, [r7, #64]	; 0x40
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800386a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800386c:	e841 2300 	strex	r3, r2, [r1]
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e5      	bne.n	8003844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3314      	adds	r3, #20
 800387e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	61fb      	str	r3, [r7, #28]
   return(result);
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f023 0301 	bic.w	r3, r3, #1
 800388e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003898:	62fa      	str	r2, [r7, #44]	; 0x2c
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800389e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e5      	bne.n	8003878 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d119      	bne.n	80038e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	330c      	adds	r3, #12
 80038ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	e853 3f00 	ldrex	r3, [r3]
 80038c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f023 0310 	bic.w	r3, r3, #16
 80038ca:	647b      	str	r3, [r7, #68]	; 0x44
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	330c      	adds	r3, #12
 80038d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038d4:	61ba      	str	r2, [r7, #24]
 80038d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d8:	6979      	ldr	r1, [r7, #20]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	e841 2300 	strex	r3, r2, [r1]
 80038e0:	613b      	str	r3, [r7, #16]
   return(result);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e5      	bne.n	80038b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038f6:	bf00      	nop
 80038f8:	3754      	adds	r7, #84	; 0x54
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff ff39 	bl	8003794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b21      	cmp	r3, #33	; 0x21
 800393c:	d13e      	bne.n	80039bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003946:	d114      	bne.n	8003972 <UART_Transmit_IT+0x48>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d110      	bne.n	8003972 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	461a      	mov	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003964:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	1c9a      	adds	r2, r3, #2
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	621a      	str	r2, [r3, #32]
 8003970:	e008      	b.n	8003984 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	1c59      	adds	r1, r3, #1
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6211      	str	r1, [r2, #32]
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29b      	uxth	r3, r3
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4619      	mov	r1, r3
 8003992:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10f      	bne.n	80039b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e000      	b.n	80039be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr

080039ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd f968 	bl	8000cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b08c      	sub	sp, #48	; 0x30
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b22      	cmp	r3, #34	; 0x22
 8003a0c:	f040 80ab 	bne.w	8003b66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a18:	d117      	bne.n	8003a4a <UART_Receive_IT+0x50>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d113      	bne.n	8003a4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	1c9a      	adds	r2, r3, #2
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
 8003a48:	e026      	b.n	8003a98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a5c:	d007      	beq.n	8003a6e <UART_Receive_IT+0x74>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10a      	bne.n	8003a7c <UART_Receive_IT+0x82>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	e008      	b.n	8003a8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d15a      	bne.n	8003b62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0220 	bic.w	r2, r2, #32
 8003aba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0201 	bic.w	r2, r2, #1
 8003ada:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d135      	bne.n	8003b58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	613b      	str	r3, [r7, #16]
   return(result);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f023 0310 	bic.w	r3, r3, #16
 8003b08:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b12:	623a      	str	r2, [r7, #32]
 8003b14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	69f9      	ldr	r1, [r7, #28]
 8003b18:	6a3a      	ldr	r2, [r7, #32]
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e5      	bne.n	8003af2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d10a      	bne.n	8003b4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fe29 	bl	80037a8 <HAL_UARTEx_RxEventCallback>
 8003b56:	e002      	b.n	8003b5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7fd f891 	bl	8000c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e002      	b.n	8003b68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
  }
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3730      	adds	r7, #48	; 0x30
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b74:	b0c0      	sub	sp, #256	; 0x100
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8c:	68d9      	ldr	r1, [r3, #12]
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	ea40 0301 	orr.w	r3, r0, r1
 8003b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bc8:	f021 010c 	bic.w	r1, r1, #12
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bea:	6999      	ldr	r1, [r3, #24]
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	ea40 0301 	orr.w	r3, r0, r1
 8003bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b8f      	ldr	r3, [pc, #572]	; (8003e3c <UART_SetConfig+0x2cc>)
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d005      	beq.n	8003c10 <UART_SetConfig+0xa0>
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	4b8d      	ldr	r3, [pc, #564]	; (8003e40 <UART_SetConfig+0x2d0>)
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d104      	bne.n	8003c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7fe fb3a 	bl	8002288 <HAL_RCC_GetPCLK2Freq>
 8003c14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c18:	e003      	b.n	8003c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c1a:	f7fe fb21 	bl	8002260 <HAL_RCC_GetPCLK1Freq>
 8003c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2c:	f040 810c 	bne.w	8003e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c42:	4622      	mov	r2, r4
 8003c44:	462b      	mov	r3, r5
 8003c46:	1891      	adds	r1, r2, r2
 8003c48:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c4a:	415b      	adcs	r3, r3
 8003c4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c52:	4621      	mov	r1, r4
 8003c54:	eb12 0801 	adds.w	r8, r2, r1
 8003c58:	4629      	mov	r1, r5
 8003c5a:	eb43 0901 	adc.w	r9, r3, r1
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c72:	4690      	mov	r8, r2
 8003c74:	4699      	mov	r9, r3
 8003c76:	4623      	mov	r3, r4
 8003c78:	eb18 0303 	adds.w	r3, r8, r3
 8003c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c80:	462b      	mov	r3, r5
 8003c82:	eb49 0303 	adc.w	r3, r9, r3
 8003c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	18db      	adds	r3, r3, r3
 8003ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	eb42 0303 	adc.w	r3, r2, r3
 8003caa:	657b      	str	r3, [r7, #84]	; 0x54
 8003cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cb4:	f7fc faf4 	bl	80002a0 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4b61      	ldr	r3, [pc, #388]	; (8003e44 <UART_SetConfig+0x2d4>)
 8003cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	011c      	lsls	r4, r3, #4
 8003cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	1891      	adds	r1, r2, r2
 8003cde:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ce8:	4641      	mov	r1, r8
 8003cea:	eb12 0a01 	adds.w	sl, r2, r1
 8003cee:	4649      	mov	r1, r9
 8003cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d08:	4692      	mov	sl, r2
 8003d0a:	469b      	mov	fp, r3
 8003d0c:	4643      	mov	r3, r8
 8003d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d16:	464b      	mov	r3, r9
 8003d18:	eb4b 0303 	adc.w	r3, fp, r3
 8003d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d34:	460b      	mov	r3, r1
 8003d36:	18db      	adds	r3, r3, r3
 8003d38:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	eb42 0303 	adc.w	r3, r2, r3
 8003d40:	647b      	str	r3, [r7, #68]	; 0x44
 8003d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d4a:	f7fc faa9 	bl	80002a0 <__aeabi_uldivmod>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <UART_SetConfig+0x2d4>)
 8003d56:	fba3 2301 	umull	r2, r3, r3, r1
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2264      	movs	r2, #100	; 0x64
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	1acb      	subs	r3, r1, r3
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d6a:	4b36      	ldr	r3, [pc, #216]	; (8003e44 <UART_SetConfig+0x2d4>)
 8003d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d78:	441c      	add	r4, r3
 8003d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	1891      	adds	r1, r2, r2
 8003d92:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d94:	415b      	adcs	r3, r3
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	1851      	adds	r1, r2, r1
 8003da0:	6339      	str	r1, [r7, #48]	; 0x30
 8003da2:	4649      	mov	r1, r9
 8003da4:	414b      	adcs	r3, r1
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003db4:	4659      	mov	r1, fp
 8003db6:	00cb      	lsls	r3, r1, #3
 8003db8:	4651      	mov	r1, sl
 8003dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	00ca      	lsls	r2, r1, #3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4642      	mov	r2, r8
 8003dca:	189b      	adds	r3, r3, r2
 8003dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003dd0:	464b      	mov	r3, r9
 8003dd2:	460a      	mov	r2, r1
 8003dd4:	eb42 0303 	adc.w	r3, r2, r3
 8003dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003de8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003df0:	460b      	mov	r3, r1
 8003df2:	18db      	adds	r3, r3, r3
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df6:	4613      	mov	r3, r2
 8003df8:	eb42 0303 	adc.w	r3, r2, r3
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e06:	f7fc fa4b 	bl	80002a0 <__aeabi_uldivmod>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <UART_SetConfig+0x2d4>)
 8003e10:	fba3 1302 	umull	r1, r3, r3, r2
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	2164      	movs	r1, #100	; 0x64
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	3332      	adds	r3, #50	; 0x32
 8003e22:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <UART_SetConfig+0x2d4>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	f003 0207 	and.w	r2, r3, #7
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4422      	add	r2, r4
 8003e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e38:	e105      	b.n	8004046 <UART_SetConfig+0x4d6>
 8003e3a:	bf00      	nop
 8003e3c:	40011000 	.word	0x40011000
 8003e40:	40011400 	.word	0x40011400
 8003e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e5a:	4642      	mov	r2, r8
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	1891      	adds	r1, r2, r2
 8003e60:	6239      	str	r1, [r7, #32]
 8003e62:	415b      	adcs	r3, r3
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e6a:	4641      	mov	r1, r8
 8003e6c:	1854      	adds	r4, r2, r1
 8003e6e:	4649      	mov	r1, r9
 8003e70:	eb43 0501 	adc.w	r5, r3, r1
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	00eb      	lsls	r3, r5, #3
 8003e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e82:	00e2      	lsls	r2, r4, #3
 8003e84:	4614      	mov	r4, r2
 8003e86:	461d      	mov	r5, r3
 8003e88:	4643      	mov	r3, r8
 8003e8a:	18e3      	adds	r3, r4, r3
 8003e8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e90:	464b      	mov	r3, r9
 8003e92:	eb45 0303 	adc.w	r3, r5, r3
 8003e96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ea6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	008b      	lsls	r3, r1, #2
 8003eba:	4621      	mov	r1, r4
 8003ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	008a      	lsls	r2, r1, #2
 8003ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ec8:	f7fc f9ea 	bl	80002a0 <__aeabi_uldivmod>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4b60      	ldr	r3, [pc, #384]	; (8004054 <UART_SetConfig+0x4e4>)
 8003ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	011c      	lsls	r4, r3, #4
 8003eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ee4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003eec:	4642      	mov	r2, r8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	1891      	adds	r1, r2, r2
 8003ef2:	61b9      	str	r1, [r7, #24]
 8003ef4:	415b      	adcs	r3, r3
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003efc:	4641      	mov	r1, r8
 8003efe:	1851      	adds	r1, r2, r1
 8003f00:	6139      	str	r1, [r7, #16]
 8003f02:	4649      	mov	r1, r9
 8003f04:	414b      	adcs	r3, r1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f14:	4659      	mov	r1, fp
 8003f16:	00cb      	lsls	r3, r1, #3
 8003f18:	4651      	mov	r1, sl
 8003f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1e:	4651      	mov	r1, sl
 8003f20:	00ca      	lsls	r2, r1, #3
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	4642      	mov	r2, r8
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f30:	464b      	mov	r3, r9
 8003f32:	460a      	mov	r2, r1
 8003f34:	eb42 0303 	adc.w	r3, r2, r3
 8003f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f54:	4649      	mov	r1, r9
 8003f56:	008b      	lsls	r3, r1, #2
 8003f58:	4641      	mov	r1, r8
 8003f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f5e:	4641      	mov	r1, r8
 8003f60:	008a      	lsls	r2, r1, #2
 8003f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f66:	f7fc f99b 	bl	80002a0 <__aeabi_uldivmod>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4b39      	ldr	r3, [pc, #228]	; (8004054 <UART_SetConfig+0x4e4>)
 8003f70:	fba3 1302 	umull	r1, r3, r3, r2
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	2164      	movs	r1, #100	; 0x64
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	3332      	adds	r3, #50	; 0x32
 8003f82:	4a34      	ldr	r2, [pc, #208]	; (8004054 <UART_SetConfig+0x4e4>)
 8003f84:	fba2 2303 	umull	r2, r3, r2, r3
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f8e:	441c      	add	r4, r3
 8003f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f94:	2200      	movs	r2, #0
 8003f96:	673b      	str	r3, [r7, #112]	; 0x70
 8003f98:	677a      	str	r2, [r7, #116]	; 0x74
 8003f9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f9e:	4642      	mov	r2, r8
 8003fa0:	464b      	mov	r3, r9
 8003fa2:	1891      	adds	r1, r2, r2
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	415b      	adcs	r3, r3
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fae:	4641      	mov	r1, r8
 8003fb0:	1851      	adds	r1, r2, r1
 8003fb2:	6039      	str	r1, [r7, #0]
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	414b      	adcs	r3, r1
 8003fb8:	607b      	str	r3, [r7, #4]
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fc6:	4659      	mov	r1, fp
 8003fc8:	00cb      	lsls	r3, r1, #3
 8003fca:	4651      	mov	r1, sl
 8003fcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fd0:	4651      	mov	r1, sl
 8003fd2:	00ca      	lsls	r2, r1, #3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4603      	mov	r3, r0
 8003fda:	4642      	mov	r2, r8
 8003fdc:	189b      	adds	r3, r3, r2
 8003fde:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004002:	4649      	mov	r1, r9
 8004004:	008b      	lsls	r3, r1, #2
 8004006:	4641      	mov	r1, r8
 8004008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800400c:	4641      	mov	r1, r8
 800400e:	008a      	lsls	r2, r1, #2
 8004010:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004014:	f7fc f944 	bl	80002a0 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4b0d      	ldr	r3, [pc, #52]	; (8004054 <UART_SetConfig+0x4e4>)
 800401e:	fba3 1302 	umull	r1, r3, r3, r2
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	2164      	movs	r1, #100	; 0x64
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	3332      	adds	r3, #50	; 0x32
 8004030:	4a08      	ldr	r2, [pc, #32]	; (8004054 <UART_SetConfig+0x4e4>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4422      	add	r2, r4
 8004044:	609a      	str	r2, [r3, #8]
}
 8004046:	bf00      	nop
 8004048:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800404c:	46bd      	mov	sp, r7
 800404e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004052:	bf00      	nop
 8004054:	51eb851f 	.word	0x51eb851f

08004058 <__errno>:
 8004058:	4b01      	ldr	r3, [pc, #4]	; (8004060 <__errno+0x8>)
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2000013c 	.word	0x2000013c

08004064 <__libc_init_array>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	4d0d      	ldr	r5, [pc, #52]	; (800409c <__libc_init_array+0x38>)
 8004068:	4c0d      	ldr	r4, [pc, #52]	; (80040a0 <__libc_init_array+0x3c>)
 800406a:	1b64      	subs	r4, r4, r5
 800406c:	10a4      	asrs	r4, r4, #2
 800406e:	2600      	movs	r6, #0
 8004070:	42a6      	cmp	r6, r4
 8004072:	d109      	bne.n	8004088 <__libc_init_array+0x24>
 8004074:	4d0b      	ldr	r5, [pc, #44]	; (80040a4 <__libc_init_array+0x40>)
 8004076:	4c0c      	ldr	r4, [pc, #48]	; (80040a8 <__libc_init_array+0x44>)
 8004078:	f000 fcae 	bl	80049d8 <_init>
 800407c:	1b64      	subs	r4, r4, r5
 800407e:	10a4      	asrs	r4, r4, #2
 8004080:	2600      	movs	r6, #0
 8004082:	42a6      	cmp	r6, r4
 8004084:	d105      	bne.n	8004092 <__libc_init_array+0x2e>
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	f855 3b04 	ldr.w	r3, [r5], #4
 800408c:	4798      	blx	r3
 800408e:	3601      	adds	r6, #1
 8004090:	e7ee      	b.n	8004070 <__libc_init_array+0xc>
 8004092:	f855 3b04 	ldr.w	r3, [r5], #4
 8004096:	4798      	blx	r3
 8004098:	3601      	adds	r6, #1
 800409a:	e7f2      	b.n	8004082 <__libc_init_array+0x1e>
 800409c:	08004b04 	.word	0x08004b04
 80040a0:	08004b04 	.word	0x08004b04
 80040a4:	08004b04 	.word	0x08004b04
 80040a8:	08004b08 	.word	0x08004b08

080040ac <malloc>:
 80040ac:	4b02      	ldr	r3, [pc, #8]	; (80040b8 <malloc+0xc>)
 80040ae:	4601      	mov	r1, r0
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	f000 b877 	b.w	80041a4 <_malloc_r>
 80040b6:	bf00      	nop
 80040b8:	2000013c 	.word	0x2000013c

080040bc <memset>:
 80040bc:	4402      	add	r2, r0
 80040be:	4603      	mov	r3, r0
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d100      	bne.n	80040c6 <memset+0xa>
 80040c4:	4770      	bx	lr
 80040c6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ca:	e7f9      	b.n	80040c0 <memset+0x4>

080040cc <_free_r>:
 80040cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ce:	2900      	cmp	r1, #0
 80040d0:	d044      	beq.n	800415c <_free_r+0x90>
 80040d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040d6:	9001      	str	r0, [sp, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f1a1 0404 	sub.w	r4, r1, #4
 80040de:	bfb8      	it	lt
 80040e0:	18e4      	addlt	r4, r4, r3
 80040e2:	f000 f91b 	bl	800431c <__malloc_lock>
 80040e6:	4a1e      	ldr	r2, [pc, #120]	; (8004160 <_free_r+0x94>)
 80040e8:	9801      	ldr	r0, [sp, #4]
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	b933      	cbnz	r3, 80040fc <_free_r+0x30>
 80040ee:	6063      	str	r3, [r4, #4]
 80040f0:	6014      	str	r4, [r2, #0]
 80040f2:	b003      	add	sp, #12
 80040f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040f8:	f000 b916 	b.w	8004328 <__malloc_unlock>
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	d908      	bls.n	8004112 <_free_r+0x46>
 8004100:	6825      	ldr	r5, [r4, #0]
 8004102:	1961      	adds	r1, r4, r5
 8004104:	428b      	cmp	r3, r1
 8004106:	bf01      	itttt	eq
 8004108:	6819      	ldreq	r1, [r3, #0]
 800410a:	685b      	ldreq	r3, [r3, #4]
 800410c:	1949      	addeq	r1, r1, r5
 800410e:	6021      	streq	r1, [r4, #0]
 8004110:	e7ed      	b.n	80040ee <_free_r+0x22>
 8004112:	461a      	mov	r2, r3
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	b10b      	cbz	r3, 800411c <_free_r+0x50>
 8004118:	42a3      	cmp	r3, r4
 800411a:	d9fa      	bls.n	8004112 <_free_r+0x46>
 800411c:	6811      	ldr	r1, [r2, #0]
 800411e:	1855      	adds	r5, r2, r1
 8004120:	42a5      	cmp	r5, r4
 8004122:	d10b      	bne.n	800413c <_free_r+0x70>
 8004124:	6824      	ldr	r4, [r4, #0]
 8004126:	4421      	add	r1, r4
 8004128:	1854      	adds	r4, r2, r1
 800412a:	42a3      	cmp	r3, r4
 800412c:	6011      	str	r1, [r2, #0]
 800412e:	d1e0      	bne.n	80040f2 <_free_r+0x26>
 8004130:	681c      	ldr	r4, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	6053      	str	r3, [r2, #4]
 8004136:	4421      	add	r1, r4
 8004138:	6011      	str	r1, [r2, #0]
 800413a:	e7da      	b.n	80040f2 <_free_r+0x26>
 800413c:	d902      	bls.n	8004144 <_free_r+0x78>
 800413e:	230c      	movs	r3, #12
 8004140:	6003      	str	r3, [r0, #0]
 8004142:	e7d6      	b.n	80040f2 <_free_r+0x26>
 8004144:	6825      	ldr	r5, [r4, #0]
 8004146:	1961      	adds	r1, r4, r5
 8004148:	428b      	cmp	r3, r1
 800414a:	bf04      	itt	eq
 800414c:	6819      	ldreq	r1, [r3, #0]
 800414e:	685b      	ldreq	r3, [r3, #4]
 8004150:	6063      	str	r3, [r4, #4]
 8004152:	bf04      	itt	eq
 8004154:	1949      	addeq	r1, r1, r5
 8004156:	6021      	streq	r1, [r4, #0]
 8004158:	6054      	str	r4, [r2, #4]
 800415a:	e7ca      	b.n	80040f2 <_free_r+0x26>
 800415c:	b003      	add	sp, #12
 800415e:	bd30      	pop	{r4, r5, pc}
 8004160:	20000368 	.word	0x20000368

08004164 <sbrk_aligned>:
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	4e0e      	ldr	r6, [pc, #56]	; (80041a0 <sbrk_aligned+0x3c>)
 8004168:	460c      	mov	r4, r1
 800416a:	6831      	ldr	r1, [r6, #0]
 800416c:	4605      	mov	r5, r0
 800416e:	b911      	cbnz	r1, 8004176 <sbrk_aligned+0x12>
 8004170:	f000 f88c 	bl	800428c <_sbrk_r>
 8004174:	6030      	str	r0, [r6, #0]
 8004176:	4621      	mov	r1, r4
 8004178:	4628      	mov	r0, r5
 800417a:	f000 f887 	bl	800428c <_sbrk_r>
 800417e:	1c43      	adds	r3, r0, #1
 8004180:	d00a      	beq.n	8004198 <sbrk_aligned+0x34>
 8004182:	1cc4      	adds	r4, r0, #3
 8004184:	f024 0403 	bic.w	r4, r4, #3
 8004188:	42a0      	cmp	r0, r4
 800418a:	d007      	beq.n	800419c <sbrk_aligned+0x38>
 800418c:	1a21      	subs	r1, r4, r0
 800418e:	4628      	mov	r0, r5
 8004190:	f000 f87c 	bl	800428c <_sbrk_r>
 8004194:	3001      	adds	r0, #1
 8004196:	d101      	bne.n	800419c <sbrk_aligned+0x38>
 8004198:	f04f 34ff 	mov.w	r4, #4294967295
 800419c:	4620      	mov	r0, r4
 800419e:	bd70      	pop	{r4, r5, r6, pc}
 80041a0:	2000036c 	.word	0x2000036c

080041a4 <_malloc_r>:
 80041a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a8:	1ccd      	adds	r5, r1, #3
 80041aa:	f025 0503 	bic.w	r5, r5, #3
 80041ae:	3508      	adds	r5, #8
 80041b0:	2d0c      	cmp	r5, #12
 80041b2:	bf38      	it	cc
 80041b4:	250c      	movcc	r5, #12
 80041b6:	2d00      	cmp	r5, #0
 80041b8:	4607      	mov	r7, r0
 80041ba:	db01      	blt.n	80041c0 <_malloc_r+0x1c>
 80041bc:	42a9      	cmp	r1, r5
 80041be:	d905      	bls.n	80041cc <_malloc_r+0x28>
 80041c0:	230c      	movs	r3, #12
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	2600      	movs	r6, #0
 80041c6:	4630      	mov	r0, r6
 80041c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041cc:	4e2e      	ldr	r6, [pc, #184]	; (8004288 <_malloc_r+0xe4>)
 80041ce:	f000 f8a5 	bl	800431c <__malloc_lock>
 80041d2:	6833      	ldr	r3, [r6, #0]
 80041d4:	461c      	mov	r4, r3
 80041d6:	bb34      	cbnz	r4, 8004226 <_malloc_r+0x82>
 80041d8:	4629      	mov	r1, r5
 80041da:	4638      	mov	r0, r7
 80041dc:	f7ff ffc2 	bl	8004164 <sbrk_aligned>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	4604      	mov	r4, r0
 80041e4:	d14d      	bne.n	8004282 <_malloc_r+0xde>
 80041e6:	6834      	ldr	r4, [r6, #0]
 80041e8:	4626      	mov	r6, r4
 80041ea:	2e00      	cmp	r6, #0
 80041ec:	d140      	bne.n	8004270 <_malloc_r+0xcc>
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	4631      	mov	r1, r6
 80041f2:	4638      	mov	r0, r7
 80041f4:	eb04 0803 	add.w	r8, r4, r3
 80041f8:	f000 f848 	bl	800428c <_sbrk_r>
 80041fc:	4580      	cmp	r8, r0
 80041fe:	d13a      	bne.n	8004276 <_malloc_r+0xd2>
 8004200:	6821      	ldr	r1, [r4, #0]
 8004202:	3503      	adds	r5, #3
 8004204:	1a6d      	subs	r5, r5, r1
 8004206:	f025 0503 	bic.w	r5, r5, #3
 800420a:	3508      	adds	r5, #8
 800420c:	2d0c      	cmp	r5, #12
 800420e:	bf38      	it	cc
 8004210:	250c      	movcc	r5, #12
 8004212:	4629      	mov	r1, r5
 8004214:	4638      	mov	r0, r7
 8004216:	f7ff ffa5 	bl	8004164 <sbrk_aligned>
 800421a:	3001      	adds	r0, #1
 800421c:	d02b      	beq.n	8004276 <_malloc_r+0xd2>
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	442b      	add	r3, r5
 8004222:	6023      	str	r3, [r4, #0]
 8004224:	e00e      	b.n	8004244 <_malloc_r+0xa0>
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	1b52      	subs	r2, r2, r5
 800422a:	d41e      	bmi.n	800426a <_malloc_r+0xc6>
 800422c:	2a0b      	cmp	r2, #11
 800422e:	d916      	bls.n	800425e <_malloc_r+0xba>
 8004230:	1961      	adds	r1, r4, r5
 8004232:	42a3      	cmp	r3, r4
 8004234:	6025      	str	r5, [r4, #0]
 8004236:	bf18      	it	ne
 8004238:	6059      	strne	r1, [r3, #4]
 800423a:	6863      	ldr	r3, [r4, #4]
 800423c:	bf08      	it	eq
 800423e:	6031      	streq	r1, [r6, #0]
 8004240:	5162      	str	r2, [r4, r5]
 8004242:	604b      	str	r3, [r1, #4]
 8004244:	4638      	mov	r0, r7
 8004246:	f104 060b 	add.w	r6, r4, #11
 800424a:	f000 f86d 	bl	8004328 <__malloc_unlock>
 800424e:	f026 0607 	bic.w	r6, r6, #7
 8004252:	1d23      	adds	r3, r4, #4
 8004254:	1af2      	subs	r2, r6, r3
 8004256:	d0b6      	beq.n	80041c6 <_malloc_r+0x22>
 8004258:	1b9b      	subs	r3, r3, r6
 800425a:	50a3      	str	r3, [r4, r2]
 800425c:	e7b3      	b.n	80041c6 <_malloc_r+0x22>
 800425e:	6862      	ldr	r2, [r4, #4]
 8004260:	42a3      	cmp	r3, r4
 8004262:	bf0c      	ite	eq
 8004264:	6032      	streq	r2, [r6, #0]
 8004266:	605a      	strne	r2, [r3, #4]
 8004268:	e7ec      	b.n	8004244 <_malloc_r+0xa0>
 800426a:	4623      	mov	r3, r4
 800426c:	6864      	ldr	r4, [r4, #4]
 800426e:	e7b2      	b.n	80041d6 <_malloc_r+0x32>
 8004270:	4634      	mov	r4, r6
 8004272:	6876      	ldr	r6, [r6, #4]
 8004274:	e7b9      	b.n	80041ea <_malloc_r+0x46>
 8004276:	230c      	movs	r3, #12
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4638      	mov	r0, r7
 800427c:	f000 f854 	bl	8004328 <__malloc_unlock>
 8004280:	e7a1      	b.n	80041c6 <_malloc_r+0x22>
 8004282:	6025      	str	r5, [r4, #0]
 8004284:	e7de      	b.n	8004244 <_malloc_r+0xa0>
 8004286:	bf00      	nop
 8004288:	20000368 	.word	0x20000368

0800428c <_sbrk_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d06      	ldr	r5, [pc, #24]	; (80042a8 <_sbrk_r+0x1c>)
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	f7fc fdc6 	bl	8000e28 <_sbrk>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d102      	bne.n	80042a6 <_sbrk_r+0x1a>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	b103      	cbz	r3, 80042a6 <_sbrk_r+0x1a>
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	20000370 	.word	0x20000370

080042ac <siprintf>:
 80042ac:	b40e      	push	{r1, r2, r3}
 80042ae:	b500      	push	{lr}
 80042b0:	b09c      	sub	sp, #112	; 0x70
 80042b2:	ab1d      	add	r3, sp, #116	; 0x74
 80042b4:	9002      	str	r0, [sp, #8]
 80042b6:	9006      	str	r0, [sp, #24]
 80042b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80042bc:	4809      	ldr	r0, [pc, #36]	; (80042e4 <siprintf+0x38>)
 80042be:	9107      	str	r1, [sp, #28]
 80042c0:	9104      	str	r1, [sp, #16]
 80042c2:	4909      	ldr	r1, [pc, #36]	; (80042e8 <siprintf+0x3c>)
 80042c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80042c8:	9105      	str	r1, [sp, #20]
 80042ca:	6800      	ldr	r0, [r0, #0]
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	a902      	add	r1, sp, #8
 80042d0:	f000 f88c 	bl	80043ec <_svfiprintf_r>
 80042d4:	9b02      	ldr	r3, [sp, #8]
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	b01c      	add	sp, #112	; 0x70
 80042dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e0:	b003      	add	sp, #12
 80042e2:	4770      	bx	lr
 80042e4:	2000013c 	.word	0x2000013c
 80042e8:	ffff0208 	.word	0xffff0208

080042ec <strcat>:
 80042ec:	b510      	push	{r4, lr}
 80042ee:	4602      	mov	r2, r0
 80042f0:	7814      	ldrb	r4, [r2, #0]
 80042f2:	4613      	mov	r3, r2
 80042f4:	3201      	adds	r2, #1
 80042f6:	2c00      	cmp	r4, #0
 80042f8:	d1fa      	bne.n	80042f0 <strcat+0x4>
 80042fa:	3b01      	subs	r3, #1
 80042fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004300:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004304:	2a00      	cmp	r2, #0
 8004306:	d1f9      	bne.n	80042fc <strcat+0x10>
 8004308:	bd10      	pop	{r4, pc}

0800430a <strcpy>:
 800430a:	4603      	mov	r3, r0
 800430c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004310:	f803 2b01 	strb.w	r2, [r3], #1
 8004314:	2a00      	cmp	r2, #0
 8004316:	d1f9      	bne.n	800430c <strcpy+0x2>
 8004318:	4770      	bx	lr
	...

0800431c <__malloc_lock>:
 800431c:	4801      	ldr	r0, [pc, #4]	; (8004324 <__malloc_lock+0x8>)
 800431e:	f000 baf9 	b.w	8004914 <__retarget_lock_acquire_recursive>
 8004322:	bf00      	nop
 8004324:	20000374 	.word	0x20000374

08004328 <__malloc_unlock>:
 8004328:	4801      	ldr	r0, [pc, #4]	; (8004330 <__malloc_unlock+0x8>)
 800432a:	f000 baf4 	b.w	8004916 <__retarget_lock_release_recursive>
 800432e:	bf00      	nop
 8004330:	20000374 	.word	0x20000374

08004334 <__ssputs_r>:
 8004334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	688e      	ldr	r6, [r1, #8]
 800433a:	429e      	cmp	r6, r3
 800433c:	4682      	mov	sl, r0
 800433e:	460c      	mov	r4, r1
 8004340:	4690      	mov	r8, r2
 8004342:	461f      	mov	r7, r3
 8004344:	d838      	bhi.n	80043b8 <__ssputs_r+0x84>
 8004346:	898a      	ldrh	r2, [r1, #12]
 8004348:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800434c:	d032      	beq.n	80043b4 <__ssputs_r+0x80>
 800434e:	6825      	ldr	r5, [r4, #0]
 8004350:	6909      	ldr	r1, [r1, #16]
 8004352:	eba5 0901 	sub.w	r9, r5, r1
 8004356:	6965      	ldr	r5, [r4, #20]
 8004358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800435c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004360:	3301      	adds	r3, #1
 8004362:	444b      	add	r3, r9
 8004364:	106d      	asrs	r5, r5, #1
 8004366:	429d      	cmp	r5, r3
 8004368:	bf38      	it	cc
 800436a:	461d      	movcc	r5, r3
 800436c:	0553      	lsls	r3, r2, #21
 800436e:	d531      	bpl.n	80043d4 <__ssputs_r+0xa0>
 8004370:	4629      	mov	r1, r5
 8004372:	f7ff ff17 	bl	80041a4 <_malloc_r>
 8004376:	4606      	mov	r6, r0
 8004378:	b950      	cbnz	r0, 8004390 <__ssputs_r+0x5c>
 800437a:	230c      	movs	r3, #12
 800437c:	f8ca 3000 	str.w	r3, [sl]
 8004380:	89a3      	ldrh	r3, [r4, #12]
 8004382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004386:	81a3      	strh	r3, [r4, #12]
 8004388:	f04f 30ff 	mov.w	r0, #4294967295
 800438c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004390:	6921      	ldr	r1, [r4, #16]
 8004392:	464a      	mov	r2, r9
 8004394:	f000 fac0 	bl	8004918 <memcpy>
 8004398:	89a3      	ldrh	r3, [r4, #12]
 800439a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800439e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a2:	81a3      	strh	r3, [r4, #12]
 80043a4:	6126      	str	r6, [r4, #16]
 80043a6:	6165      	str	r5, [r4, #20]
 80043a8:	444e      	add	r6, r9
 80043aa:	eba5 0509 	sub.w	r5, r5, r9
 80043ae:	6026      	str	r6, [r4, #0]
 80043b0:	60a5      	str	r5, [r4, #8]
 80043b2:	463e      	mov	r6, r7
 80043b4:	42be      	cmp	r6, r7
 80043b6:	d900      	bls.n	80043ba <__ssputs_r+0x86>
 80043b8:	463e      	mov	r6, r7
 80043ba:	6820      	ldr	r0, [r4, #0]
 80043bc:	4632      	mov	r2, r6
 80043be:	4641      	mov	r1, r8
 80043c0:	f000 fab8 	bl	8004934 <memmove>
 80043c4:	68a3      	ldr	r3, [r4, #8]
 80043c6:	1b9b      	subs	r3, r3, r6
 80043c8:	60a3      	str	r3, [r4, #8]
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	4433      	add	r3, r6
 80043ce:	6023      	str	r3, [r4, #0]
 80043d0:	2000      	movs	r0, #0
 80043d2:	e7db      	b.n	800438c <__ssputs_r+0x58>
 80043d4:	462a      	mov	r2, r5
 80043d6:	f000 fac7 	bl	8004968 <_realloc_r>
 80043da:	4606      	mov	r6, r0
 80043dc:	2800      	cmp	r0, #0
 80043de:	d1e1      	bne.n	80043a4 <__ssputs_r+0x70>
 80043e0:	6921      	ldr	r1, [r4, #16]
 80043e2:	4650      	mov	r0, sl
 80043e4:	f7ff fe72 	bl	80040cc <_free_r>
 80043e8:	e7c7      	b.n	800437a <__ssputs_r+0x46>
	...

080043ec <_svfiprintf_r>:
 80043ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f0:	4698      	mov	r8, r3
 80043f2:	898b      	ldrh	r3, [r1, #12]
 80043f4:	061b      	lsls	r3, r3, #24
 80043f6:	b09d      	sub	sp, #116	; 0x74
 80043f8:	4607      	mov	r7, r0
 80043fa:	460d      	mov	r5, r1
 80043fc:	4614      	mov	r4, r2
 80043fe:	d50e      	bpl.n	800441e <_svfiprintf_r+0x32>
 8004400:	690b      	ldr	r3, [r1, #16]
 8004402:	b963      	cbnz	r3, 800441e <_svfiprintf_r+0x32>
 8004404:	2140      	movs	r1, #64	; 0x40
 8004406:	f7ff fecd 	bl	80041a4 <_malloc_r>
 800440a:	6028      	str	r0, [r5, #0]
 800440c:	6128      	str	r0, [r5, #16]
 800440e:	b920      	cbnz	r0, 800441a <_svfiprintf_r+0x2e>
 8004410:	230c      	movs	r3, #12
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	e0d1      	b.n	80045be <_svfiprintf_r+0x1d2>
 800441a:	2340      	movs	r3, #64	; 0x40
 800441c:	616b      	str	r3, [r5, #20]
 800441e:	2300      	movs	r3, #0
 8004420:	9309      	str	r3, [sp, #36]	; 0x24
 8004422:	2320      	movs	r3, #32
 8004424:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004428:	f8cd 800c 	str.w	r8, [sp, #12]
 800442c:	2330      	movs	r3, #48	; 0x30
 800442e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80045d8 <_svfiprintf_r+0x1ec>
 8004432:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004436:	f04f 0901 	mov.w	r9, #1
 800443a:	4623      	mov	r3, r4
 800443c:	469a      	mov	sl, r3
 800443e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004442:	b10a      	cbz	r2, 8004448 <_svfiprintf_r+0x5c>
 8004444:	2a25      	cmp	r2, #37	; 0x25
 8004446:	d1f9      	bne.n	800443c <_svfiprintf_r+0x50>
 8004448:	ebba 0b04 	subs.w	fp, sl, r4
 800444c:	d00b      	beq.n	8004466 <_svfiprintf_r+0x7a>
 800444e:	465b      	mov	r3, fp
 8004450:	4622      	mov	r2, r4
 8004452:	4629      	mov	r1, r5
 8004454:	4638      	mov	r0, r7
 8004456:	f7ff ff6d 	bl	8004334 <__ssputs_r>
 800445a:	3001      	adds	r0, #1
 800445c:	f000 80aa 	beq.w	80045b4 <_svfiprintf_r+0x1c8>
 8004460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004462:	445a      	add	r2, fp
 8004464:	9209      	str	r2, [sp, #36]	; 0x24
 8004466:	f89a 3000 	ldrb.w	r3, [sl]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80a2 	beq.w	80045b4 <_svfiprintf_r+0x1c8>
 8004470:	2300      	movs	r3, #0
 8004472:	f04f 32ff 	mov.w	r2, #4294967295
 8004476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800447a:	f10a 0a01 	add.w	sl, sl, #1
 800447e:	9304      	str	r3, [sp, #16]
 8004480:	9307      	str	r3, [sp, #28]
 8004482:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004486:	931a      	str	r3, [sp, #104]	; 0x68
 8004488:	4654      	mov	r4, sl
 800448a:	2205      	movs	r2, #5
 800448c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004490:	4851      	ldr	r0, [pc, #324]	; (80045d8 <_svfiprintf_r+0x1ec>)
 8004492:	f7fb feb5 	bl	8000200 <memchr>
 8004496:	9a04      	ldr	r2, [sp, #16]
 8004498:	b9d8      	cbnz	r0, 80044d2 <_svfiprintf_r+0xe6>
 800449a:	06d0      	lsls	r0, r2, #27
 800449c:	bf44      	itt	mi
 800449e:	2320      	movmi	r3, #32
 80044a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044a4:	0711      	lsls	r1, r2, #28
 80044a6:	bf44      	itt	mi
 80044a8:	232b      	movmi	r3, #43	; 0x2b
 80044aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80044ae:	f89a 3000 	ldrb.w	r3, [sl]
 80044b2:	2b2a      	cmp	r3, #42	; 0x2a
 80044b4:	d015      	beq.n	80044e2 <_svfiprintf_r+0xf6>
 80044b6:	9a07      	ldr	r2, [sp, #28]
 80044b8:	4654      	mov	r4, sl
 80044ba:	2000      	movs	r0, #0
 80044bc:	f04f 0c0a 	mov.w	ip, #10
 80044c0:	4621      	mov	r1, r4
 80044c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044c6:	3b30      	subs	r3, #48	; 0x30
 80044c8:	2b09      	cmp	r3, #9
 80044ca:	d94e      	bls.n	800456a <_svfiprintf_r+0x17e>
 80044cc:	b1b0      	cbz	r0, 80044fc <_svfiprintf_r+0x110>
 80044ce:	9207      	str	r2, [sp, #28]
 80044d0:	e014      	b.n	80044fc <_svfiprintf_r+0x110>
 80044d2:	eba0 0308 	sub.w	r3, r0, r8
 80044d6:	fa09 f303 	lsl.w	r3, r9, r3
 80044da:	4313      	orrs	r3, r2
 80044dc:	9304      	str	r3, [sp, #16]
 80044de:	46a2      	mov	sl, r4
 80044e0:	e7d2      	b.n	8004488 <_svfiprintf_r+0x9c>
 80044e2:	9b03      	ldr	r3, [sp, #12]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	9103      	str	r1, [sp, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bfbb      	ittet	lt
 80044ee:	425b      	neglt	r3, r3
 80044f0:	f042 0202 	orrlt.w	r2, r2, #2
 80044f4:	9307      	strge	r3, [sp, #28]
 80044f6:	9307      	strlt	r3, [sp, #28]
 80044f8:	bfb8      	it	lt
 80044fa:	9204      	strlt	r2, [sp, #16]
 80044fc:	7823      	ldrb	r3, [r4, #0]
 80044fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004500:	d10c      	bne.n	800451c <_svfiprintf_r+0x130>
 8004502:	7863      	ldrb	r3, [r4, #1]
 8004504:	2b2a      	cmp	r3, #42	; 0x2a
 8004506:	d135      	bne.n	8004574 <_svfiprintf_r+0x188>
 8004508:	9b03      	ldr	r3, [sp, #12]
 800450a:	1d1a      	adds	r2, r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	9203      	str	r2, [sp, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	bfb8      	it	lt
 8004514:	f04f 33ff 	movlt.w	r3, #4294967295
 8004518:	3402      	adds	r4, #2
 800451a:	9305      	str	r3, [sp, #20]
 800451c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80045e8 <_svfiprintf_r+0x1fc>
 8004520:	7821      	ldrb	r1, [r4, #0]
 8004522:	2203      	movs	r2, #3
 8004524:	4650      	mov	r0, sl
 8004526:	f7fb fe6b 	bl	8000200 <memchr>
 800452a:	b140      	cbz	r0, 800453e <_svfiprintf_r+0x152>
 800452c:	2340      	movs	r3, #64	; 0x40
 800452e:	eba0 000a 	sub.w	r0, r0, sl
 8004532:	fa03 f000 	lsl.w	r0, r3, r0
 8004536:	9b04      	ldr	r3, [sp, #16]
 8004538:	4303      	orrs	r3, r0
 800453a:	3401      	adds	r4, #1
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004542:	4826      	ldr	r0, [pc, #152]	; (80045dc <_svfiprintf_r+0x1f0>)
 8004544:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004548:	2206      	movs	r2, #6
 800454a:	f7fb fe59 	bl	8000200 <memchr>
 800454e:	2800      	cmp	r0, #0
 8004550:	d038      	beq.n	80045c4 <_svfiprintf_r+0x1d8>
 8004552:	4b23      	ldr	r3, [pc, #140]	; (80045e0 <_svfiprintf_r+0x1f4>)
 8004554:	bb1b      	cbnz	r3, 800459e <_svfiprintf_r+0x1b2>
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	3307      	adds	r3, #7
 800455a:	f023 0307 	bic.w	r3, r3, #7
 800455e:	3308      	adds	r3, #8
 8004560:	9303      	str	r3, [sp, #12]
 8004562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004564:	4433      	add	r3, r6
 8004566:	9309      	str	r3, [sp, #36]	; 0x24
 8004568:	e767      	b.n	800443a <_svfiprintf_r+0x4e>
 800456a:	fb0c 3202 	mla	r2, ip, r2, r3
 800456e:	460c      	mov	r4, r1
 8004570:	2001      	movs	r0, #1
 8004572:	e7a5      	b.n	80044c0 <_svfiprintf_r+0xd4>
 8004574:	2300      	movs	r3, #0
 8004576:	3401      	adds	r4, #1
 8004578:	9305      	str	r3, [sp, #20]
 800457a:	4619      	mov	r1, r3
 800457c:	f04f 0c0a 	mov.w	ip, #10
 8004580:	4620      	mov	r0, r4
 8004582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004586:	3a30      	subs	r2, #48	; 0x30
 8004588:	2a09      	cmp	r2, #9
 800458a:	d903      	bls.n	8004594 <_svfiprintf_r+0x1a8>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0c5      	beq.n	800451c <_svfiprintf_r+0x130>
 8004590:	9105      	str	r1, [sp, #20]
 8004592:	e7c3      	b.n	800451c <_svfiprintf_r+0x130>
 8004594:	fb0c 2101 	mla	r1, ip, r1, r2
 8004598:	4604      	mov	r4, r0
 800459a:	2301      	movs	r3, #1
 800459c:	e7f0      	b.n	8004580 <_svfiprintf_r+0x194>
 800459e:	ab03      	add	r3, sp, #12
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	462a      	mov	r2, r5
 80045a4:	4b0f      	ldr	r3, [pc, #60]	; (80045e4 <_svfiprintf_r+0x1f8>)
 80045a6:	a904      	add	r1, sp, #16
 80045a8:	4638      	mov	r0, r7
 80045aa:	f3af 8000 	nop.w
 80045ae:	1c42      	adds	r2, r0, #1
 80045b0:	4606      	mov	r6, r0
 80045b2:	d1d6      	bne.n	8004562 <_svfiprintf_r+0x176>
 80045b4:	89ab      	ldrh	r3, [r5, #12]
 80045b6:	065b      	lsls	r3, r3, #25
 80045b8:	f53f af2c 	bmi.w	8004414 <_svfiprintf_r+0x28>
 80045bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045be:	b01d      	add	sp, #116	; 0x74
 80045c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c4:	ab03      	add	r3, sp, #12
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	462a      	mov	r2, r5
 80045ca:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <_svfiprintf_r+0x1f8>)
 80045cc:	a904      	add	r1, sp, #16
 80045ce:	4638      	mov	r0, r7
 80045d0:	f000 f87a 	bl	80046c8 <_printf_i>
 80045d4:	e7eb      	b.n	80045ae <_svfiprintf_r+0x1c2>
 80045d6:	bf00      	nop
 80045d8:	08004ac8 	.word	0x08004ac8
 80045dc:	08004ad2 	.word	0x08004ad2
 80045e0:	00000000 	.word	0x00000000
 80045e4:	08004335 	.word	0x08004335
 80045e8:	08004ace 	.word	0x08004ace

080045ec <_printf_common>:
 80045ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045f0:	4616      	mov	r6, r2
 80045f2:	4699      	mov	r9, r3
 80045f4:	688a      	ldr	r2, [r1, #8]
 80045f6:	690b      	ldr	r3, [r1, #16]
 80045f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045fc:	4293      	cmp	r3, r2
 80045fe:	bfb8      	it	lt
 8004600:	4613      	movlt	r3, r2
 8004602:	6033      	str	r3, [r6, #0]
 8004604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004608:	4607      	mov	r7, r0
 800460a:	460c      	mov	r4, r1
 800460c:	b10a      	cbz	r2, 8004612 <_printf_common+0x26>
 800460e:	3301      	adds	r3, #1
 8004610:	6033      	str	r3, [r6, #0]
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	0699      	lsls	r1, r3, #26
 8004616:	bf42      	ittt	mi
 8004618:	6833      	ldrmi	r3, [r6, #0]
 800461a:	3302      	addmi	r3, #2
 800461c:	6033      	strmi	r3, [r6, #0]
 800461e:	6825      	ldr	r5, [r4, #0]
 8004620:	f015 0506 	ands.w	r5, r5, #6
 8004624:	d106      	bne.n	8004634 <_printf_common+0x48>
 8004626:	f104 0a19 	add.w	sl, r4, #25
 800462a:	68e3      	ldr	r3, [r4, #12]
 800462c:	6832      	ldr	r2, [r6, #0]
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	42ab      	cmp	r3, r5
 8004632:	dc26      	bgt.n	8004682 <_printf_common+0x96>
 8004634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004638:	1e13      	subs	r3, r2, #0
 800463a:	6822      	ldr	r2, [r4, #0]
 800463c:	bf18      	it	ne
 800463e:	2301      	movne	r3, #1
 8004640:	0692      	lsls	r2, r2, #26
 8004642:	d42b      	bmi.n	800469c <_printf_common+0xb0>
 8004644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004648:	4649      	mov	r1, r9
 800464a:	4638      	mov	r0, r7
 800464c:	47c0      	blx	r8
 800464e:	3001      	adds	r0, #1
 8004650:	d01e      	beq.n	8004690 <_printf_common+0xa4>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	68e5      	ldr	r5, [r4, #12]
 8004656:	6832      	ldr	r2, [r6, #0]
 8004658:	f003 0306 	and.w	r3, r3, #6
 800465c:	2b04      	cmp	r3, #4
 800465e:	bf08      	it	eq
 8004660:	1aad      	subeq	r5, r5, r2
 8004662:	68a3      	ldr	r3, [r4, #8]
 8004664:	6922      	ldr	r2, [r4, #16]
 8004666:	bf0c      	ite	eq
 8004668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800466c:	2500      	movne	r5, #0
 800466e:	4293      	cmp	r3, r2
 8004670:	bfc4      	itt	gt
 8004672:	1a9b      	subgt	r3, r3, r2
 8004674:	18ed      	addgt	r5, r5, r3
 8004676:	2600      	movs	r6, #0
 8004678:	341a      	adds	r4, #26
 800467a:	42b5      	cmp	r5, r6
 800467c:	d11a      	bne.n	80046b4 <_printf_common+0xc8>
 800467e:	2000      	movs	r0, #0
 8004680:	e008      	b.n	8004694 <_printf_common+0xa8>
 8004682:	2301      	movs	r3, #1
 8004684:	4652      	mov	r2, sl
 8004686:	4649      	mov	r1, r9
 8004688:	4638      	mov	r0, r7
 800468a:	47c0      	blx	r8
 800468c:	3001      	adds	r0, #1
 800468e:	d103      	bne.n	8004698 <_printf_common+0xac>
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004698:	3501      	adds	r5, #1
 800469a:	e7c6      	b.n	800462a <_printf_common+0x3e>
 800469c:	18e1      	adds	r1, r4, r3
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	2030      	movs	r0, #48	; 0x30
 80046a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046a6:	4422      	add	r2, r4
 80046a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046b0:	3302      	adds	r3, #2
 80046b2:	e7c7      	b.n	8004644 <_printf_common+0x58>
 80046b4:	2301      	movs	r3, #1
 80046b6:	4622      	mov	r2, r4
 80046b8:	4649      	mov	r1, r9
 80046ba:	4638      	mov	r0, r7
 80046bc:	47c0      	blx	r8
 80046be:	3001      	adds	r0, #1
 80046c0:	d0e6      	beq.n	8004690 <_printf_common+0xa4>
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7d9      	b.n	800467a <_printf_common+0x8e>
	...

080046c8 <_printf_i>:
 80046c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046cc:	7e0f      	ldrb	r7, [r1, #24]
 80046ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80046d0:	2f78      	cmp	r7, #120	; 0x78
 80046d2:	4691      	mov	r9, r2
 80046d4:	4680      	mov	r8, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	469a      	mov	sl, r3
 80046da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80046de:	d807      	bhi.n	80046f0 <_printf_i+0x28>
 80046e0:	2f62      	cmp	r7, #98	; 0x62
 80046e2:	d80a      	bhi.n	80046fa <_printf_i+0x32>
 80046e4:	2f00      	cmp	r7, #0
 80046e6:	f000 80d8 	beq.w	800489a <_printf_i+0x1d2>
 80046ea:	2f58      	cmp	r7, #88	; 0x58
 80046ec:	f000 80a3 	beq.w	8004836 <_printf_i+0x16e>
 80046f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80046f8:	e03a      	b.n	8004770 <_printf_i+0xa8>
 80046fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046fe:	2b15      	cmp	r3, #21
 8004700:	d8f6      	bhi.n	80046f0 <_printf_i+0x28>
 8004702:	a101      	add	r1, pc, #4	; (adr r1, 8004708 <_printf_i+0x40>)
 8004704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004708:	08004761 	.word	0x08004761
 800470c:	08004775 	.word	0x08004775
 8004710:	080046f1 	.word	0x080046f1
 8004714:	080046f1 	.word	0x080046f1
 8004718:	080046f1 	.word	0x080046f1
 800471c:	080046f1 	.word	0x080046f1
 8004720:	08004775 	.word	0x08004775
 8004724:	080046f1 	.word	0x080046f1
 8004728:	080046f1 	.word	0x080046f1
 800472c:	080046f1 	.word	0x080046f1
 8004730:	080046f1 	.word	0x080046f1
 8004734:	08004881 	.word	0x08004881
 8004738:	080047a5 	.word	0x080047a5
 800473c:	08004863 	.word	0x08004863
 8004740:	080046f1 	.word	0x080046f1
 8004744:	080046f1 	.word	0x080046f1
 8004748:	080048a3 	.word	0x080048a3
 800474c:	080046f1 	.word	0x080046f1
 8004750:	080047a5 	.word	0x080047a5
 8004754:	080046f1 	.word	0x080046f1
 8004758:	080046f1 	.word	0x080046f1
 800475c:	0800486b 	.word	0x0800486b
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	1d1a      	adds	r2, r3, #4
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	602a      	str	r2, [r5, #0]
 8004768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800476c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004770:	2301      	movs	r3, #1
 8004772:	e0a3      	b.n	80048bc <_printf_i+0x1f4>
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	6829      	ldr	r1, [r5, #0]
 8004778:	0606      	lsls	r6, r0, #24
 800477a:	f101 0304 	add.w	r3, r1, #4
 800477e:	d50a      	bpl.n	8004796 <_printf_i+0xce>
 8004780:	680e      	ldr	r6, [r1, #0]
 8004782:	602b      	str	r3, [r5, #0]
 8004784:	2e00      	cmp	r6, #0
 8004786:	da03      	bge.n	8004790 <_printf_i+0xc8>
 8004788:	232d      	movs	r3, #45	; 0x2d
 800478a:	4276      	negs	r6, r6
 800478c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004790:	485e      	ldr	r0, [pc, #376]	; (800490c <_printf_i+0x244>)
 8004792:	230a      	movs	r3, #10
 8004794:	e019      	b.n	80047ca <_printf_i+0x102>
 8004796:	680e      	ldr	r6, [r1, #0]
 8004798:	602b      	str	r3, [r5, #0]
 800479a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800479e:	bf18      	it	ne
 80047a0:	b236      	sxthne	r6, r6
 80047a2:	e7ef      	b.n	8004784 <_printf_i+0xbc>
 80047a4:	682b      	ldr	r3, [r5, #0]
 80047a6:	6820      	ldr	r0, [r4, #0]
 80047a8:	1d19      	adds	r1, r3, #4
 80047aa:	6029      	str	r1, [r5, #0]
 80047ac:	0601      	lsls	r1, r0, #24
 80047ae:	d501      	bpl.n	80047b4 <_printf_i+0xec>
 80047b0:	681e      	ldr	r6, [r3, #0]
 80047b2:	e002      	b.n	80047ba <_printf_i+0xf2>
 80047b4:	0646      	lsls	r6, r0, #25
 80047b6:	d5fb      	bpl.n	80047b0 <_printf_i+0xe8>
 80047b8:	881e      	ldrh	r6, [r3, #0]
 80047ba:	4854      	ldr	r0, [pc, #336]	; (800490c <_printf_i+0x244>)
 80047bc:	2f6f      	cmp	r7, #111	; 0x6f
 80047be:	bf0c      	ite	eq
 80047c0:	2308      	moveq	r3, #8
 80047c2:	230a      	movne	r3, #10
 80047c4:	2100      	movs	r1, #0
 80047c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80047ca:	6865      	ldr	r5, [r4, #4]
 80047cc:	60a5      	str	r5, [r4, #8]
 80047ce:	2d00      	cmp	r5, #0
 80047d0:	bfa2      	ittt	ge
 80047d2:	6821      	ldrge	r1, [r4, #0]
 80047d4:	f021 0104 	bicge.w	r1, r1, #4
 80047d8:	6021      	strge	r1, [r4, #0]
 80047da:	b90e      	cbnz	r6, 80047e0 <_printf_i+0x118>
 80047dc:	2d00      	cmp	r5, #0
 80047de:	d04d      	beq.n	800487c <_printf_i+0x1b4>
 80047e0:	4615      	mov	r5, r2
 80047e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80047e6:	fb03 6711 	mls	r7, r3, r1, r6
 80047ea:	5dc7      	ldrb	r7, [r0, r7]
 80047ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80047f0:	4637      	mov	r7, r6
 80047f2:	42bb      	cmp	r3, r7
 80047f4:	460e      	mov	r6, r1
 80047f6:	d9f4      	bls.n	80047e2 <_printf_i+0x11a>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d10b      	bne.n	8004814 <_printf_i+0x14c>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	07de      	lsls	r6, r3, #31
 8004800:	d508      	bpl.n	8004814 <_printf_i+0x14c>
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	6861      	ldr	r1, [r4, #4]
 8004806:	4299      	cmp	r1, r3
 8004808:	bfde      	ittt	le
 800480a:	2330      	movle	r3, #48	; 0x30
 800480c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004810:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004814:	1b52      	subs	r2, r2, r5
 8004816:	6122      	str	r2, [r4, #16]
 8004818:	f8cd a000 	str.w	sl, [sp]
 800481c:	464b      	mov	r3, r9
 800481e:	aa03      	add	r2, sp, #12
 8004820:	4621      	mov	r1, r4
 8004822:	4640      	mov	r0, r8
 8004824:	f7ff fee2 	bl	80045ec <_printf_common>
 8004828:	3001      	adds	r0, #1
 800482a:	d14c      	bne.n	80048c6 <_printf_i+0x1fe>
 800482c:	f04f 30ff 	mov.w	r0, #4294967295
 8004830:	b004      	add	sp, #16
 8004832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004836:	4835      	ldr	r0, [pc, #212]	; (800490c <_printf_i+0x244>)
 8004838:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800483c:	6829      	ldr	r1, [r5, #0]
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	f851 6b04 	ldr.w	r6, [r1], #4
 8004844:	6029      	str	r1, [r5, #0]
 8004846:	061d      	lsls	r5, r3, #24
 8004848:	d514      	bpl.n	8004874 <_printf_i+0x1ac>
 800484a:	07df      	lsls	r7, r3, #31
 800484c:	bf44      	itt	mi
 800484e:	f043 0320 	orrmi.w	r3, r3, #32
 8004852:	6023      	strmi	r3, [r4, #0]
 8004854:	b91e      	cbnz	r6, 800485e <_printf_i+0x196>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	f023 0320 	bic.w	r3, r3, #32
 800485c:	6023      	str	r3, [r4, #0]
 800485e:	2310      	movs	r3, #16
 8004860:	e7b0      	b.n	80047c4 <_printf_i+0xfc>
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	f043 0320 	orr.w	r3, r3, #32
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	2378      	movs	r3, #120	; 0x78
 800486c:	4828      	ldr	r0, [pc, #160]	; (8004910 <_printf_i+0x248>)
 800486e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004872:	e7e3      	b.n	800483c <_printf_i+0x174>
 8004874:	0659      	lsls	r1, r3, #25
 8004876:	bf48      	it	mi
 8004878:	b2b6      	uxthmi	r6, r6
 800487a:	e7e6      	b.n	800484a <_printf_i+0x182>
 800487c:	4615      	mov	r5, r2
 800487e:	e7bb      	b.n	80047f8 <_printf_i+0x130>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	6826      	ldr	r6, [r4, #0]
 8004884:	6961      	ldr	r1, [r4, #20]
 8004886:	1d18      	adds	r0, r3, #4
 8004888:	6028      	str	r0, [r5, #0]
 800488a:	0635      	lsls	r5, r6, #24
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	d501      	bpl.n	8004894 <_printf_i+0x1cc>
 8004890:	6019      	str	r1, [r3, #0]
 8004892:	e002      	b.n	800489a <_printf_i+0x1d2>
 8004894:	0670      	lsls	r0, r6, #25
 8004896:	d5fb      	bpl.n	8004890 <_printf_i+0x1c8>
 8004898:	8019      	strh	r1, [r3, #0]
 800489a:	2300      	movs	r3, #0
 800489c:	6123      	str	r3, [r4, #16]
 800489e:	4615      	mov	r5, r2
 80048a0:	e7ba      	b.n	8004818 <_printf_i+0x150>
 80048a2:	682b      	ldr	r3, [r5, #0]
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	602a      	str	r2, [r5, #0]
 80048a8:	681d      	ldr	r5, [r3, #0]
 80048aa:	6862      	ldr	r2, [r4, #4]
 80048ac:	2100      	movs	r1, #0
 80048ae:	4628      	mov	r0, r5
 80048b0:	f7fb fca6 	bl	8000200 <memchr>
 80048b4:	b108      	cbz	r0, 80048ba <_printf_i+0x1f2>
 80048b6:	1b40      	subs	r0, r0, r5
 80048b8:	6060      	str	r0, [r4, #4]
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	6123      	str	r3, [r4, #16]
 80048be:	2300      	movs	r3, #0
 80048c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c4:	e7a8      	b.n	8004818 <_printf_i+0x150>
 80048c6:	6923      	ldr	r3, [r4, #16]
 80048c8:	462a      	mov	r2, r5
 80048ca:	4649      	mov	r1, r9
 80048cc:	4640      	mov	r0, r8
 80048ce:	47d0      	blx	sl
 80048d0:	3001      	adds	r0, #1
 80048d2:	d0ab      	beq.n	800482c <_printf_i+0x164>
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	079b      	lsls	r3, r3, #30
 80048d8:	d413      	bmi.n	8004902 <_printf_i+0x23a>
 80048da:	68e0      	ldr	r0, [r4, #12]
 80048dc:	9b03      	ldr	r3, [sp, #12]
 80048de:	4298      	cmp	r0, r3
 80048e0:	bfb8      	it	lt
 80048e2:	4618      	movlt	r0, r3
 80048e4:	e7a4      	b.n	8004830 <_printf_i+0x168>
 80048e6:	2301      	movs	r3, #1
 80048e8:	4632      	mov	r2, r6
 80048ea:	4649      	mov	r1, r9
 80048ec:	4640      	mov	r0, r8
 80048ee:	47d0      	blx	sl
 80048f0:	3001      	adds	r0, #1
 80048f2:	d09b      	beq.n	800482c <_printf_i+0x164>
 80048f4:	3501      	adds	r5, #1
 80048f6:	68e3      	ldr	r3, [r4, #12]
 80048f8:	9903      	ldr	r1, [sp, #12]
 80048fa:	1a5b      	subs	r3, r3, r1
 80048fc:	42ab      	cmp	r3, r5
 80048fe:	dcf2      	bgt.n	80048e6 <_printf_i+0x21e>
 8004900:	e7eb      	b.n	80048da <_printf_i+0x212>
 8004902:	2500      	movs	r5, #0
 8004904:	f104 0619 	add.w	r6, r4, #25
 8004908:	e7f5      	b.n	80048f6 <_printf_i+0x22e>
 800490a:	bf00      	nop
 800490c:	08004ad9 	.word	0x08004ad9
 8004910:	08004aea 	.word	0x08004aea

08004914 <__retarget_lock_acquire_recursive>:
 8004914:	4770      	bx	lr

08004916 <__retarget_lock_release_recursive>:
 8004916:	4770      	bx	lr

08004918 <memcpy>:
 8004918:	440a      	add	r2, r1
 800491a:	4291      	cmp	r1, r2
 800491c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004920:	d100      	bne.n	8004924 <memcpy+0xc>
 8004922:	4770      	bx	lr
 8004924:	b510      	push	{r4, lr}
 8004926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800492a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800492e:	4291      	cmp	r1, r2
 8004930:	d1f9      	bne.n	8004926 <memcpy+0xe>
 8004932:	bd10      	pop	{r4, pc}

08004934 <memmove>:
 8004934:	4288      	cmp	r0, r1
 8004936:	b510      	push	{r4, lr}
 8004938:	eb01 0402 	add.w	r4, r1, r2
 800493c:	d902      	bls.n	8004944 <memmove+0x10>
 800493e:	4284      	cmp	r4, r0
 8004940:	4623      	mov	r3, r4
 8004942:	d807      	bhi.n	8004954 <memmove+0x20>
 8004944:	1e43      	subs	r3, r0, #1
 8004946:	42a1      	cmp	r1, r4
 8004948:	d008      	beq.n	800495c <memmove+0x28>
 800494a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800494e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004952:	e7f8      	b.n	8004946 <memmove+0x12>
 8004954:	4402      	add	r2, r0
 8004956:	4601      	mov	r1, r0
 8004958:	428a      	cmp	r2, r1
 800495a:	d100      	bne.n	800495e <memmove+0x2a>
 800495c:	bd10      	pop	{r4, pc}
 800495e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004966:	e7f7      	b.n	8004958 <memmove+0x24>

08004968 <_realloc_r>:
 8004968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800496c:	4680      	mov	r8, r0
 800496e:	4614      	mov	r4, r2
 8004970:	460e      	mov	r6, r1
 8004972:	b921      	cbnz	r1, 800497e <_realloc_r+0x16>
 8004974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004978:	4611      	mov	r1, r2
 800497a:	f7ff bc13 	b.w	80041a4 <_malloc_r>
 800497e:	b92a      	cbnz	r2, 800498c <_realloc_r+0x24>
 8004980:	f7ff fba4 	bl	80040cc <_free_r>
 8004984:	4625      	mov	r5, r4
 8004986:	4628      	mov	r0, r5
 8004988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800498c:	f000 f81b 	bl	80049c6 <_malloc_usable_size_r>
 8004990:	4284      	cmp	r4, r0
 8004992:	4607      	mov	r7, r0
 8004994:	d802      	bhi.n	800499c <_realloc_r+0x34>
 8004996:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800499a:	d812      	bhi.n	80049c2 <_realloc_r+0x5a>
 800499c:	4621      	mov	r1, r4
 800499e:	4640      	mov	r0, r8
 80049a0:	f7ff fc00 	bl	80041a4 <_malloc_r>
 80049a4:	4605      	mov	r5, r0
 80049a6:	2800      	cmp	r0, #0
 80049a8:	d0ed      	beq.n	8004986 <_realloc_r+0x1e>
 80049aa:	42bc      	cmp	r4, r7
 80049ac:	4622      	mov	r2, r4
 80049ae:	4631      	mov	r1, r6
 80049b0:	bf28      	it	cs
 80049b2:	463a      	movcs	r2, r7
 80049b4:	f7ff ffb0 	bl	8004918 <memcpy>
 80049b8:	4631      	mov	r1, r6
 80049ba:	4640      	mov	r0, r8
 80049bc:	f7ff fb86 	bl	80040cc <_free_r>
 80049c0:	e7e1      	b.n	8004986 <_realloc_r+0x1e>
 80049c2:	4635      	mov	r5, r6
 80049c4:	e7df      	b.n	8004986 <_realloc_r+0x1e>

080049c6 <_malloc_usable_size_r>:
 80049c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049ca:	1f18      	subs	r0, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	bfbc      	itt	lt
 80049d0:	580b      	ldrlt	r3, [r1, r0]
 80049d2:	18c0      	addlt	r0, r0, r3
 80049d4:	4770      	bx	lr
	...

080049d8 <_init>:
 80049d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049da:	bf00      	nop
 80049dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049de:	bc08      	pop	{r3}
 80049e0:	469e      	mov	lr, r3
 80049e2:	4770      	bx	lr

080049e4 <_fini>:
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	bf00      	nop
 80049e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ea:	bc08      	pop	{r3}
 80049ec:	469e      	mov	lr, r3
 80049ee:	4770      	bx	lr
