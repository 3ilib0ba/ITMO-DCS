/*
 * my_logic.c
 *
 *  Created on: Oct 29, 2023
 *      Author: kastr
 */
#include <stdio.h>

#include "my_logic.h"
#include "my_string.h"
#include "my_sound.h"
#include "my_uart.h"
#include "kb.h"

uint8_t Row[4] = {ROW1, ROW2, ROW3, ROW4}, key, old_key, flag = 0;

//public functions start
void parse_symbol_if_available() {
//	char answer[100];
	HAL_Delay(100);

	if (flag == 0) {
		old_key = 0x0D;
		key = 0x0D;
	} else {
		if (key != 0x0D) {
			old_key = key;
		}
	}

	flag = 0;
	for (int i = 0; i < 4; i++) {
		key = Get_Key(Row[i]);
		if (key != old_key) {
			if (key != 0x0D) {
				old_key = key;
				flag = 1;
			}
			if (key > 0 && key < 8) {
				parse_symbol(key + '0');
			} else if (key == 8) {
				parse_symbol('-');
			} else if (key == 9) {
				parse_symbol('+');
			} else if (key == 0x0A) {
				parse_symbol('a');
			} else if (key == 0x0B) {
				parse_symbol('\r');
			} else if (key == 0x0C) {
				parse_symbol('A');
			}
//			sprintf(answer, "new key: %d",key);
//			append_to_sending_buffer_by_uart(answer);
		}

	}
//	char* symb = read_char_by_kb();
//	if (symb == NULL)
//		return;
//	parse_symbol(*symb);
}

//char* read_char_by_kb() {
//	char answer[100];
//	return answer;
//}

//public functions start
void parse_symbol(char symbol){
	char answer[100];
	if (symbol >= '1' && symbol <= '7') {
		uint32_t note_index = symbol - '1';
		play(note_index);
	} else {
		switch (symbol) {
		case '+':
			octave_increase_if_available();
			sprintf(answer, "New octave_index is: %d",
					get_current_octave_number());
			append_to_sending_buffer_by_uart(answer);
			break;
		case '-':
			octave_decrease_if_available();
			sprintf(answer, "New octave_index is: %d",
					get_current_octave_number());
			append_to_sending_buffer_by_uart(answer);
			break;
		case 'a':
			duration_decrease_if_available();
			sprintf(answer, "New duration is: %d ms", get_current_duration());
			append_to_sending_buffer_by_uart(answer);
			break;
		case 'A':
			duration_increase_if_available();
			sprintf(answer, "New duration is: %d ms", get_current_duration());
			append_to_sending_buffer_by_uart(answer);
			break;
		case '\r':
			start_all_playing();
			break;
		default:
			sprintf(answer, "Incorrect symbol %u", symbol);
			append_to_sending_buffer_by_uart(answer);
			break;
		}
	}
}
