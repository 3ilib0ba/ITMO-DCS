
Lab-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f6c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e4  080054e4  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054ec  080054ec  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080054f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000154  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5c9  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001da4  00000000  00000000  0002a695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  0002c440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c8  00000000  00000000  0002ccd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002334e  00000000  00000000  0002d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ad62  00000000  00000000  000507e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0c6c  00000000  00000000  0005b548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012c1b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d8c  00000000  00000000  0012c204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005104 	.word	0x08005104

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	08005104 	.word	0x08005104

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	4b35      	ldr	r3, [pc, #212]	; (80006b4 <MX_GPIO_Init+0xf0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a34      	ldr	r2, [pc, #208]	; (80006b4 <MX_GPIO_Init+0xf0>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <MX_GPIO_Init+0xf0>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b2e      	ldr	r3, [pc, #184]	; (80006b4 <MX_GPIO_Init+0xf0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a2d      	ldr	r2, [pc, #180]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a26      	ldr	r2, [pc, #152]	; (80006b4 <MX_GPIO_Init+0xf0>)
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <MX_GPIO_Init+0xf0>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <MX_GPIO_Init+0xf0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800066c:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_GPIO_Init+0xf4>)
 800066e:	f001 faa9 	bl	8001bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	4619      	mov	r1, r3
 8000686:	480d      	ldr	r0, [pc, #52]	; (80006bc <MX_GPIO_Init+0xf8>)
 8000688:	f001 f8d8 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800068c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4804      	ldr	r0, [pc, #16]	; (80006b8 <MX_GPIO_Init+0xf4>)
 80006a6:	f001 f8c9 	bl	800183c <HAL_GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40020c00 	.word	0x40020c00
 80006bc:	40020800 	.word	0x40020800

080006c0 <turn_all_off>:
    while ((HAL_GetTick() - startTime) < duration) {
    }
}


void turn_all_off() {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <turn_all_off+0x2c>)
 80006cc:	f001 fa7a 	bl	8001bc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <turn_all_off+0x2c>)
 80006d8:	f001 fa74 	bl	8001bc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e2:	4802      	ldr	r0, [pc, #8]	; (80006ec <turn_all_off+0x2c>)
 80006e4:	f001 fa6e 	bl	8001bc4 <HAL_GPIO_WritePin>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40020c00 	.word	0x40020c00

080006f0 <turn_specific_light_on>:

void turn_specific_light_on(uint16_t light) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
    turn_all_off();
 80006fa:	f7ff ffe1 	bl	80006c0 <turn_all_off>
    HAL_GPIO_WritePin(GPIOD, light, GPIO_PIN_SET);
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	2201      	movs	r2, #1
 8000702:	4619      	mov	r1, r3
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <turn_specific_light_on+0x24>)
 8000706:	f001 fa5d 	bl	8001bc4 <HAL_GPIO_WritePin>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40020c00 	.word	0x40020c00

08000718 <concat>:
        i++;
    }
    return 1;
}

char *concat(char *s1, char *s2) {
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	6039      	str	r1, [r7, #0]
    char *result = malloc(strlen(s1) + strlen(s2) + 1);
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff fd6e 	bl	8000204 <strlen>
 8000728:	4604      	mov	r4, r0
 800072a:	6838      	ldr	r0, [r7, #0]
 800072c:	f7ff fd6a 	bl	8000204 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	4423      	add	r3, r4
 8000734:	3301      	adds	r3, #1
 8000736:	4618      	mov	r0, r3
 8000738:	f003 fa06 	bl	8003b48 <malloc>
 800073c:	4603      	mov	r3, r0
 800073e:	60fb      	str	r3, [r7, #12]
    strcpy(result, s1);
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f003 fb2f 	bl	8003da6 <strcpy>
    strcat(result, s2);
 8000748:	6839      	ldr	r1, [r7, #0]
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f003 fb1c 	bl	8003d88 <strcat>
    return result;
 8000750:	68fb      	ldr	r3, [r7, #12]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bd90      	pop	{r4, r7, pc}

0800075a <next>:

void next(char **pointer, char *buffer) {
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]
    if (*pointer >= buffer + 100) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	3364      	adds	r3, #100	; 0x64
 800076c:	429a      	cmp	r2, r3
 800076e:	d303      	bcc.n	8000778 <next+0x1e>
        *pointer = buffer;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	683a      	ldr	r2, [r7, #0]
 8000774:	601a      	str	r2, [r3, #0]
    } else {
        (*pointer)++;
    }
}
 8000776:	e004      	b.n	8000782 <next+0x28>
        (*pointer)++;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	601a      	str	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <write_char_to_buff>:

void write_char_to_buff(char c) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
    *write_to_pointer = c;
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <write_char_to_buff+0x24>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	79fa      	ldrb	r2, [r7, #7]
 80007a0:	701a      	strb	r2, [r3, #0]
    next(&write_to_pointer, write_buffer);
 80007a2:	4905      	ldr	r1, [pc, #20]	; (80007b8 <write_char_to_buff+0x28>)
 80007a4:	4803      	ldr	r0, [pc, #12]	; (80007b4 <write_char_to_buff+0x24>)
 80007a6:	f7ff ffd8 	bl	800075a <next>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000028 	.word	0x20000028
 80007b8:	2000012c 	.word	0x2000012c

080007bc <append_to_sending_buffer_by_uart>:

void append_to_sending_buffer_by_uart(char *str) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
    char *str_with_newlines = concat("\r\n", str);
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	4818      	ldr	r0, [pc, #96]	; (8000828 <append_to_sending_buffer_by_uart+0x6c>)
 80007c8:	f7ff ffa6 	bl	8000718 <concat>
 80007cc:	6138      	str	r0, [r7, #16]
    str_with_newlines = concat(str_with_newlines, "\r\n");
 80007ce:	4916      	ldr	r1, [pc, #88]	; (8000828 <append_to_sending_buffer_by_uart+0x6c>)
 80007d0:	6938      	ldr	r0, [r7, #16]
 80007d2:	f7ff ffa1 	bl	8000718 <concat>
 80007d6:	6138      	str	r0, [r7, #16]
    int size = sizeof(char) * strlen(str_with_newlines);
 80007d8:	6938      	ldr	r0, [r7, #16]
 80007da:	f7ff fd13 	bl	8000204 <strlen>
 80007de:	4603      	mov	r3, r0
 80007e0:	60fb      	str	r3, [r7, #12]
    if (interrupts_mode == 0) {
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <append_to_sending_buffer_by_uart+0x70>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d107      	bne.n	80007fa <append_to_sending_buffer_by_uart+0x3e>
        HAL_UART_Transmit(&huart6, (uint8_t *) str_with_newlines, size, 10);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	230a      	movs	r3, #10
 80007f0:	6939      	ldr	r1, [r7, #16]
 80007f2:	480f      	ldr	r0, [pc, #60]	; (8000830 <append_to_sending_buffer_by_uart+0x74>)
 80007f4:	f001 fef5 	bl	80025e2 <HAL_UART_Transmit>
    } else {
        for (size_t i = 0; str_with_newlines[i] != '\0'; i++) {
            write_char_to_buff(str_with_newlines[i]);
        }
    }
}
 80007f8:	e012      	b.n	8000820 <append_to_sending_buffer_by_uart+0x64>
        for (size_t i = 0; str_with_newlines[i] != '\0'; i++) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	e009      	b.n	8000814 <append_to_sending_buffer_by_uart+0x58>
            write_char_to_buff(str_with_newlines[i]);
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	4413      	add	r3, r2
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ffc1 	bl	8000790 <write_char_to_buff>
        for (size_t i = 0; str_with_newlines[i] != '\0'; i++) {
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	3301      	adds	r3, #1
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	693a      	ldr	r2, [r7, #16]
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1ef      	bne.n	8000800 <append_to_sending_buffer_by_uart+0x44>
}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	0800511c 	.word	0x0800511c
 800082c:	20000018 	.word	0x20000018
 8000830:	20000198 	.word	0x20000198

08000834 <write_about_info_command>:

void write_about_info_command() {
 8000834:	b580      	push	{r7, lr}
 8000836:	b09e      	sub	sp, #120	; 0x78
 8000838:	af02      	add	r7, sp, #8
    char answer[100];
    char *light;
    switch (current_light) {
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <write_about_info_command+0xa0>)
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000842:	d00e      	beq.n	8000862 <write_about_info_command+0x2e>
 8000844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000848:	dc17      	bgt.n	800087a <write_about_info_command+0x46>
 800084a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800084e:	d00b      	beq.n	8000868 <write_about_info_command+0x34>
 8000850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000854:	dc11      	bgt.n	800087a <write_about_info_command+0x46>
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00c      	beq.n	8000874 <write_about_info_command+0x40>
 800085a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800085e:	d006      	beq.n	800086e <write_about_info_command+0x3a>
 8000860:	e00b      	b.n	800087a <write_about_info_command+0x46>
        case GPIO_PIN_15:
            light = "red";
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <write_about_info_command+0xa4>)
 8000864:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8000866:	e008      	b.n	800087a <write_about_info_command+0x46>
        case GPIO_PIN_14:
            light = "yellow";
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <write_about_info_command+0xa8>)
 800086a:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 800086c:	e005      	b.n	800087a <write_about_info_command+0x46>
        case GPIO_PIN_13:
            light = "green";
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <write_about_info_command+0xac>)
 8000870:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8000872:	e002      	b.n	800087a <write_about_info_command+0x46>
        case 0:
            light = "blinking green";
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <write_about_info_command+0xb0>)
 8000876:	66fb      	str	r3, [r7, #108]	; 0x6c
            break;
 8000878:	bf00      	nop
    }
    uint8_t mode;
    char interrupts;
    if (button_flag == 0) {
 800087a:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <write_about_info_command+0xb4>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d103      	bne.n	800088a <write_about_info_command+0x56>
        mode = 1;
 8000882:	2301      	movs	r3, #1
 8000884:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8000888:	e002      	b.n	8000890 <write_about_info_command+0x5c>
    } else {
        mode = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    }
    if (interrupts_mode == 1) {
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <write_about_info_command+0xb8>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d103      	bne.n	80008a0 <write_about_info_command+0x6c>
        interrupts = 'I';
 8000898:	2349      	movs	r3, #73	; 0x49
 800089a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 800089e:	e002      	b.n	80008a6 <write_about_info_command+0x72>
    } else {
        interrupts = 'P';
 80008a0:	2350      	movs	r3, #80	; 0x50
 80008a2:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
    }

    sprintf(answer, "Light: %s, Mode: %d, Timeout: %d, Interrupts: %c", light, mode, duration * 4, interrupts);
 80008a6:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <write_about_info_command+0xbc>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	f897 206a 	ldrb.w	r2, [r7, #106]	; 0x6a
 80008b4:	1d38      	adds	r0, r7, #4
 80008b6:	9201      	str	r2, [sp, #4]
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	460b      	mov	r3, r1
 80008bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80008be:	490d      	ldr	r1, [pc, #52]	; (80008f4 <write_about_info_command+0xc0>)
 80008c0:	f003 fa42 	bl	8003d48 <siprintf>
    append_to_sending_buffer_by_uart(answer);
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff78 	bl	80007bc <append_to_sending_buffer_by_uart>
}
 80008cc:	bf00      	nop
 80008ce:	3770      	adds	r7, #112	; 0x70
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000006 	.word	0x20000006
 80008d8:	08005120 	.word	0x08005120
 80008dc:	08005124 	.word	0x08005124
 80008e0:	0800512c 	.word	0x0800512c
 80008e4:	08005134 	.word	0x08005134
 80008e8:	200000c4 	.word	0x200000c4
 80008ec:	20000018 	.word	0x20000018
 80008f0:	20000008 	.word	0x20000008
 80008f4:	08005144 	.word	0x08005144

080008f8 <write_command_not_found>:

void write_command_not_found() {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
    char *str = "Invalid command. You can use: '?', set mode 1/2, set timeout X, set interrupts on/off";
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <write_command_not_found+0x18>)
 8000900:	607b      	str	r3, [r7, #4]
    append_to_sending_buffer_by_uart(str);
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff5a 	bl	80007bc <append_to_sending_buffer_by_uart>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	08005178 	.word	0x08005178

08000914 <parse_number>:

int parse_number(char *str) {
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; str[i] != '\0'; i++) {
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e00b      	b.n	800093a <parse_number+0x26>
        if (!isdigit(str[i])) return 0;
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4413      	add	r3, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	3b30      	subs	r3, #48	; 0x30
 800092c:	2b09      	cmp	r3, #9
 800092e:	d901      	bls.n	8000934 <parse_number+0x20>
 8000930:	2300      	movs	r3, #0
 8000932:	e009      	b.n	8000948 <parse_number+0x34>
    for (size_t i = 0; str[i] != '\0'; i++) {
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3301      	adds	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	687a      	ldr	r2, [r7, #4]
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1ed      	bne.n	8000922 <parse_number+0xe>
    }
    return 1;
 8000946:	2301      	movs	r3, #1
}
 8000948:	4618      	mov	r0, r3
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <parse_symbol_if_available>:

void parse_symbol_if_available() {
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
    if (*cur_process_char == '\r') {
 800095a:	4b72      	ldr	r3, [pc, #456]	; (8000b24 <parse_symbol_if_available+0x1d0>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b0d      	cmp	r3, #13
 8000962:	f040 80d6 	bne.w	8000b12 <parse_symbol_if_available+0x1be>
        *cur_process_char = '\0';
 8000966:	4b6f      	ldr	r3, [pc, #444]	; (8000b24 <parse_symbol_if_available+0x1d0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]


        char *command = strtok(read_buffer, " ");
 800096e:	496e      	ldr	r1, [pc, #440]	; (8000b28 <parse_symbol_if_available+0x1d4>)
 8000970:	486e      	ldr	r0, [pc, #440]	; (8000b2c <parse_symbol_if_available+0x1d8>)
 8000972:	f003 fa21 	bl	8003db8 <strtok>
 8000976:	6178      	str	r0, [r7, #20]
        if (strcmp(command, "?") == 0) {
 8000978:	496d      	ldr	r1, [pc, #436]	; (8000b30 <parse_symbol_if_available+0x1dc>)
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff fc38 	bl	80001f0 <strcmp>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d102      	bne.n	800098c <parse_symbol_if_available+0x38>
            write_about_info_command();
 8000986:	f7ff ff55 	bl	8000834 <write_about_info_command>
 800098a:	e0be      	b.n	8000b0a <parse_symbol_if_available+0x1b6>
        } else if (strcmp(command, "set") == 0) {
 800098c:	4969      	ldr	r1, [pc, #420]	; (8000b34 <parse_symbol_if_available+0x1e0>)
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	f7ff fc2e 	bl	80001f0 <strcmp>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	f040 80b5 	bne.w	8000b06 <parse_symbol_if_available+0x1b2>
            char *first_arg = strtok(NULL, " ");
 800099c:	4962      	ldr	r1, [pc, #392]	; (8000b28 <parse_symbol_if_available+0x1d4>)
 800099e:	2000      	movs	r0, #0
 80009a0:	f003 fa0a 	bl	8003db8 <strtok>
 80009a4:	6138      	str	r0, [r7, #16]
            if (strcmp(first_arg, "mode") == 0) {
 80009a6:	4964      	ldr	r1, [pc, #400]	; (8000b38 <parse_symbol_if_available+0x1e4>)
 80009a8:	6938      	ldr	r0, [r7, #16]
 80009aa:	f7ff fc21 	bl	80001f0 <strcmp>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d128      	bne.n	8000a06 <parse_symbol_if_available+0xb2>
                char *mode = strtok(NULL, " ");
 80009b4:	495c      	ldr	r1, [pc, #368]	; (8000b28 <parse_symbol_if_available+0x1d4>)
 80009b6:	2000      	movs	r0, #0
 80009b8:	f003 f9fe 	bl	8003db8 <strtok>
 80009bc:	6038      	str	r0, [r7, #0]
                if (strcmp(mode, "1") == 0) {
 80009be:	495f      	ldr	r1, [pc, #380]	; (8000b3c <parse_symbol_if_available+0x1e8>)
 80009c0:	6838      	ldr	r0, [r7, #0]
 80009c2:	f7ff fc15 	bl	80001f0 <strcmp>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d106      	bne.n	80009da <parse_symbol_if_available+0x86>
                    button_flag = 0;
 80009cc:	4b5c      	ldr	r3, [pc, #368]	; (8000b40 <parse_symbol_if_available+0x1ec>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
//                    duration_for_red = duration * 4;
                    append_to_sending_buffer_by_uart("Set mode 1. Not ignoring btn");
 80009d2:	485c      	ldr	r0, [pc, #368]	; (8000b44 <parse_symbol_if_available+0x1f0>)
 80009d4:	f7ff fef2 	bl	80007bc <append_to_sending_buffer_by_uart>
 80009d8:	e097      	b.n	8000b0a <parse_symbol_if_available+0x1b6>
                } else if (strcmp(mode, "2") == 0) {
 80009da:	495b      	ldr	r1, [pc, #364]	; (8000b48 <parse_symbol_if_available+0x1f4>)
 80009dc:	6838      	ldr	r0, [r7, #0]
 80009de:	f7ff fc07 	bl	80001f0 <strcmp>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d10b      	bne.n	8000a00 <parse_symbol_if_available+0xac>
                    button_flag = 1;
 80009e8:	4b55      	ldr	r3, [pc, #340]	; (8000b40 <parse_symbol_if_available+0x1ec>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
                    duration_for_red = 4 * duration;
 80009ee:	4b57      	ldr	r3, [pc, #348]	; (8000b4c <parse_symbol_if_available+0x1f8>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4a56      	ldr	r2, [pc, #344]	; (8000b50 <parse_symbol_if_available+0x1fc>)
 80009f6:	6013      	str	r3, [r2, #0]
                    append_to_sending_buffer_by_uart("Set mode 2. Ignored btn at all.");
 80009f8:	4856      	ldr	r0, [pc, #344]	; (8000b54 <parse_symbol_if_available+0x200>)
 80009fa:	f7ff fedf 	bl	80007bc <append_to_sending_buffer_by_uart>
 80009fe:	e084      	b.n	8000b0a <parse_symbol_if_available+0x1b6>
                } else {
                    write_command_not_found();
 8000a00:	f7ff ff7a 	bl	80008f8 <write_command_not_found>
 8000a04:	e081      	b.n	8000b0a <parse_symbol_if_available+0x1b6>
                }
            } else if (strcmp(first_arg, "timeout") == 0) {
 8000a06:	4954      	ldr	r1, [pc, #336]	; (8000b58 <parse_symbol_if_available+0x204>)
 8000a08:	6938      	ldr	r0, [r7, #16]
 8000a0a:	f7ff fbf1 	bl	80001f0 <strcmp>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d139      	bne.n	8000a88 <parse_symbol_if_available+0x134>
                char *timeout = strtok(NULL, " ");
 8000a14:	4944      	ldr	r1, [pc, #272]	; (8000b28 <parse_symbol_if_available+0x1d4>)
 8000a16:	2000      	movs	r0, #0
 8000a18:	f003 f9ce 	bl	8003db8 <strtok>
 8000a1c:	60b8      	str	r0, [r7, #8]
                if (parse_number(timeout)) {
 8000a1e:	68b8      	ldr	r0, [r7, #8]
 8000a20:	f7ff ff78 	bl	8000914 <parse_number>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d02b      	beq.n	8000a82 <parse_symbol_if_available+0x12e>
                    int new_dur = atoi(timeout) * 1000;
 8000a2a:	68b8      	ldr	r0, [r7, #8]
 8000a2c:	f003 f85e 	bl	8003aec <atoi>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a36:	fb02 f303 	mul.w	r3, r2, r3
 8000a3a:	607b      	str	r3, [r7, #4]
                    if (duration_for_red == duration) {
 8000a3c:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <parse_symbol_if_available+0x1fc>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <parse_symbol_if_available+0x1f8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d108      	bne.n	8000a5a <parse_symbol_if_available+0x106>
                        duration_for_red = new_dur / 4;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	da00      	bge.n	8000a50 <parse_symbol_if_available+0xfc>
 8000a4e:	3303      	adds	r3, #3
 8000a50:	109b      	asrs	r3, r3, #2
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <parse_symbol_if_available+0x1fc>)
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	e002      	b.n	8000a60 <parse_symbol_if_available+0x10c>
                    } else {
                        duration_for_red = new_dur;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a3c      	ldr	r2, [pc, #240]	; (8000b50 <parse_symbol_if_available+0x1fc>)
 8000a5e:	6013      	str	r3, [r2, #0]
                    }
                    append_to_sending_buffer_by_uart(concat("New duration is ", timeout));
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	483e      	ldr	r0, [pc, #248]	; (8000b5c <parse_symbol_if_available+0x208>)
 8000a64:	f7ff fe58 	bl	8000718 <concat>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fea6 	bl	80007bc <append_to_sending_buffer_by_uart>
                    duration = new_dur / 4;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	da00      	bge.n	8000a78 <parse_symbol_if_available+0x124>
 8000a76:	3303      	adds	r3, #3
 8000a78:	109b      	asrs	r3, r3, #2
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <parse_symbol_if_available+0x1f8>)
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	e043      	b.n	8000b0a <parse_symbol_if_available+0x1b6>
                } else {
                    write_command_not_found();
 8000a82:	f7ff ff39 	bl	80008f8 <write_command_not_found>
 8000a86:	e040      	b.n	8000b0a <parse_symbol_if_available+0x1b6>
                }
            } else if (strcmp(first_arg, "interrupts") == 0) {
 8000a88:	4935      	ldr	r1, [pc, #212]	; (8000b60 <parse_symbol_if_available+0x20c>)
 8000a8a:	6938      	ldr	r0, [r7, #16]
 8000a8c:	f7ff fbb0 	bl	80001f0 <strcmp>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d134      	bne.n	8000b00 <parse_symbol_if_available+0x1ac>
                char *interrupts = strtok(NULL, " ");
 8000a96:	4924      	ldr	r1, [pc, #144]	; (8000b28 <parse_symbol_if_available+0x1d4>)
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f003 f98d 	bl	8003db8 <strtok>
 8000a9e:	60f8      	str	r0, [r7, #12]
                if (strcmp(interrupts, "on") == 0) {
 8000aa0:	4930      	ldr	r1, [pc, #192]	; (8000b64 <parse_symbol_if_available+0x210>)
 8000aa2:	68f8      	ldr	r0, [r7, #12]
 8000aa4:	f7ff fba4 	bl	80001f0 <strcmp>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d114      	bne.n	8000ad8 <parse_symbol_if_available+0x184>
                    interrupts_mode = 1;
 8000aae:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <parse_symbol_if_available+0x214>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	701a      	strb	r2, [r3, #0]
                    transmit_from_pointer = write_to_pointer;
 8000ab4:	4b2d      	ldr	r3, [pc, #180]	; (8000b6c <parse_symbol_if_available+0x218>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a2d      	ldr	r2, [pc, #180]	; (8000b70 <parse_symbol_if_available+0x21c>)
 8000aba:	6013      	str	r3, [r2, #0]
                    cur_read_char = read_buffer;
 8000abc:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <parse_symbol_if_available+0x220>)
 8000abe:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <parse_symbol_if_available+0x1d8>)
 8000ac0:	601a      	str	r2, [r3, #0]
                    append_to_sending_buffer_by_uart("Interrupt mode on");
 8000ac2:	482d      	ldr	r0, [pc, #180]	; (8000b78 <parse_symbol_if_available+0x224>)
 8000ac4:	f7ff fe7a 	bl	80007bc <append_to_sending_buffer_by_uart>
                    HAL_UART_Receive_IT(&huart6, (uint8_t *) cur_read_char, sizeof(char));
 8000ac8:	4b2a      	ldr	r3, [pc, #168]	; (8000b74 <parse_symbol_if_available+0x220>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2201      	movs	r2, #1
 8000ace:	4619      	mov	r1, r3
 8000ad0:	482a      	ldr	r0, [pc, #168]	; (8000b7c <parse_symbol_if_available+0x228>)
 8000ad2:	f001 feff 	bl	80028d4 <HAL_UART_Receive_IT>
 8000ad6:	e018      	b.n	8000b0a <parse_symbol_if_available+0x1b6>
                } else if (strcmp(interrupts, "off") == 0) {
 8000ad8:	4929      	ldr	r1, [pc, #164]	; (8000b80 <parse_symbol_if_available+0x22c>)
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f7ff fb88 	bl	80001f0 <strcmp>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d109      	bne.n	8000afa <parse_symbol_if_available+0x1a6>
                    interrupts_mode = 0;
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <parse_symbol_if_available+0x214>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
                    HAL_UART_Abort_IT(&huart6);
 8000aec:	4823      	ldr	r0, [pc, #140]	; (8000b7c <parse_symbol_if_available+0x228>)
 8000aee:	f001 ff21 	bl	8002934 <HAL_UART_Abort_IT>
                    append_to_sending_buffer_by_uart("Interrupt mode off");
 8000af2:	4824      	ldr	r0, [pc, #144]	; (8000b84 <parse_symbol_if_available+0x230>)
 8000af4:	f7ff fe62 	bl	80007bc <append_to_sending_buffer_by_uart>
 8000af8:	e007      	b.n	8000b0a <parse_symbol_if_available+0x1b6>
                } else {
                    write_command_not_found();
 8000afa:	f7ff fefd 	bl	80008f8 <write_command_not_found>
 8000afe:	e004      	b.n	8000b0a <parse_symbol_if_available+0x1b6>
                }
            } else {
                write_command_not_found();
 8000b00:	f7ff fefa 	bl	80008f8 <write_command_not_found>
 8000b04:	e001      	b.n	8000b0a <parse_symbol_if_available+0x1b6>
            }
        } else {
            write_command_not_found();
 8000b06:	f7ff fef7 	bl	80008f8 <write_command_not_found>
        }
        cur_process_char = read_buffer;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <parse_symbol_if_available+0x1d0>)
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <parse_symbol_if_available+0x1d8>)
 8000b0e:	601a      	str	r2, [r3, #0]
    } else {
        next(&cur_process_char, read_buffer);
    }
}
 8000b10:	e003      	b.n	8000b1a <parse_symbol_if_available+0x1c6>
        next(&cur_process_char, read_buffer);
 8000b12:	4906      	ldr	r1, [pc, #24]	; (8000b2c <parse_symbol_if_available+0x1d8>)
 8000b14:	4803      	ldr	r0, [pc, #12]	; (8000b24 <parse_symbol_if_available+0x1d0>)
 8000b16:	f7ff fe20 	bl	800075a <next>
}
 8000b1a:	bf00      	nop
 8000b1c:	3718      	adds	r7, #24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	2000001c 	.word	0x2000001c
 8000b28:	080051d0 	.word	0x080051d0
 8000b2c:	200000c8 	.word	0x200000c8
 8000b30:	080051d4 	.word	0x080051d4
 8000b34:	080051d8 	.word	0x080051d8
 8000b38:	080051dc 	.word	0x080051dc
 8000b3c:	080051e4 	.word	0x080051e4
 8000b40:	200000c4 	.word	0x200000c4
 8000b44:	080051e8 	.word	0x080051e8
 8000b48:	08005208 	.word	0x08005208
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	200000c0 	.word	0x200000c0
 8000b54:	0800520c 	.word	0x0800520c
 8000b58:	0800522c 	.word	0x0800522c
 8000b5c:	08005234 	.word	0x08005234
 8000b60:	08005248 	.word	0x08005248
 8000b64:	08005254 	.word	0x08005254
 8000b68:	20000018 	.word	0x20000018
 8000b6c:	20000028 	.word	0x20000028
 8000b70:	20000024 	.word	0x20000024
 8000b74:	20000020 	.word	0x20000020
 8000b78:	08005258 	.word	0x08005258
 8000b7c:	20000198 	.word	0x20000198
 8000b80:	0800526c 	.word	0x0800526c
 8000b84:	08005270 	.word	0x08005270

08000b88 <turn_green_light_off>:
//
//void turn_green_light_on() {
//    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
//}
//
void turn_green_light_off() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b92:	4802      	ldr	r0, [pc, #8]	; (8000b9c <turn_green_light_off+0x14>)
 8000b94:	f001 f816 	bl	8001bc4 <HAL_GPIO_WritePin>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40020c00 	.word	0x40020c00

08000ba0 <get_BTN>:
//
//uint32_t get_passed_time(uint32_t startLoopTime) {
//    return HAL_GetTick() - startLoopTime;
//}
//
uint8_t get_BTN() {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 8000ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <get_BTN+0x14>)
 8000baa:	f000 fff3 	bl	8001b94 <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40020800 	.word	0x40020800

08000bb8 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000bbe:	f000 fc27 	bl	8001410 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000bc2:	f000 f985 	bl	8000ed0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000bc6:	f7ff fcfd 	bl	80005c4 <MX_GPIO_Init>
    MX_USART6_UART_Init();
 8000bca:	f000 fb7d 	bl	80012c8 <MX_USART6_UART_Init>
    /* USER CODE BEGIN 2 */

    duration_for_red = 4 * duration;
 8000bce:	4b9d      	ldr	r3, [pc, #628]	; (8000e44 <main+0x28c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	4a9c      	ldr	r2, [pc, #624]	; (8000e48 <main+0x290>)
 8000bd6:	6013      	str	r3, [r2, #0]
    _Bool nBTN = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	71fb      	strb	r3, [r7, #7]
    if (interrupts_mode == 1) {
 8000bdc:	4b9b      	ldr	r3, [pc, #620]	; (8000e4c <main+0x294>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d106      	bne.n	8000bf2 <main+0x3a>
        HAL_UART_Receive_IT(&huart6, (uint8_t *) cur_read_char, sizeof(char));
 8000be4:	4b9a      	ldr	r3, [pc, #616]	; (8000e50 <main+0x298>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2201      	movs	r2, #1
 8000bea:	4619      	mov	r1, r3
 8000bec:	4899      	ldr	r0, [pc, #612]	; (8000e54 <main+0x29c>)
 8000bee:	f001 fe71 	bl	80028d4 <HAL_UART_Receive_IT>
        //HAL_UART_Receive_IT(&huart6, (uint8_t *) s, sizeof( char ));
        //HAL_UART_Transmit_IT( &huart6, (uint8_t *) s, sizeof( s ));
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        switch (interrupts_mode) {
 8000bf2:	4b96      	ldr	r3, [pc, #600]	; (8000e4c <main+0x294>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d01e      	beq.n	8000c38 <main+0x80>
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d138      	bne.n	8000c70 <main+0xb8>
            case 1:
                if (cur_process_char != cur_read_char) {
 8000bfe:	4b96      	ldr	r3, [pc, #600]	; (8000e58 <main+0x2a0>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b93      	ldr	r3, [pc, #588]	; (8000e50 <main+0x298>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d001      	beq.n	8000c0e <main+0x56>
                    parse_symbol_if_available();
 8000c0a:	f7ff fea3 	bl	8000954 <parse_symbol_if_available>
                }
                if (is_writing_now == 0) {
 8000c0e:	4b93      	ldr	r3, [pc, #588]	; (8000e5c <main+0x2a4>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d129      	bne.n	8000c6a <main+0xb2>
                    if (transmit_from_pointer != write_to_pointer) {
 8000c16:	4b92      	ldr	r3, [pc, #584]	; (8000e60 <main+0x2a8>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4b92      	ldr	r3, [pc, #584]	; (8000e64 <main+0x2ac>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d023      	beq.n	8000c6a <main+0xb2>
                        is_writing_now = 1;
 8000c22:	4b8e      	ldr	r3, [pc, #568]	; (8000e5c <main+0x2a4>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
                        HAL_UART_Transmit_IT(&huart6, (uint8_t *) transmit_from_pointer, sizeof(char));
 8000c28:	4b8d      	ldr	r3, [pc, #564]	; (8000e60 <main+0x2a8>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4888      	ldr	r0, [pc, #544]	; (8000e54 <main+0x29c>)
 8000c32:	f001 fe0a 	bl	800284a <HAL_UART_Transmit_IT>
                    }
                }
                break;
 8000c36:	e018      	b.n	8000c6a <main+0xb2>
            case 0:
                status = HAL_UART_Receive(&huart6, (uint8_t *) cur_process_char, sizeof(char), 100);
 8000c38:	4b87      	ldr	r3, [pc, #540]	; (8000e58 <main+0x2a0>)
 8000c3a:	6819      	ldr	r1, [r3, #0]
 8000c3c:	2364      	movs	r3, #100	; 0x64
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4884      	ldr	r0, [pc, #528]	; (8000e54 <main+0x29c>)
 8000c42:	f001 fd60 	bl	8002706 <HAL_UART_Receive>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b87      	ldr	r3, [pc, #540]	; (8000e68 <main+0x2b0>)
 8000c4c:	701a      	strb	r2, [r3, #0]
                if (status == HAL_OK) {
 8000c4e:	4b86      	ldr	r3, [pc, #536]	; (8000e68 <main+0x2b0>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d10b      	bne.n	8000c6e <main+0xb6>
                    HAL_UART_Transmit(&huart6, (uint8_t *) cur_process_char, sizeof(char), 10);
 8000c56:	4b80      	ldr	r3, [pc, #512]	; (8000e58 <main+0x2a0>)
 8000c58:	6819      	ldr	r1, [r3, #0]
 8000c5a:	230a      	movs	r3, #10
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	487d      	ldr	r0, [pc, #500]	; (8000e54 <main+0x29c>)
 8000c60:	f001 fcbf 	bl	80025e2 <HAL_UART_Transmit>
                    parse_symbol_if_available();
 8000c64:	f7ff fe76 	bl	8000954 <parse_symbol_if_available>
                }
                break;
 8000c68:	e001      	b.n	8000c6e <main+0xb6>
                break;
 8000c6a:	bf00      	nop
 8000c6c:	e000      	b.n	8000c70 <main+0xb8>
                break;
 8000c6e:	bf00      	nop
        }

        switch (current_light) {
 8000c70:	4b7e      	ldr	r3, [pc, #504]	; (8000e6c <main+0x2b4>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c78:	d010      	beq.n	8000c9c <main+0xe4>
 8000c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c7e:	f300 8109 	bgt.w	8000e94 <main+0x2dc>
 8000c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c86:	d03f      	beq.n	8000d08 <main+0x150>
 8000c88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c8c:	f300 8102 	bgt.w	8000e94 <main+0x2dc>
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d07f      	beq.n	8000d94 <main+0x1dc>
 8000c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c98:	d065      	beq.n	8000d66 <main+0x1ae>
 8000c9a:	e0fb      	b.n	8000e94 <main+0x2dc>
            case GPIO_PIN_15:
                if (!nBTN && get_BTN() == 0 && button_flag == 0) {
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f083 0301 	eor.w	r3, r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00e      	beq.n	8000cc6 <main+0x10e>
 8000ca8:	f7ff ff7a 	bl	8000ba0 <get_BTN>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d109      	bne.n	8000cc6 <main+0x10e>
 8000cb2:	4b6f      	ldr	r3, [pc, #444]	; (8000e70 <main+0x2b8>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d105      	bne.n	8000cc6 <main+0x10e>
                    nBTN = 1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	71fb      	strb	r3, [r7, #7]
                    duration_for_red = duration;
 8000cbe:	4b61      	ldr	r3, [pc, #388]	; (8000e44 <main+0x28c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a61      	ldr	r2, [pc, #388]	; (8000e48 <main+0x290>)
 8000cc4:	6013      	str	r3, [r2, #0]
                }
                if ((HAL_GetTick() - start_time) >= duration_for_red) {
 8000cc6:	f000 fc09 	bl	80014dc <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	4b69      	ldr	r3, [pc, #420]	; (8000e74 <main+0x2bc>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	1ad2      	subs	r2, r2, r3
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	; (8000e48 <main+0x290>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	f0c0 80eb 	bcc.w	8000eb2 <main+0x2fa>
                    current_light = GREEN;
 8000cdc:	4b66      	ldr	r3, [pc, #408]	; (8000e78 <main+0x2c0>)
 8000cde:	881a      	ldrh	r2, [r3, #0]
 8000ce0:	4b62      	ldr	r3, [pc, #392]	; (8000e6c <main+0x2b4>)
 8000ce2:	801a      	strh	r2, [r3, #0]
                    duration_for_red = 4 * duration;
 8000ce4:	4b57      	ldr	r3, [pc, #348]	; (8000e44 <main+0x28c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4a57      	ldr	r2, [pc, #348]	; (8000e48 <main+0x290>)
 8000cec:	6013      	str	r3, [r2, #0]
                    nBTN = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	71fb      	strb	r3, [r7, #7]
                    turn_specific_light_on(GREEN);
 8000cf2:	4b61      	ldr	r3, [pc, #388]	; (8000e78 <main+0x2c0>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fcfa 	bl	80006f0 <turn_specific_light_on>
//                    write("start to delay of 10 sec\n");
//                    HAL_Delay(10000);
//                    write("end of waiting HAL_Delay()\n");
                    start_time = HAL_GetTick();
 8000cfc:	f000 fbee 	bl	80014dc <HAL_GetTick>
 8000d00:	4603      	mov	r3, r0
 8000d02:	4a5c      	ldr	r2, [pc, #368]	; (8000e74 <main+0x2bc>)
 8000d04:	6013      	str	r3, [r2, #0]
                }
                break;
 8000d06:	e0d4      	b.n	8000eb2 <main+0x2fa>
            case GPIO_PIN_14:
                if (!nBTN && get_BTN() == 0 && button_flag == 0) {
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d00e      	beq.n	8000d32 <main+0x17a>
 8000d14:	f7ff ff44 	bl	8000ba0 <get_BTN>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d109      	bne.n	8000d32 <main+0x17a>
 8000d1e:	4b54      	ldr	r3, [pc, #336]	; (8000e70 <main+0x2b8>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d105      	bne.n	8000d32 <main+0x17a>
                    nBTN = 1;
 8000d26:	2301      	movs	r3, #1
 8000d28:	71fb      	strb	r3, [r7, #7]
                    duration_for_red = duration;
 8000d2a:	4b46      	ldr	r3, [pc, #280]	; (8000e44 <main+0x28c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a46      	ldr	r2, [pc, #280]	; (8000e48 <main+0x290>)
 8000d30:	6013      	str	r3, [r2, #0]
                }
                if ((HAL_GetTick() - start_time) >= duration_for_yellow) {
 8000d32:	f000 fbd3 	bl	80014dc <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	4b4e      	ldr	r3, [pc, #312]	; (8000e74 <main+0x2bc>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	1ad2      	subs	r2, r2, r3
 8000d3e:	4b4f      	ldr	r3, [pc, #316]	; (8000e7c <main+0x2c4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	f0c0 80b7 	bcc.w	8000eb6 <main+0x2fe>
                    current_light = RED;
 8000d48:	4b4d      	ldr	r3, [pc, #308]	; (8000e80 <main+0x2c8>)
 8000d4a:	881a      	ldrh	r2, [r3, #0]
 8000d4c:	4b47      	ldr	r3, [pc, #284]	; (8000e6c <main+0x2b4>)
 8000d4e:	801a      	strh	r2, [r3, #0]
                    turn_specific_light_on(RED);
 8000d50:	4b4b      	ldr	r3, [pc, #300]	; (8000e80 <main+0x2c8>)
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fccb 	bl	80006f0 <turn_specific_light_on>
                    start_time = HAL_GetTick();
 8000d5a:	f000 fbbf 	bl	80014dc <HAL_GetTick>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	4a44      	ldr	r2, [pc, #272]	; (8000e74 <main+0x2bc>)
 8000d62:	6013      	str	r3, [r2, #0]
                }
                break;
 8000d64:	e0a7      	b.n	8000eb6 <main+0x2fe>
            case GPIO_PIN_13:
                if ((HAL_GetTick() - start_time) >= duration) {
 8000d66:	f000 fbb9 	bl	80014dc <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	4b41      	ldr	r3, [pc, #260]	; (8000e74 <main+0x2bc>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	1ad2      	subs	r2, r2, r3
 8000d72:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <main+0x28c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	f0c0 809f 	bcc.w	8000eba <main+0x302>
                    current_light = BLINKING_GREEN;
 8000d7c:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <main+0x2cc>)
 8000d7e:	881a      	ldrh	r2, [r3, #0]
 8000d80:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <main+0x2b4>)
 8000d82:	801a      	strh	r2, [r3, #0]
//                    blink_count = 3;
                    turn_all_off();
 8000d84:	f7ff fc9c 	bl	80006c0 <turn_all_off>
                    start_time = HAL_GetTick();
 8000d88:	f000 fba8 	bl	80014dc <HAL_GetTick>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4a39      	ldr	r2, [pc, #228]	; (8000e74 <main+0x2bc>)
 8000d90:	6013      	str	r3, [r2, #0]
                }
                break;
 8000d92:	e092      	b.n	8000eba <main+0x302>
            case 0:
                if (!nBTN && get_BTN() == 0 && button_flag == 0) {
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f083 0301 	eor.w	r3, r3, #1
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00e      	beq.n	8000dbe <main+0x206>
 8000da0:	f7ff fefe 	bl	8000ba0 <get_BTN>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d109      	bne.n	8000dbe <main+0x206>
 8000daa:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <main+0x2b8>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d105      	bne.n	8000dbe <main+0x206>
                    nBTN = 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	71fb      	strb	r3, [r7, #7]
                    duration_for_red = duration;
 8000db6:	4b23      	ldr	r3, [pc, #140]	; (8000e44 <main+0x28c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <main+0x290>)
 8000dbc:	6013      	str	r3, [r2, #0]
                }
                if ((HAL_GetTick() - start_time) >= blink_duration) {
 8000dbe:	f000 fb8d 	bl	80014dc <HAL_GetTick>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <main+0x2bc>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	1ad2      	subs	r2, r2, r3
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <main+0x2d0>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d375      	bcc.n	8000ebe <main+0x306>
                    if (blink_count > 0) {
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <main+0x2d4>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d022      	beq.n	8000e20 <main+0x268>
                        if (blink_count % 2 == 0) {
 8000dda:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <main+0x2d4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10f      	bne.n	8000e06 <main+0x24e>
                            turn_specific_light_on(GREEN);
 8000de6:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <main+0x2c0>)
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fc80 	bl	80006f0 <turn_specific_light_on>
                            blink_count--;
 8000df0:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <main+0x2d4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <main+0x2d4>)
 8000df8:	6013      	str	r3, [r2, #0]
                            start_time = HAL_GetTick();
 8000dfa:	f000 fb6f 	bl	80014dc <HAL_GetTick>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <main+0x2bc>)
 8000e02:	6013      	str	r3, [r2, #0]
                        current_light = YELLOW;
                        turn_specific_light_on(YELLOW);
                        start_time = HAL_GetTick();
                    }
                }
                break;
 8000e04:	e05b      	b.n	8000ebe <main+0x306>
                            turn_green_light_off();
 8000e06:	f7ff febf 	bl	8000b88 <turn_green_light_off>
                            blink_count--;
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <main+0x2d4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <main+0x2d4>)
 8000e12:	6013      	str	r3, [r2, #0]
                            start_time = HAL_GetTick();
 8000e14:	f000 fb62 	bl	80014dc <HAL_GetTick>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <main+0x2bc>)
 8000e1c:	6013      	str	r3, [r2, #0]
                break;
 8000e1e:	e04e      	b.n	8000ebe <main+0x306>
                        blink_count = 6;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <main+0x2d4>)
 8000e22:	2206      	movs	r2, #6
 8000e24:	601a      	str	r2, [r3, #0]
                        current_light = YELLOW;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <main+0x2d8>)
 8000e28:	881a      	ldrh	r2, [r3, #0]
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <main+0x2b4>)
 8000e2c:	801a      	strh	r2, [r3, #0]
                        turn_specific_light_on(YELLOW);
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <main+0x2d8>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fc5c 	bl	80006f0 <turn_specific_light_on>
                        start_time = HAL_GetTick();
 8000e38:	f000 fb50 	bl	80014dc <HAL_GetTick>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <main+0x2bc>)
 8000e40:	6013      	str	r3, [r2, #0]
                break;
 8000e42:	e03c      	b.n	8000ebe <main+0x306>
 8000e44:	20000008 	.word	0x20000008
 8000e48:	200000c0 	.word	0x200000c0
 8000e4c:	20000018 	.word	0x20000018
 8000e50:	20000020 	.word	0x20000020
 8000e54:	20000198 	.word	0x20000198
 8000e58:	2000001c 	.word	0x2000001c
 8000e5c:	200000c5 	.word	0x200000c5
 8000e60:	20000024 	.word	0x20000024
 8000e64:	20000028 	.word	0x20000028
 8000e68:	20000190 	.word	0x20000190
 8000e6c:	20000006 	.word	0x20000006
 8000e70:	200000c4 	.word	0x200000c4
 8000e74:	200000bc 	.word	0x200000bc
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	2000000c 	.word	0x2000000c
 8000e80:	20000004 	.word	0x20000004
 8000e84:	200000b8 	.word	0x200000b8
 8000e88:	20000010 	.word	0x20000010
 8000e8c:	20000014 	.word	0x20000014
 8000e90:	20000002 	.word	0x20000002
            default:
                current_light = RED;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <main+0x30c>)
 8000e96:	881a      	ldrh	r2, [r3, #0]
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <main+0x310>)
 8000e9a:	801a      	strh	r2, [r3, #0]
                turn_specific_light_on(RED);
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <main+0x30c>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fc25 	bl	80006f0 <turn_specific_light_on>
                start_time = HAL_GetTick();
 8000ea6:	f000 fb19 	bl	80014dc <HAL_GetTick>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <main+0x314>)
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e69f      	b.n	8000bf2 <main+0x3a>
                break;
 8000eb2:	bf00      	nop
 8000eb4:	e69d      	b.n	8000bf2 <main+0x3a>
                break;
 8000eb6:	bf00      	nop
 8000eb8:	e69b      	b.n	8000bf2 <main+0x3a>
                break;
 8000eba:	bf00      	nop
 8000ebc:	e699      	b.n	8000bf2 <main+0x3a>
                break;
 8000ebe:	bf00      	nop
        switch (interrupts_mode) {
 8000ec0:	e697      	b.n	8000bf2 <main+0x3a>
 8000ec2:	bf00      	nop
 8000ec4:	20000004 	.word	0x20000004
 8000ec8:	20000006 	.word	0x20000006
 8000ecc:	200000bc 	.word	0x200000bc

08000ed0 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b094      	sub	sp, #80	; 0x50
 8000ed4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 0320 	add.w	r3, r7, #32
 8000eda:	2230      	movs	r2, #48	; 0x30
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f002 fe3a 	bl	8003b58 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <SystemClock_Config+0xd8>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	4a2a      	ldr	r2, [pc, #168]	; (8000fa8 <SystemClock_Config+0xd8>)
 8000efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f02:	6413      	str	r3, [r2, #64]	; 0x40
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <SystemClock_Config+0xd8>)
 8000f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	4b25      	ldr	r3, [pc, #148]	; (8000fac <SystemClock_Config+0xdc>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a24      	ldr	r2, [pc, #144]	; (8000fac <SystemClock_Config+0xdc>)
 8000f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <SystemClock_Config+0xdc>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f36:	2302      	movs	r3, #2
 8000f38:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 8000f40:	230f      	movs	r3, #15
 8000f42:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 216;
 8000f44:	23d8      	movs	r3, #216	; 0xd8
 8000f46:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f50:	f107 0320 	add.w	r3, r7, #32
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fe9f 	bl	8001c98 <HAL_RCC_OscConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0x94>
        Error_Handler();
 8000f60:	f000 f878 	bl	8001054 <Error_Handler>
    }

    /** Activate the Over-Drive mode
    */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000f64:	f000 fe48 	bl	8001bf8 <HAL_PWREx_EnableOverDrive>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <SystemClock_Config+0xa2>
        Error_Handler();
 8000f6e:	f000 f871 	bl	8001054 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f72:	230f      	movs	r3, #15
 8000f74:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f76:	2302      	movs	r3, #2
 8000f78:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f82:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f88:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	2105      	movs	r1, #5
 8000f90:	4618      	mov	r0, r3
 8000f92:	f001 f8f9 	bl	8002188 <HAL_RCC_ClockConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0xd0>
        Error_Handler();
 8000f9c:	f000 f85a 	bl	8001054 <Error_Handler>
    }
}
 8000fa0:	bf00      	nop
 8000fa2:	3750      	adds	r7, #80	; 0x50
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart6.Instance) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <HAL_UART_RxCpltCallback+0x58>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d11d      	bne.n	8001000 <HAL_UART_RxCpltCallback+0x50>
        if (*cur_read_char == '\r') {
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_UART_RxCpltCallback+0x5c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b0d      	cmp	r3, #13
 8000fcc:	d103      	bne.n	8000fd6 <HAL_UART_RxCpltCallback+0x26>
            cur_read_char = read_buffer;
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_UART_RxCpltCallback+0x5c>)
 8000fd0:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_UART_RxCpltCallback+0x60>)
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e009      	b.n	8000fea <HAL_UART_RxCpltCallback+0x3a>
        } else {
            write_char_to_buff(*cur_read_char);
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <HAL_UART_RxCpltCallback+0x5c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fbd7 	bl	8000790 <write_char_to_buff>
            next(&cur_read_char, read_buffer);
 8000fe2:	490b      	ldr	r1, [pc, #44]	; (8001010 <HAL_UART_RxCpltCallback+0x60>)
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <HAL_UART_RxCpltCallback+0x5c>)
 8000fe6:	f7ff fbb8 	bl	800075a <next>
        }
        if (interrupts_mode == 1)
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_UART_RxCpltCallback+0x64>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d106      	bne.n	8001000 <HAL_UART_RxCpltCallback+0x50>
            HAL_UART_Receive_IT(&huart6, (uint8_t *) cur_read_char, sizeof(char));
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_UART_RxCpltCallback+0x5c>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <HAL_UART_RxCpltCallback+0x58>)
 8000ffc:	f001 fc6a 	bl	80028d4 <HAL_UART_Receive_IT>
    }
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000198 	.word	0x20000198
 800100c:	20000020 	.word	0x20000020
 8001010:	200000c8 	.word	0x200000c8
 8001014:	20000018 	.word	0x20000018

08001018 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart6.Instance) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <HAL_UART_TxCpltCallback+0x2c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d106      	bne.n	800103a <HAL_UART_TxCpltCallback+0x22>
        is_writing_now = 0;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_UART_TxCpltCallback+0x30>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
        next(&transmit_from_pointer, write_buffer);
 8001032:	4906      	ldr	r1, [pc, #24]	; (800104c <HAL_UART_TxCpltCallback+0x34>)
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <HAL_UART_TxCpltCallback+0x38>)
 8001036:	f7ff fb90 	bl	800075a <next>
    }
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000198 	.word	0x20000198
 8001048:	200000c5 	.word	0x200000c5
 800104c:	2000012c 	.word	0x2000012c
 8001050:	20000024 	.word	0x20000024

08001054 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800105c:	e7fe      	b.n	800105c <Error_Handler+0x8>
	...

08001060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <HAL_MspInit+0x4c>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_MspInit+0x4c>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <NMI_Handler+0x4>

080010b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler+0x4>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <BusFault_Handler+0x4>

080010c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <UsageFault_Handler+0x4>

080010ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010fc:	f000 f9da 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}

08001104 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <USART6_IRQHandler+0x10>)
 800110a:	f001 fd27 	bl	8002b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000198 	.word	0x20000198

08001118 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	return 1;
 800111c:	2301      	movs	r3, #1
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_kill>:

int _kill(int pid, int sig)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001132:	f002 fcdf 	bl	8003af4 <__errno>
 8001136:	4603      	mov	r3, r0
 8001138:	2216      	movs	r2, #22
 800113a:	601a      	str	r2, [r3, #0]
	return -1;
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <_exit>:

void _exit (int status)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001150:	f04f 31ff 	mov.w	r1, #4294967295
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffe7 	bl	8001128 <_kill>
	while (1) {}		/* Make sure we hang here */
 800115a:	e7fe      	b.n	800115a <_exit+0x12>

0800115c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e00a      	b.n	8001184 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800116e:	f3af 8000 	nop.w
 8001172:	4601      	mov	r1, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	60ba      	str	r2, [r7, #8]
 800117a:	b2ca      	uxtb	r2, r1
 800117c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	dbf0      	blt.n	800116e <_read+0x12>
	}

return len;
 800118c:	687b      	ldr	r3, [r7, #4]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	e009      	b.n	80011bc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	60ba      	str	r2, [r7, #8]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3301      	adds	r3, #1
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	697a      	ldr	r2, [r7, #20]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	dbf1      	blt.n	80011a8 <_write+0x12>
	}
	return len;
 80011c4:	687b      	ldr	r3, [r7, #4]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <_close>:

int _close(int file)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
	return -1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f6:	605a      	str	r2, [r3, #4]
	return 0;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_isatty>:

int _isatty(int file)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	return 1;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
	return 0;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001240:	4a14      	ldr	r2, [pc, #80]	; (8001294 <_sbrk+0x5c>)
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <_sbrk+0x60>)
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800124c:	4b13      	ldr	r3, [pc, #76]	; (800129c <_sbrk+0x64>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <_sbrk+0x64>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <_sbrk+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	429a      	cmp	r2, r3
 8001266:	d207      	bcs.n	8001278 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001268:	f002 fc44 	bl	8003af4 <__errno>
 800126c:	4603      	mov	r3, r0
 800126e:	220c      	movs	r2, #12
 8001270:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	e009      	b.n	800128c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <_sbrk+0x64>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	4a05      	ldr	r2, [pc, #20]	; (800129c <_sbrk+0x64>)
 8001288:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20030000 	.word	0x20030000
 8001298:	00000400 	.word	0x00000400
 800129c:	20000194 	.word	0x20000194
 80012a0:	200001f0 	.word	0x200001f0

080012a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <SystemInit+0x20>)
 80012aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <SystemInit+0x20>)
 80012b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_USART6_UART_Init+0x4c>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <MX_USART6_UART_Init+0x50>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 57600;
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <MX_USART6_UART_Init+0x4c>)
 80012d4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80012d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_USART6_UART_Init+0x4c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_USART6_UART_Init+0x4c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_USART6_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_USART6_UART_Init+0x4c>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_USART6_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_USART6_UART_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_USART6_UART_Init+0x4c>)
 8001300:	f001 f922 	bl	8002548 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800130a:	f7ff fea3 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000198 	.word	0x20000198
 8001318:	40011400 	.word	0x40011400

0800131c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_UART_MspInit+0x94>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d133      	bne.n	80013a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_UART_MspInit+0x98>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <HAL_UART_MspInit+0x98>)
 8001348:	f043 0320 	orr.w	r3, r3, #32
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0x98>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f003 0320 	and.w	r3, r3, #32
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_UART_MspInit+0x98>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_UART_MspInit+0x98>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_UART_MspInit+0x98>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001376:	23c0      	movs	r3, #192	; 0xc0
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001386:	2308      	movs	r3, #8
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <HAL_UART_MspInit+0x9c>)
 8001392:	f000 fa53 	bl	800183c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	2047      	movs	r0, #71	; 0x47
 800139c:	f000 f985 	bl	80016aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013a0:	2047      	movs	r0, #71	; 0x47
 80013a2:	f000 f99e 	bl	80016e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80013a6:	bf00      	nop
 80013a8:	3728      	adds	r7, #40	; 0x28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40011400 	.word	0x40011400
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020800 	.word	0x40020800

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013c2:	490e      	ldr	r1, [pc, #56]	; (80013fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013c4:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d8:	4c0b      	ldr	r4, [pc, #44]	; (8001408 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013e6:	f7ff ff5d 	bl	80012a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f002 fb89 	bl	8003b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff fbe3 	bl	8000bb8 <main>
  bx  lr    
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001400:	080054f4 	.word	0x080054f4
  ldr r2, =_sbss
 8001404:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001408:	200001f0 	.word	0x200001f0

0800140c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_Init+0x40>)
 800141a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_Init+0x40>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_Init+0x40>)
 8001432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f92b 	bl	8001694 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fe0c 	bl	8001060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f943 	bl	80016fe <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f90b 	bl	80016aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000002c 	.word	0x2000002c
 80014ac:	20000034 	.word	0x20000034
 80014b0:	20000030 	.word	0x20000030

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x20>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x24>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_IncTick+0x24>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000034 	.word	0x20000034
 80014d8:	200001dc 	.word	0x200001dc

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200001dc 	.word	0x200001dc

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001660:	d301      	bcc.n	8001666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001662:	2301      	movs	r3, #1
 8001664:	e00f      	b.n	8001686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <SysTick_Config+0x40>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3b01      	subs	r3, #1
 800166c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800166e:	210f      	movs	r1, #15
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f7ff ff8e 	bl	8001594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <SysTick_Config+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SysTick_Config+0x40>)
 8001680:	2207      	movs	r2, #7
 8001682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	e000e010 	.word	0xe000e010

08001694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff ff29 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016bc:	f7ff ff3e 	bl	800153c <__NVIC_GetPriorityGrouping>
 80016c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68b9      	ldr	r1, [r7, #8]
 80016c6:	6978      	ldr	r0, [r7, #20]
 80016c8:	f7ff ff8e 	bl	80015e8 <NVIC_EncodePriority>
 80016cc:	4602      	mov	r2, r0
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff5d 	bl	8001594 <__NVIC_SetPriority>
}
 80016da:	bf00      	nop
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff31 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ffa2 	bl	8001650 <SysTick_Config>
 800170c:	4603      	mov	r3, r0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001722:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff feda 	bl	80014dc <HAL_GetTick>
 8001728:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d008      	beq.n	8001748 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2280      	movs	r2, #128	; 0x80
 800173a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e052      	b.n	80017ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0216 	bic.w	r2, r2, #22
 8001756:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695a      	ldr	r2, [r3, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001766:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <HAL_DMA_Abort+0x62>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0208 	bic.w	r2, r2, #8
 8001786:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0201 	bic.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001798:	e013      	b.n	80017c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800179a:	f7ff fe9f 	bl	80014dc <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b05      	cmp	r3, #5
 80017a6:	d90c      	bls.n	80017c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2220      	movs	r2, #32
 80017ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2203      	movs	r2, #3
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e015      	b.n	80017ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1e4      	bne.n	800179a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d4:	223f      	movs	r2, #63	; 0x3f
 80017d6:	409a      	lsls	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d004      	beq.n	8001814 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2280      	movs	r2, #128	; 0x80
 800180e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e00c      	b.n	800182e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2205      	movs	r2, #5
 8001818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0201 	bic.w	r2, r2, #1
 800182a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	; 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	e177      	b.n	8001b48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001858:	2201      	movs	r2, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	429a      	cmp	r2, r3
 8001872:	f040 8166 	bne.w	8001b42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d005      	beq.n	800188e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188a:	2b02      	cmp	r3, #2
 800188c:	d130      	bne.n	80018f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c4:	2201      	movs	r2, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	091b      	lsrs	r3, r3, #4
 80018da:	f003 0201 	and.w	r2, r3, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d017      	beq.n	800192c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689a      	ldr	r2, [r3, #8]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d123      	bne.n	8001980 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	08da      	lsrs	r2, r3, #3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3208      	adds	r2, #8
 8001940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001944:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	220f      	movs	r2, #15
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4013      	ands	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	08da      	lsrs	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	69b9      	ldr	r1, [r7, #24]
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0203 	and.w	r2, r3, #3
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80c0 	beq.w	8001b42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b66      	ldr	r3, [pc, #408]	; (8001b60 <HAL_GPIO_Init+0x324>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a65      	ldr	r2, [pc, #404]	; (8001b60 <HAL_GPIO_Init+0x324>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_GPIO_Init+0x324>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019de:	4a61      	ldr	r2, [pc, #388]	; (8001b64 <HAL_GPIO_Init+0x328>)
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	220f      	movs	r2, #15
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <HAL_GPIO_Init+0x32c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d037      	beq.n	8001a7a <HAL_GPIO_Init+0x23e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a57      	ldr	r2, [pc, #348]	; (8001b6c <HAL_GPIO_Init+0x330>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d031      	beq.n	8001a76 <HAL_GPIO_Init+0x23a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a56      	ldr	r2, [pc, #344]	; (8001b70 <HAL_GPIO_Init+0x334>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d02b      	beq.n	8001a72 <HAL_GPIO_Init+0x236>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a55      	ldr	r2, [pc, #340]	; (8001b74 <HAL_GPIO_Init+0x338>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d025      	beq.n	8001a6e <HAL_GPIO_Init+0x232>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a54      	ldr	r2, [pc, #336]	; (8001b78 <HAL_GPIO_Init+0x33c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01f      	beq.n	8001a6a <HAL_GPIO_Init+0x22e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a53      	ldr	r2, [pc, #332]	; (8001b7c <HAL_GPIO_Init+0x340>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d019      	beq.n	8001a66 <HAL_GPIO_Init+0x22a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a52      	ldr	r2, [pc, #328]	; (8001b80 <HAL_GPIO_Init+0x344>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_GPIO_Init+0x226>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a51      	ldr	r2, [pc, #324]	; (8001b84 <HAL_GPIO_Init+0x348>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00d      	beq.n	8001a5e <HAL_GPIO_Init+0x222>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a50      	ldr	r2, [pc, #320]	; (8001b88 <HAL_GPIO_Init+0x34c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d007      	beq.n	8001a5a <HAL_GPIO_Init+0x21e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4f      	ldr	r2, [pc, #316]	; (8001b8c <HAL_GPIO_Init+0x350>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_GPIO_Init+0x21a>
 8001a52:	2309      	movs	r3, #9
 8001a54:	e012      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a56:	230a      	movs	r3, #10
 8001a58:	e010      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a5a:	2308      	movs	r3, #8
 8001a5c:	e00e      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a5e:	2307      	movs	r3, #7
 8001a60:	e00c      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a62:	2306      	movs	r3, #6
 8001a64:	e00a      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a66:	2305      	movs	r3, #5
 8001a68:	e008      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f002 0203 	and.w	r2, r2, #3
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4093      	lsls	r3, r2
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a8c:	4935      	ldr	r1, [pc, #212]	; (8001b64 <HAL_GPIO_Init+0x328>)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001abe:	4a34      	ldr	r2, [pc, #208]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae8:	4a29      	ldr	r2, [pc, #164]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aee:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b12:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <HAL_GPIO_Init+0x354>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	f67f ae84 	bls.w	8001858 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40021400 	.word	0x40021400
 8001b80:	40021800 	.word	0x40021800
 8001b84:	40021c00 	.word	0x40021c00
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	40022400 	.word	0x40022400
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bac:	2301      	movs	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	e001      	b.n	8001bb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	807b      	strh	r3, [r7, #2]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd4:	787b      	ldrb	r3, [r7, #1]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bda:	887a      	ldrh	r2, [r7, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001be0:	e003      	b.n	8001bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001be2:	887b      	ldrh	r3, [r7, #2]
 8001be4:	041a      	lsls	r2, r3, #16
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	619a      	str	r2, [r3, #24]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_PWREx_EnableOverDrive+0x94>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c24:	f7ff fc5a 	bl	80014dc <HAL_GetTick>
 8001c28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c2a:	e009      	b.n	8001c40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c2c:	f7ff fc56 	bl	80014dc <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c3a:	d901      	bls.n	8001c40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e01f      	b.n	8001c80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c40:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d1ee      	bne.n	8001c2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c54:	f7ff fc42 	bl	80014dc <HAL_GetTick>
 8001c58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c5a:	e009      	b.n	8001c70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c5c:	f7ff fc3e 	bl	80014dc <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c6a:	d901      	bls.n	8001c70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e007      	b.n	8001c80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c7c:	d1ee      	bne.n	8001c5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	420e0040 	.word	0x420e0040
 8001c90:	40007000 	.word	0x40007000
 8001c94:	420e0044 	.word	0x420e0044

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e267      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d075      	beq.n	8001da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cb6:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d00c      	beq.n	8001cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc2:	4b85      	ldr	r3, [pc, #532]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d112      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cce:	4b82      	ldr	r3, [pc, #520]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cda:	d10b      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	4b7e      	ldr	r3, [pc, #504]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d05b      	beq.n	8001da0 <HAL_RCC_OscConfig+0x108>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d157      	bne.n	8001da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e242      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_OscConfig+0x74>
 8001cfe:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a75      	ldr	r2, [pc, #468]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xb0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x98>
 8001d16:	4b70      	ldr	r3, [pc, #448]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6f      	ldr	r2, [pc, #444]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b6d      	ldr	r3, [pc, #436]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6c      	ldr	r2, [pc, #432]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xb0>
 8001d30:	4b69      	ldr	r3, [pc, #420]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a68      	ldr	r2, [pc, #416]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b66      	ldr	r3, [pc, #408]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a65      	ldr	r2, [pc, #404]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff fbc4 	bl	80014dc <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff fbc0 	bl	80014dc <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e207      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xc0>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fbb0 	bl	80014dc <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff fbac 	bl	80014dc <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1f3      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	4b51      	ldr	r3, [pc, #324]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0xe8>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dae:	4b4a      	ldr	r3, [pc, #296]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dba:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc6:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d116      	bne.n	8001e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x152>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1c7      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4937      	ldr	r1, [pc, #220]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	e03a      	b.n	8001e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e08:	4b34      	ldr	r3, [pc, #208]	; (8001edc <HAL_RCC_OscConfig+0x244>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fb65 	bl	80014dc <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fb61 	bl	80014dc <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1a8      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4925      	ldr	r1, [pc, #148]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_RCC_OscConfig+0x244>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff fb44 	bl	80014dc <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e58:	f7ff fb40 	bl	80014dc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e187      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d036      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d016      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <HAL_RCC_OscConfig+0x248>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7ff fb24 	bl	80014dc <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e98:	f7ff fb20 	bl	80014dc <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e167      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_OscConfig+0x240>)
 8001eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x200>
 8001eb6:	e01b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb8:	4b09      	ldr	r3, [pc, #36]	; (8001ee0 <HAL_RCC_OscConfig+0x248>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7ff fb0d 	bl	80014dc <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec4:	e00e      	b.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec6:	f7ff fb09 	bl	80014dc <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d907      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e150      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	42470000 	.word	0x42470000
 8001ee0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee4:	4b88      	ldr	r3, [pc, #544]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1ea      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 8097 	beq.w	800202c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f02:	4b81      	ldr	r3, [pc, #516]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10f      	bne.n	8001f2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	4b7d      	ldr	r3, [pc, #500]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	4a7c      	ldr	r2, [pc, #496]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1e:	4b7a      	ldr	r3, [pc, #488]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2e:	4b77      	ldr	r3, [pc, #476]	; (800210c <HAL_RCC_OscConfig+0x474>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d118      	bne.n	8001f6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f3a:	4b74      	ldr	r3, [pc, #464]	; (800210c <HAL_RCC_OscConfig+0x474>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a73      	ldr	r2, [pc, #460]	; (800210c <HAL_RCC_OscConfig+0x474>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f46:	f7ff fac9 	bl	80014dc <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4e:	f7ff fac5 	bl	80014dc <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e10c      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	4b6a      	ldr	r3, [pc, #424]	; (800210c <HAL_RCC_OscConfig+0x474>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x2ea>
 8001f74:	4b64      	ldr	r3, [pc, #400]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	4a63      	ldr	r2, [pc, #396]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f80:	e01c      	b.n	8001fbc <HAL_RCC_OscConfig+0x324>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x30c>
 8001f8a:	4b5f      	ldr	r3, [pc, #380]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8e:	4a5e      	ldr	r2, [pc, #376]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	6713      	str	r3, [r2, #112]	; 0x70
 8001f96:	4b5c      	ldr	r3, [pc, #368]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	4a5b      	ldr	r2, [pc, #364]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCC_OscConfig+0x324>
 8001fa4:	4b58      	ldr	r3, [pc, #352]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	4a57      	ldr	r2, [pc, #348]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb0:	4b55      	ldr	r3, [pc, #340]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb4:	4a54      	ldr	r2, [pc, #336]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	f023 0304 	bic.w	r3, r3, #4
 8001fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d015      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff fa8a 	bl	80014dc <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fa86 	bl	80014dc <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0cb      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe2:	4b49      	ldr	r3, [pc, #292]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0ee      	beq.n	8001fcc <HAL_RCC_OscConfig+0x334>
 8001fee:	e014      	b.n	800201a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fa74 	bl	80014dc <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7ff fa70 	bl	80014dc <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e0b5      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800200e:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1ee      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800201a:	7dfb      	ldrb	r3, [r7, #23]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d105      	bne.n	800202c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002020:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	4a38      	ldr	r2, [pc, #224]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8002026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80a1 	beq.w	8002178 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002036:	4b34      	ldr	r3, [pc, #208]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	2b08      	cmp	r3, #8
 8002040:	d05c      	beq.n	80020fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d141      	bne.n	80020ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <HAL_RCC_OscConfig+0x478>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff fa44 	bl	80014dc <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff fa40 	bl	80014dc <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e087      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206a:	4b27      	ldr	r3, [pc, #156]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	019b      	lsls	r3, r3, #6
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	085b      	lsrs	r3, r3, #1
 800208e:	3b01      	subs	r3, #1
 8002090:	041b      	lsls	r3, r3, #16
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	061b      	lsls	r3, r3, #24
 800209a:	491b      	ldr	r1, [pc, #108]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_RCC_OscConfig+0x478>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff fa19 	bl	80014dc <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ae:	f7ff fa15 	bl	80014dc <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e05c      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x416>
 80020cc:	e054      	b.n	8002178 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_RCC_OscConfig+0x478>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d4:	f7ff fa02 	bl	80014dc <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff f9fe 	bl	80014dc <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e045      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_RCC_OscConfig+0x470>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x444>
 80020fa:	e03d      	b.n	8002178 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e038      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
 8002108:	40023800 	.word	0x40023800
 800210c:	40007000 	.word	0x40007000
 8002110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_RCC_OscConfig+0x4ec>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d028      	beq.n	8002174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d121      	bne.n	8002174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d11a      	bne.n	8002174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800214a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800214c:	4293      	cmp	r3, r2
 800214e:	d111      	bne.n	8002174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	3b01      	subs	r3, #1
 800215e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d107      	bne.n	8002174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800

08002188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0cc      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800219c:	4b68      	ldr	r3, [pc, #416]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d90c      	bls.n	80021c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021aa:	4b65      	ldr	r3, [pc, #404]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b2:	4b63      	ldr	r3, [pc, #396]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0b8      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d020      	beq.n	8002212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021dc:	4b59      	ldr	r3, [pc, #356]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4a58      	ldr	r2, [pc, #352]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f4:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002200:	4b50      	ldr	r3, [pc, #320]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	494d      	ldr	r1, [pc, #308]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	4313      	orrs	r3, r2
 8002210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d044      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	4b47      	ldr	r3, [pc, #284]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d119      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e07f      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d003      	beq.n	8002246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002242:	2b03      	cmp	r3, #3
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002246:	4b3f      	ldr	r3, [pc, #252]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e06f      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e067      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002266:	4b37      	ldr	r3, [pc, #220]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f023 0203 	bic.w	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4934      	ldr	r1, [pc, #208]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	4313      	orrs	r3, r2
 8002276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002278:	f7ff f930 	bl	80014dc <HAL_GetTick>
 800227c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227e:	e00a      	b.n	8002296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002280:	f7ff f92c 	bl	80014dc <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	f241 3288 	movw	r2, #5000	; 0x1388
 800228e:	4293      	cmp	r3, r2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e04f      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f003 020c 	and.w	r2, r3, #12
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d1eb      	bne.n	8002280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022a8:	4b25      	ldr	r3, [pc, #148]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d20c      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b6:	4b22      	ldr	r3, [pc, #136]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_RCC_ClockConfig+0x1b8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d001      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e032      	b.n	8002336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4916      	ldr	r1, [pc, #88]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d009      	beq.n	800230e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	490e      	ldr	r1, [pc, #56]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800230e:	f000 f821 	bl	8002354 <HAL_RCC_GetSysClockFreq>
 8002312:	4602      	mov	r2, r0
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	091b      	lsrs	r3, r3, #4
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	490a      	ldr	r1, [pc, #40]	; (8002348 <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	5ccb      	ldrb	r3, [r1, r3]
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	4a09      	ldr	r2, [pc, #36]	; (800234c <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1c8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f890 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023c00 	.word	0x40023c00
 8002344:	40023800 	.word	0x40023800
 8002348:	08005284 	.word	0x08005284
 800234c:	2000002c 	.word	0x2000002c
 8002350:	20000030 	.word	0x20000030

08002354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002358:	b090      	sub	sp, #64	; 0x40
 800235a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	637b      	str	r3, [r7, #52]	; 0x34
 8002360:	2300      	movs	r3, #0
 8002362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002364:	2300      	movs	r3, #0
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b08      	cmp	r3, #8
 8002376:	d00d      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x40>
 8002378:	2b08      	cmp	r3, #8
 800237a:	f200 80a1 	bhi.w	80024c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0x34>
 8002382:	2b04      	cmp	r3, #4
 8002384:	d003      	beq.n	800238e <HAL_RCC_GetSysClockFreq+0x3a>
 8002386:	e09b      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002388:	4b53      	ldr	r3, [pc, #332]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800238c:	e09b      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800238e:	4b53      	ldr	r3, [pc, #332]	; (80024dc <HAL_RCC_GetSysClockFreq+0x188>)
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002392:	e098      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002394:	4b4f      	ldr	r3, [pc, #316]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800239e:	4b4d      	ldr	r3, [pc, #308]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d028      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023aa:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	2200      	movs	r2, #0
 80023b2:	623b      	str	r3, [r7, #32]
 80023b4:	627a      	str	r2, [r7, #36]	; 0x24
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023bc:	2100      	movs	r1, #0
 80023be:	4b47      	ldr	r3, [pc, #284]	; (80024dc <HAL_RCC_GetSysClockFreq+0x188>)
 80023c0:	fb03 f201 	mul.w	r2, r3, r1
 80023c4:	2300      	movs	r3, #0
 80023c6:	fb00 f303 	mul.w	r3, r0, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	4a43      	ldr	r2, [pc, #268]	; (80024dc <HAL_RCC_GetSysClockFreq+0x188>)
 80023ce:	fba0 1202 	umull	r1, r2, r0, r2
 80023d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023d4:	460a      	mov	r2, r1
 80023d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80023d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023da:	4413      	add	r3, r2
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e0:	2200      	movs	r2, #0
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	61fa      	str	r2, [r7, #28]
 80023e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80023ee:	f7fd ff67 	bl	80002c0 <__aeabi_uldivmod>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4613      	mov	r3, r2
 80023f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023fa:	e053      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	2200      	movs	r2, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	617a      	str	r2, [r7, #20]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800240e:	f04f 0b00 	mov.w	fp, #0
 8002412:	4652      	mov	r2, sl
 8002414:	465b      	mov	r3, fp
 8002416:	f04f 0000 	mov.w	r0, #0
 800241a:	f04f 0100 	mov.w	r1, #0
 800241e:	0159      	lsls	r1, r3, #5
 8002420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002424:	0150      	lsls	r0, r2, #5
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	ebb2 080a 	subs.w	r8, r2, sl
 800242e:	eb63 090b 	sbc.w	r9, r3, fp
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800243e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002442:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002446:	ebb2 0408 	subs.w	r4, r2, r8
 800244a:	eb63 0509 	sbc.w	r5, r3, r9
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	00eb      	lsls	r3, r5, #3
 8002458:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800245c:	00e2      	lsls	r2, r4, #3
 800245e:	4614      	mov	r4, r2
 8002460:	461d      	mov	r5, r3
 8002462:	eb14 030a 	adds.w	r3, r4, sl
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	eb45 030b 	adc.w	r3, r5, fp
 800246c:	607b      	str	r3, [r7, #4]
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	e9d7 4500 	ldrd	r4, r5, [r7]
 800247a:	4629      	mov	r1, r5
 800247c:	028b      	lsls	r3, r1, #10
 800247e:	4621      	mov	r1, r4
 8002480:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002484:	4621      	mov	r1, r4
 8002486:	028a      	lsls	r2, r1, #10
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248e:	2200      	movs	r2, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	60fa      	str	r2, [r7, #12]
 8002494:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002498:	f7fd ff12 	bl	80002c0 <__aeabi_uldivmod>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4613      	mov	r3, r2
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	0c1b      	lsrs	r3, r3, #16
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	3301      	adds	r3, #1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80024b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024be:	e002      	b.n	80024c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80024c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3740      	adds	r7, #64	; 0x40
 80024cc:	46bd      	mov	sp, r7
 80024ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	017d7840 	.word	0x017d7840

080024e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024e6:	681b      	ldr	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	2000002c 	.word	0x2000002c

080024f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024fc:	f7ff fff0 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	0a9b      	lsrs	r3, r3, #10
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	4903      	ldr	r1, [pc, #12]	; (800251c <HAL_RCC_GetPCLK1Freq+0x24>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002514:	4618      	mov	r0, r3
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	08005294 	.word	0x08005294

08002520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002524:	f7ff ffdc 	bl	80024e0 <HAL_RCC_GetHCLKFreq>
 8002528:	4602      	mov	r2, r0
 800252a:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_GetPCLK2Freq+0x20>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	0b5b      	lsrs	r3, r3, #13
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	4903      	ldr	r1, [pc, #12]	; (8002544 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002536:	5ccb      	ldrb	r3, [r1, r3]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40023800 	.word	0x40023800
 8002544:	08005294 	.word	0x08005294

08002548 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e03f      	b.n	80025da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe fed4 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2224      	movs	r2, #36	; 0x24
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800258a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f001 f839 	bl	8003604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695a      	ldr	r2, [r3, #20]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b08a      	sub	sp, #40	; 0x28
 80025e6:	af02      	add	r7, sp, #8
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	603b      	str	r3, [r7, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b20      	cmp	r3, #32
 8002600:	d17c      	bne.n	80026fc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_UART_Transmit+0x2c>
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e075      	b.n	80026fe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_UART_Transmit+0x3e>
 800261c:	2302      	movs	r3, #2
 800261e:	e06e      	b.n	80026fe <HAL_UART_Transmit+0x11c>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2221      	movs	r2, #33	; 0x21
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002636:	f7fe ff51 	bl	80014dc <HAL_GetTick>
 800263a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	88fa      	ldrh	r2, [r7, #6]
 8002640:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	88fa      	ldrh	r2, [r7, #6]
 8002646:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002650:	d108      	bne.n	8002664 <HAL_UART_Transmit+0x82>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d104      	bne.n	8002664 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	e003      	b.n	800266c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002674:	e02a      	b.n	80026cc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2200      	movs	r2, #0
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fd19 	bl	80030b8 <UART_WaitOnFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e036      	b.n	80026fe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10b      	bne.n	80026ae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	3302      	adds	r3, #2
 80026aa:	61bb      	str	r3, [r7, #24]
 80026ac:	e007      	b.n	80026be <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	3301      	adds	r3, #1
 80026bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1cf      	bne.n	8002676 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2200      	movs	r2, #0
 80026de:	2140      	movs	r1, #64	; 0x40
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 fce9 	bl	80030b8 <UART_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e006      	b.n	80026fe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e000      	b.n	80026fe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026fc:	2302      	movs	r3, #2
  }
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3720      	adds	r7, #32
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b08a      	sub	sp, #40	; 0x28
 800270a:	af02      	add	r7, sp, #8
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	4613      	mov	r3, r2
 8002714:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b20      	cmp	r3, #32
 8002724:	f040 808c 	bne.w	8002840 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_UART_Receive+0x2e>
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e084      	b.n	8002842 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_UART_Receive+0x40>
 8002742:	2302      	movs	r3, #2
 8002744:	e07d      	b.n	8002842 <HAL_UART_Receive+0x13c>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2222      	movs	r2, #34	; 0x22
 8002758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002762:	f7fe febb 	bl	80014dc <HAL_GetTick>
 8002766:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	88fa      	ldrh	r2, [r7, #6]
 8002772:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277c:	d108      	bne.n	8002790 <HAL_UART_Receive+0x8a>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d104      	bne.n	8002790 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e003      	b.n	8002798 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80027a0:	e043      	b.n	800282a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2120      	movs	r1, #32
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fc83 	bl	80030b8 <UART_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e042      	b.n	8002842 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10c      	bne.n	80027dc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	3302      	adds	r3, #2
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	e01f      	b.n	800281c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e4:	d007      	beq.n	80027f6 <HAL_UART_Receive+0xf0>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <HAL_UART_Receive+0xfe>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e008      	b.n	8002816 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002810:	b2da      	uxtb	r2, r3
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3301      	adds	r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1b6      	bne.n	80027a2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	e000      	b.n	8002842 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002840:	2302      	movs	r3, #2
  }
}
 8002842:	4618      	mov	r0, r3
 8002844:	3720      	adds	r7, #32
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	4613      	mov	r3, r2
 8002856:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b20      	cmp	r3, #32
 8002862:	d130      	bne.n	80028c6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_UART_Transmit_IT+0x26>
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e029      	b.n	80028c8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_UART_Transmit_IT+0x38>
 800287e:	2302      	movs	r3, #2
 8002880:	e022      	b.n	80028c8 <HAL_UART_Transmit_IT+0x7e>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	88fa      	ldrh	r2, [r7, #6]
 800289a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2221      	movs	r2, #33	; 0x21
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028c0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e000      	b.n	80028c8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80028c6:	2302      	movs	r3, #2
  }
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d11d      	bne.n	800292a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_UART_Receive_IT+0x26>
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e016      	b.n	800292c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_UART_Receive_IT+0x38>
 8002908:	2302      	movs	r3, #2
 800290a:	e00f      	b.n	800292c <HAL_UART_Receive_IT+0x58>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	461a      	mov	r2, r3
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fc37 	bl	8003194 <UART_Start_Receive_IT>
 8002926:	4603      	mov	r3, r0
 8002928:	e000      	b.n	800292c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800292a:	2302      	movs	r3, #2
  }
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b0a2      	sub	sp, #136	; 0x88
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 800293c:	2301      	movs	r3, #1
 800293e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	330c      	adds	r3, #12
 8002948:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800294c:	e853 3f00 	ldrex	r3, [r3]
 8002950:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002954:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8002958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	330c      	adds	r3, #12
 8002962:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002966:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002968:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800296c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800296e:	e841 2300 	strex	r3, r2, [r1]
 8002972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1e3      	bne.n	8002942 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3314      	adds	r3, #20
 8002980:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002984:	e853 3f00 	ldrex	r3, [r3]
 8002988:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800298a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3314      	adds	r3, #20
 8002998:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800299a:	65ba      	str	r2, [r7, #88]	; 0x58
 800299c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029a2:	e841 2300 	strex	r3, r2, [r1]
 80029a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80029a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1e5      	bne.n	800297a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d119      	bne.n	80029ea <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	330c      	adds	r3, #12
 80029bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c0:	e853 3f00 	ldrex	r3, [r3]
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c8:	f023 0310 	bic.w	r3, r3, #16
 80029cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	330c      	adds	r3, #12
 80029d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029d6:	647a      	str	r2, [r7, #68]	; 0x44
 80029d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029de:	e841 2300 	strex	r3, r2, [r1]
 80029e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e5      	bne.n	80029b6 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00f      	beq.n	8002a12 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029fc:	2b80      	cmp	r3, #128	; 0x80
 80029fe:	d104      	bne.n	8002a0a <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	4a53      	ldr	r2, [pc, #332]	; (8002b54 <HAL_UART_Abort_IT+0x220>)
 8002a06:	651a      	str	r2, [r3, #80]	; 0x50
 8002a08:	e003      	b.n	8002a12 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0e:	2200      	movs	r2, #0
 8002a10:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00f      	beq.n	8002a3a <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d104      	bne.n	8002a32 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2c:	4a4a      	ldr	r2, [pc, #296]	; (8002b58 <HAL_UART_Abort_IT+0x224>)
 8002a2e:	651a      	str	r2, [r3, #80]	; 0x50
 8002a30:	e003      	b.n	8002a3a <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a36:	2200      	movs	r2, #0
 8002a38:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a44:	2b80      	cmp	r3, #128	; 0x80
 8002a46:	d12d      	bne.n	8002aa4 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3314      	adds	r3, #20
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	e853 3f00 	ldrex	r3, [r3]
 8002a56:	623b      	str	r3, [r7, #32]
   return(result);
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a5e:	677b      	str	r3, [r7, #116]	; 0x74
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3314      	adds	r3, #20
 8002a66:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a68:	633a      	str	r2, [r7, #48]	; 0x30
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a70:	e841 2300 	strex	r3, r2, [r1]
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e5      	bne.n	8002a48 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00f      	beq.n	8002aa4 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fe feb4 	bl	80017f6 <HAL_DMA_Abort_IT>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	2200      	movs	r2, #0
 8002a9a:	651a      	str	r2, [r3, #80]	; 0x50
 8002a9c:	e002      	b.n	8002aa4 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d130      	bne.n	8002b14 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3314      	adds	r3, #20
 8002ab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	e853 3f00 	ldrex	r3, [r3]
 8002ac0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac8:	673b      	str	r3, [r7, #112]	; 0x70
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3314      	adds	r3, #20
 8002ad0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ad2:	61fa      	str	r2, [r7, #28]
 8002ad4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	69b9      	ldr	r1, [r7, #24]
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	e841 2300 	strex	r3, r2, [r1]
 8002ade:	617b      	str	r3, [r7, #20]
   return(result);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e5      	bne.n	8002ab2 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fe7f 	bl	80017f6 <HAL_DMA_Abort_IT>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d007      	beq.n	8002b0e <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	2200      	movs	r2, #0
 8002b04:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8002b06:	2301      	movs	r3, #1
 8002b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b0c:	e002      	b.n	8002b14 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 8002b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d116      	bne.n	8002b4a <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 faa1 	bl	800308c <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3788      	adds	r7, #136	; 0x88
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	080032ff 	.word	0x080032ff
 8002b58:	0800335f 	.word	0x0800335f

08002b5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b0ba      	sub	sp, #232	; 0xe8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002b9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d009      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x66>
 8002bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fc67 	bl	800348e <UART_Receive_IT>
      return;
 8002bc0:	e256      	b.n	8003070 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80de 	beq.w	8002d88 <HAL_UART_IRQHandler+0x22c>
 8002bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80d1 	beq.w	8002d88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00b      	beq.n	8002c0a <HAL_UART_IRQHandler+0xae>
 8002bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00b      	beq.n	8002c2e <HAL_UART_IRQHandler+0xd2>
 8002c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f043 0202 	orr.w	r2, r3, #2
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <HAL_UART_IRQHandler+0xf6>
 8002c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f043 0204 	orr.w	r2, r3, #4
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d011      	beq.n	8002c82 <HAL_UART_IRQHandler+0x126>
 8002c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d105      	bne.n	8002c76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f043 0208 	orr.w	r2, r3, #8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 81ed 	beq.w	8003066 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_UART_IRQHandler+0x14e>
 8002c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fbf2 	bl	800348e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb4:	2b40      	cmp	r3, #64	; 0x40
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d103      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x17a>
 8002cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d04f      	beq.n	8002d76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fa9a 	bl	8003210 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d141      	bne.n	8002d6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3314      	adds	r3, #20
 8002cf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cf8:	e853 3f00 	ldrex	r3, [r3]
 8002cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3314      	adds	r3, #20
 8002d12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d26:	e841 2300 	strex	r3, r2, [r1]
 8002d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1d9      	bne.n	8002cea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d013      	beq.n	8002d66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	4a7d      	ldr	r2, [pc, #500]	; (8002f38 <HAL_UART_IRQHandler+0x3dc>)
 8002d44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fd53 	bl	80017f6 <HAL_DMA_Abort_IT>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d60:	4610      	mov	r0, r2
 8002d62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d64:	e00e      	b.n	8002d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f986 	bl	8003078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	e00a      	b.n	8002d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f982 	bl	8003078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d74:	e006      	b.n	8002d84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f97e 	bl	8003078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d82:	e170      	b.n	8003066 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d84:	bf00      	nop
    return;
 8002d86:	e16e      	b.n	8003066 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	f040 814a 	bne.w	8003026 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8143 	beq.w	8003026 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 813c 	beq.w	8003026 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002dae:	2300      	movs	r3, #0
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dce:	2b40      	cmp	r3, #64	; 0x40
 8002dd0:	f040 80b4 	bne.w	8002f3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002de0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8140 	beq.w	800306a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002df2:	429a      	cmp	r2, r3
 8002df4:	f080 8139 	bcs.w	800306a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002dfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0a:	f000 8088 	beq.w	8002f1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	330c      	adds	r3, #12
 8002e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	330c      	adds	r3, #12
 8002e36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002e3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002e46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1d9      	bne.n	8002e0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3314      	adds	r3, #20
 8002e60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3314      	adds	r3, #20
 8002e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002e82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002e86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e8a:	e841 2300 	strex	r3, r2, [r1]
 8002e8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e1      	bne.n	8002e5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3314      	adds	r3, #20
 8002eb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002eba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ebc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ec0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e3      	bne.n	8002e96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eee:	f023 0310 	bic.w	r3, r3, #16
 8002ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f00:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f08:	e841 2300 	strex	r3, r2, [r1]
 8002f0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1e3      	bne.n	8002edc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7fe fbfc 	bl	8001716 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f8b6 	bl	80030a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f34:	e099      	b.n	800306a <HAL_UART_IRQHandler+0x50e>
 8002f36:	bf00      	nop
 8002f38:	080032d7 	.word	0x080032d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 808b 	beq.w	800306e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8086 	beq.w	800306e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	330c      	adds	r3, #12
 8002f68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	330c      	adds	r3, #12
 8002f82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002f86:	647a      	str	r2, [r7, #68]	; 0x44
 8002f88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e3      	bne.n	8002f62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	e853 3f00 	ldrex	r3, [r3]
 8002fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3314      	adds	r3, #20
 8002fba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fbe:	633a      	str	r2, [r7, #48]	; 0x30
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e3      	bne.n	8002f9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	330c      	adds	r3, #12
 8002fe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	e853 3f00 	ldrex	r3, [r3]
 8002fee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0310 	bic.w	r3, r3, #16
 8002ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	330c      	adds	r3, #12
 8003000:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003004:	61fa      	str	r2, [r7, #28]
 8003006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003008:	69b9      	ldr	r1, [r7, #24]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	e841 2300 	strex	r3, r2, [r1]
 8003010:	617b      	str	r3, [r7, #20]
   return(result);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e3      	bne.n	8002fe0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003018:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800301c:	4619      	mov	r1, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f83e 	bl	80030a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003024:	e023      	b.n	800306e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_UART_IRQHandler+0x4ea>
 8003032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 f9bd 	bl	80033be <UART_Transmit_IT>
    return;
 8003044:	e014      	b.n	8003070 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00e      	beq.n	8003070 <HAL_UART_IRQHandler+0x514>
 8003052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9fd 	bl	800345e <UART_EndTransmit_IT>
    return;
 8003064:	e004      	b.n	8003070 <HAL_UART_IRQHandler+0x514>
    return;
 8003066:	bf00      	nop
 8003068:	e002      	b.n	8003070 <HAL_UART_IRQHandler+0x514>
      return;
 800306a:	bf00      	nop
 800306c:	e000      	b.n	8003070 <HAL_UART_IRQHandler+0x514>
      return;
 800306e:	bf00      	nop
  }
}
 8003070:	37e8      	adds	r7, #232	; 0xe8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop

08003078 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b090      	sub	sp, #64	; 0x40
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030c8:	e050      	b.n	800316c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d0:	d04c      	beq.n	800316c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030d8:	f7fe fa00 	bl	80014dc <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d241      	bcs.n	800316c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	e853 3f00 	ldrex	r3, [r3]
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003108:	637a      	str	r2, [r7, #52]	; 0x34
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800310e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003110:	e841 2300 	strex	r3, r2, [r1]
 8003114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1e5      	bne.n	80030e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3314      	adds	r3, #20
 8003122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	e853 3f00 	ldrex	r3, [r3]
 800312a:	613b      	str	r3, [r7, #16]
   return(result);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	63bb      	str	r3, [r7, #56]	; 0x38
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3314      	adds	r3, #20
 800313a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800313c:	623a      	str	r2, [r7, #32]
 800313e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	69f9      	ldr	r1, [r7, #28]
 8003142:	6a3a      	ldr	r2, [r7, #32]
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	61bb      	str	r3, [r7, #24]
   return(result);
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e5      	bne.n	800311c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e00f      	b.n	800318c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4013      	ands	r3, r2
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	429a      	cmp	r2, r3
 8003188:	d09f      	beq.n	80030ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3740      	adds	r7, #64	; 0x40
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	4613      	mov	r3, r2
 80031a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	88fa      	ldrh	r2, [r7, #6]
 80031ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	88fa      	ldrh	r2, [r7, #6]
 80031b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2222      	movs	r2, #34	; 0x22
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0220 	orr.w	r2, r2, #32
 8003200:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003210:	b480      	push	{r7}
 8003212:	b095      	sub	sp, #84	; 0x54
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800322e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003238:	643a      	str	r2, [r7, #64]	; 0x40
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800323e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e5      	bne.n	8003218 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	3314      	adds	r3, #20
 8003252:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	e853 3f00 	ldrex	r3, [r3]
 800325a:	61fb      	str	r3, [r7, #28]
   return(result);
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f023 0301 	bic.w	r3, r3, #1
 8003262:	64bb      	str	r3, [r7, #72]	; 0x48
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3314      	adds	r3, #20
 800326a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800326c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003274:	e841 2300 	strex	r3, r2, [r1]
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e5      	bne.n	800324c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	2b01      	cmp	r3, #1
 8003286:	d119      	bne.n	80032bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	60bb      	str	r3, [r7, #8]
   return(result);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f023 0310 	bic.w	r3, r3, #16
 800329e:	647b      	str	r3, [r7, #68]	; 0x44
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	330c      	adds	r3, #12
 80032a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032a8:	61ba      	str	r2, [r7, #24]
 80032aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	6979      	ldr	r1, [r7, #20]
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	e841 2300 	strex	r3, r2, [r1]
 80032b4:	613b      	str	r3, [r7, #16]
   return(result);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e5      	bne.n	8003288 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032ca:	bf00      	nop
 80032cc:	3754      	adds	r7, #84	; 0x54
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff fec1 	bl	8003078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003310:	2200      	movs	r2, #0
 8003312:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003322:	2b00      	cmp	r3, #0
 8003324:	d117      	bne.n	8003356 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f7ff fe9c 	bl	800308c <HAL_UART_AbortCpltCallback>
 8003354:	e000      	b.n	8003358 <UART_DMATxAbortCallback+0x5a>
      return;
 8003356:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	2200      	movs	r2, #0
 8003372:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	2b00      	cmp	r3, #0
 800337a:	d004      	beq.n	8003386 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003382:	2b00      	cmp	r3, #0
 8003384:	d117      	bne.n	80033b6 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f7ff fe6c 	bl	800308c <HAL_UART_AbortCpltCallback>
 80033b4:	e000      	b.n	80033b8 <UART_DMARxAbortCallback+0x5a>
      return;
 80033b6:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b21      	cmp	r3, #33	; 0x21
 80033d0:	d13e      	bne.n	8003450 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033da:	d114      	bne.n	8003406 <UART_Transmit_IT+0x48>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d110      	bne.n	8003406 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	1c9a      	adds	r2, r3, #2
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	621a      	str	r2, [r3, #32]
 8003404:	e008      	b.n	8003418 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	1c59      	adds	r1, r3, #1
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6211      	str	r1, [r2, #32]
 8003410:	781a      	ldrb	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29b      	uxth	r3, r3
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4619      	mov	r1, r3
 8003426:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10f      	bne.n	800344c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68da      	ldr	r2, [r3, #12]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800343a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800344a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	e000      	b.n	8003452 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003450:	2302      	movs	r3, #2
  }
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003474:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd fdca 	bl	8001018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b08c      	sub	sp, #48	; 0x30
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b22      	cmp	r3, #34	; 0x22
 80034a0:	f040 80ab 	bne.w	80035fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ac:	d117      	bne.n	80034de <UART_Receive_IT+0x50>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d113      	bne.n	80034de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
 80034dc:	e026      	b.n	800352c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	d007      	beq.n	8003502 <UART_Receive_IT+0x74>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10a      	bne.n	8003510 <UART_Receive_IT+0x82>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e008      	b.n	8003522 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800351c:	b2da      	uxtb	r2, r3
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4619      	mov	r1, r3
 800353a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800353c:	2b00      	cmp	r3, #0
 800353e:	d15a      	bne.n	80035f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0220 	bic.w	r2, r2, #32
 800354e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800355e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0201 	bic.w	r2, r2, #1
 800356e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	2b01      	cmp	r3, #1
 800357e:	d135      	bne.n	80035ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	e853 3f00 	ldrex	r3, [r3]
 8003594:	613b      	str	r3, [r7, #16]
   return(result);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f023 0310 	bic.w	r3, r3, #16
 800359c:	627b      	str	r3, [r7, #36]	; 0x24
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	330c      	adds	r3, #12
 80035a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a6:	623a      	str	r2, [r7, #32]
 80035a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035aa:	69f9      	ldr	r1, [r7, #28]
 80035ac:	6a3a      	ldr	r2, [r7, #32]
 80035ae:	e841 2300 	strex	r3, r2, [r1]
 80035b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1e5      	bne.n	8003586 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d10a      	bne.n	80035de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035e2:	4619      	mov	r1, r3
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff fd5b 	bl	80030a0 <HAL_UARTEx_RxEventCallback>
 80035ea:	e002      	b.n	80035f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7fd fcdf 	bl	8000fb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e002      	b.n	80035fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	e000      	b.n	80035fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3730      	adds	r7, #48	; 0x30
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003608:	b0c0      	sub	sp, #256	; 0x100
 800360a:	af00      	add	r7, sp, #0
 800360c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	68d9      	ldr	r1, [r3, #12]
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	ea40 0301 	orr.w	r3, r0, r1
 800362c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	431a      	orrs	r2, r3
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	431a      	orrs	r2, r3
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800365c:	f021 010c 	bic.w	r1, r1, #12
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800366a:	430b      	orrs	r3, r1
 800366c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367e:	6999      	ldr	r1, [r3, #24]
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	ea40 0301 	orr.w	r3, r0, r1
 800368a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b8f      	ldr	r3, [pc, #572]	; (80038d0 <UART_SetConfig+0x2cc>)
 8003694:	429a      	cmp	r2, r3
 8003696:	d005      	beq.n	80036a4 <UART_SetConfig+0xa0>
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b8d      	ldr	r3, [pc, #564]	; (80038d4 <UART_SetConfig+0x2d0>)
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d104      	bne.n	80036ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036a4:	f7fe ff3c 	bl	8002520 <HAL_RCC_GetPCLK2Freq>
 80036a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036ac:	e003      	b.n	80036b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ae:	f7fe ff23 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 80036b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c0:	f040 810c 	bne.w	80038dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c8:	2200      	movs	r2, #0
 80036ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036d6:	4622      	mov	r2, r4
 80036d8:	462b      	mov	r3, r5
 80036da:	1891      	adds	r1, r2, r2
 80036dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80036de:	415b      	adcs	r3, r3
 80036e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036e6:	4621      	mov	r1, r4
 80036e8:	eb12 0801 	adds.w	r8, r2, r1
 80036ec:	4629      	mov	r1, r5
 80036ee:	eb43 0901 	adc.w	r9, r3, r1
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003706:	4690      	mov	r8, r2
 8003708:	4699      	mov	r9, r3
 800370a:	4623      	mov	r3, r4
 800370c:	eb18 0303 	adds.w	r3, r8, r3
 8003710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003714:	462b      	mov	r3, r5
 8003716:	eb49 0303 	adc.w	r3, r9, r3
 800371a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800372a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800372e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003732:	460b      	mov	r3, r1
 8003734:	18db      	adds	r3, r3, r3
 8003736:	653b      	str	r3, [r7, #80]	; 0x50
 8003738:	4613      	mov	r3, r2
 800373a:	eb42 0303 	adc.w	r3, r2, r3
 800373e:	657b      	str	r3, [r7, #84]	; 0x54
 8003740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003748:	f7fc fdba 	bl	80002c0 <__aeabi_uldivmod>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4b61      	ldr	r3, [pc, #388]	; (80038d8 <UART_SetConfig+0x2d4>)
 8003752:	fba3 2302 	umull	r2, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	011c      	lsls	r4, r3, #4
 800375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375e:	2200      	movs	r2, #0
 8003760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800376c:	4642      	mov	r2, r8
 800376e:	464b      	mov	r3, r9
 8003770:	1891      	adds	r1, r2, r2
 8003772:	64b9      	str	r1, [r7, #72]	; 0x48
 8003774:	415b      	adcs	r3, r3
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800377c:	4641      	mov	r1, r8
 800377e:	eb12 0a01 	adds.w	sl, r2, r1
 8003782:	4649      	mov	r1, r9
 8003784:	eb43 0b01 	adc.w	fp, r3, r1
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800379c:	4692      	mov	sl, r2
 800379e:	469b      	mov	fp, r3
 80037a0:	4643      	mov	r3, r8
 80037a2:	eb1a 0303 	adds.w	r3, sl, r3
 80037a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037aa:	464b      	mov	r3, r9
 80037ac:	eb4b 0303 	adc.w	r3, fp, r3
 80037b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037c8:	460b      	mov	r3, r1
 80037ca:	18db      	adds	r3, r3, r3
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40
 80037ce:	4613      	mov	r3, r2
 80037d0:	eb42 0303 	adc.w	r3, r2, r3
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
 80037d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037de:	f7fc fd6f 	bl	80002c0 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <UART_SetConfig+0x2d4>)
 80037ea:	fba3 2301 	umull	r2, r3, r3, r1
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2264      	movs	r2, #100	; 0x64
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	1acb      	subs	r3, r1, r3
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037fe:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <UART_SetConfig+0x2d4>)
 8003800:	fba3 2302 	umull	r2, r3, r3, r2
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800380c:	441c      	add	r4, r3
 800380e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003812:	2200      	movs	r2, #0
 8003814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800381c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003820:	4642      	mov	r2, r8
 8003822:	464b      	mov	r3, r9
 8003824:	1891      	adds	r1, r2, r2
 8003826:	63b9      	str	r1, [r7, #56]	; 0x38
 8003828:	415b      	adcs	r3, r3
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003830:	4641      	mov	r1, r8
 8003832:	1851      	adds	r1, r2, r1
 8003834:	6339      	str	r1, [r7, #48]	; 0x30
 8003836:	4649      	mov	r1, r9
 8003838:	414b      	adcs	r3, r1
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003848:	4659      	mov	r1, fp
 800384a:	00cb      	lsls	r3, r1, #3
 800384c:	4651      	mov	r1, sl
 800384e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003852:	4651      	mov	r1, sl
 8003854:	00ca      	lsls	r2, r1, #3
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	4603      	mov	r3, r0
 800385c:	4642      	mov	r2, r8
 800385e:	189b      	adds	r3, r3, r2
 8003860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003864:	464b      	mov	r3, r9
 8003866:	460a      	mov	r2, r1
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800387c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003884:	460b      	mov	r3, r1
 8003886:	18db      	adds	r3, r3, r3
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
 800388a:	4613      	mov	r3, r2
 800388c:	eb42 0303 	adc.w	r3, r2, r3
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800389a:	f7fc fd11 	bl	80002c0 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <UART_SetConfig+0x2d4>)
 80038a4:	fba3 1302 	umull	r1, r3, r3, r2
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	2164      	movs	r1, #100	; 0x64
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	3332      	adds	r3, #50	; 0x32
 80038b6:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <UART_SetConfig+0x2d4>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	f003 0207 	and.w	r2, r3, #7
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4422      	add	r2, r4
 80038ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038cc:	e105      	b.n	8003ada <UART_SetConfig+0x4d6>
 80038ce:	bf00      	nop
 80038d0:	40011000 	.word	0x40011000
 80038d4:	40011400 	.word	0x40011400
 80038d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038ee:	4642      	mov	r2, r8
 80038f0:	464b      	mov	r3, r9
 80038f2:	1891      	adds	r1, r2, r2
 80038f4:	6239      	str	r1, [r7, #32]
 80038f6:	415b      	adcs	r3, r3
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038fe:	4641      	mov	r1, r8
 8003900:	1854      	adds	r4, r2, r1
 8003902:	4649      	mov	r1, r9
 8003904:	eb43 0501 	adc.w	r5, r3, r1
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	00eb      	lsls	r3, r5, #3
 8003912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003916:	00e2      	lsls	r2, r4, #3
 8003918:	4614      	mov	r4, r2
 800391a:	461d      	mov	r5, r3
 800391c:	4643      	mov	r3, r8
 800391e:	18e3      	adds	r3, r4, r3
 8003920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003924:	464b      	mov	r3, r9
 8003926:	eb45 0303 	adc.w	r3, r5, r3
 800392a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800393a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800394a:	4629      	mov	r1, r5
 800394c:	008b      	lsls	r3, r1, #2
 800394e:	4621      	mov	r1, r4
 8003950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003954:	4621      	mov	r1, r4
 8003956:	008a      	lsls	r2, r1, #2
 8003958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800395c:	f7fc fcb0 	bl	80002c0 <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4b60      	ldr	r3, [pc, #384]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003966:	fba3 2302 	umull	r2, r3, r3, r2
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	011c      	lsls	r4, r3, #4
 800396e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800397c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003980:	4642      	mov	r2, r8
 8003982:	464b      	mov	r3, r9
 8003984:	1891      	adds	r1, r2, r2
 8003986:	61b9      	str	r1, [r7, #24]
 8003988:	415b      	adcs	r3, r3
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003990:	4641      	mov	r1, r8
 8003992:	1851      	adds	r1, r2, r1
 8003994:	6139      	str	r1, [r7, #16]
 8003996:	4649      	mov	r1, r9
 8003998:	414b      	adcs	r3, r1
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039a8:	4659      	mov	r1, fp
 80039aa:	00cb      	lsls	r3, r1, #3
 80039ac:	4651      	mov	r1, sl
 80039ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b2:	4651      	mov	r1, sl
 80039b4:	00ca      	lsls	r2, r1, #3
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	4642      	mov	r2, r8
 80039be:	189b      	adds	r3, r3, r2
 80039c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039c4:	464b      	mov	r3, r9
 80039c6:	460a      	mov	r2, r1
 80039c8:	eb42 0303 	adc.w	r3, r2, r3
 80039cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80039da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039e8:	4649      	mov	r1, r9
 80039ea:	008b      	lsls	r3, r1, #2
 80039ec:	4641      	mov	r1, r8
 80039ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f2:	4641      	mov	r1, r8
 80039f4:	008a      	lsls	r2, r1, #2
 80039f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039fa:	f7fc fc61 	bl	80002c0 <__aeabi_uldivmod>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4b39      	ldr	r3, [pc, #228]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003a04:	fba3 1302 	umull	r1, r3, r3, r2
 8003a08:	095b      	lsrs	r3, r3, #5
 8003a0a:	2164      	movs	r1, #100	; 0x64
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	3332      	adds	r3, #50	; 0x32
 8003a16:	4a34      	ldr	r2, [pc, #208]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a22:	441c      	add	r4, r3
 8003a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a28:	2200      	movs	r2, #0
 8003a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8003a2c:	677a      	str	r2, [r7, #116]	; 0x74
 8003a2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a32:	4642      	mov	r2, r8
 8003a34:	464b      	mov	r3, r9
 8003a36:	1891      	adds	r1, r2, r2
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	415b      	adcs	r3, r3
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a42:	4641      	mov	r1, r8
 8003a44:	1851      	adds	r1, r2, r1
 8003a46:	6039      	str	r1, [r7, #0]
 8003a48:	4649      	mov	r1, r9
 8003a4a:	414b      	adcs	r3, r1
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a5a:	4659      	mov	r1, fp
 8003a5c:	00cb      	lsls	r3, r1, #3
 8003a5e:	4651      	mov	r1, sl
 8003a60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a64:	4651      	mov	r1, sl
 8003a66:	00ca      	lsls	r2, r1, #3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	4642      	mov	r2, r8
 8003a70:	189b      	adds	r3, r3, r2
 8003a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a74:	464b      	mov	r3, r9
 8003a76:	460a      	mov	r2, r1
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	663b      	str	r3, [r7, #96]	; 0x60
 8003a88:	667a      	str	r2, [r7, #100]	; 0x64
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a96:	4649      	mov	r1, r9
 8003a98:	008b      	lsls	r3, r1, #2
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa0:	4641      	mov	r1, r8
 8003aa2:	008a      	lsls	r2, r1, #2
 8003aa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003aa8:	f7fc fc0a 	bl	80002c0 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	2164      	movs	r1, #100	; 0x64
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	3332      	adds	r3, #50	; 0x32
 8003ac4:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4422      	add	r2, r4
 8003ad8:	609a      	str	r2, [r3, #8]
}
 8003ada:	bf00      	nop
 8003adc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae6:	bf00      	nop
 8003ae8:	51eb851f 	.word	0x51eb851f

08003aec <atoi>:
 8003aec:	220a      	movs	r2, #10
 8003aee:	2100      	movs	r1, #0
 8003af0:	f000 ba40 	b.w	8003f74 <strtol>

08003af4 <__errno>:
 8003af4:	4b01      	ldr	r3, [pc, #4]	; (8003afc <__errno+0x8>)
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000038 	.word	0x20000038

08003b00 <__libc_init_array>:
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	4d0d      	ldr	r5, [pc, #52]	; (8003b38 <__libc_init_array+0x38>)
 8003b04:	4c0d      	ldr	r4, [pc, #52]	; (8003b3c <__libc_init_array+0x3c>)
 8003b06:	1b64      	subs	r4, r4, r5
 8003b08:	10a4      	asrs	r4, r4, #2
 8003b0a:	2600      	movs	r6, #0
 8003b0c:	42a6      	cmp	r6, r4
 8003b0e:	d109      	bne.n	8003b24 <__libc_init_array+0x24>
 8003b10:	4d0b      	ldr	r5, [pc, #44]	; (8003b40 <__libc_init_array+0x40>)
 8003b12:	4c0c      	ldr	r4, [pc, #48]	; (8003b44 <__libc_init_array+0x44>)
 8003b14:	f001 faf6 	bl	8005104 <_init>
 8003b18:	1b64      	subs	r4, r4, r5
 8003b1a:	10a4      	asrs	r4, r4, #2
 8003b1c:	2600      	movs	r6, #0
 8003b1e:	42a6      	cmp	r6, r4
 8003b20:	d105      	bne.n	8003b2e <__libc_init_array+0x2e>
 8003b22:	bd70      	pop	{r4, r5, r6, pc}
 8003b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b28:	4798      	blx	r3
 8003b2a:	3601      	adds	r6, #1
 8003b2c:	e7ee      	b.n	8003b0c <__libc_init_array+0xc>
 8003b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b32:	4798      	blx	r3
 8003b34:	3601      	adds	r6, #1
 8003b36:	e7f2      	b.n	8003b1e <__libc_init_array+0x1e>
 8003b38:	080054ec 	.word	0x080054ec
 8003b3c:	080054ec 	.word	0x080054ec
 8003b40:	080054ec 	.word	0x080054ec
 8003b44:	080054f0 	.word	0x080054f0

08003b48 <malloc>:
 8003b48:	4b02      	ldr	r3, [pc, #8]	; (8003b54 <malloc+0xc>)
 8003b4a:	4601      	mov	r1, r0
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	f000 b877 	b.w	8003c40 <_malloc_r>
 8003b52:	bf00      	nop
 8003b54:	20000038 	.word	0x20000038

08003b58 <memset>:
 8003b58:	4402      	add	r2, r0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d100      	bne.n	8003b62 <memset+0xa>
 8003b60:	4770      	bx	lr
 8003b62:	f803 1b01 	strb.w	r1, [r3], #1
 8003b66:	e7f9      	b.n	8003b5c <memset+0x4>

08003b68 <_free_r>:
 8003b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b6a:	2900      	cmp	r1, #0
 8003b6c:	d044      	beq.n	8003bf8 <_free_r+0x90>
 8003b6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b72:	9001      	str	r0, [sp, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f1a1 0404 	sub.w	r4, r1, #4
 8003b7a:	bfb8      	it	lt
 8003b7c:	18e4      	addlt	r4, r4, r3
 8003b7e:	f000 fa33 	bl	8003fe8 <__malloc_lock>
 8003b82:	4a1e      	ldr	r2, [pc, #120]	; (8003bfc <_free_r+0x94>)
 8003b84:	9801      	ldr	r0, [sp, #4]
 8003b86:	6813      	ldr	r3, [r2, #0]
 8003b88:	b933      	cbnz	r3, 8003b98 <_free_r+0x30>
 8003b8a:	6063      	str	r3, [r4, #4]
 8003b8c:	6014      	str	r4, [r2, #0]
 8003b8e:	b003      	add	sp, #12
 8003b90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b94:	f000 ba2e 	b.w	8003ff4 <__malloc_unlock>
 8003b98:	42a3      	cmp	r3, r4
 8003b9a:	d908      	bls.n	8003bae <_free_r+0x46>
 8003b9c:	6825      	ldr	r5, [r4, #0]
 8003b9e:	1961      	adds	r1, r4, r5
 8003ba0:	428b      	cmp	r3, r1
 8003ba2:	bf01      	itttt	eq
 8003ba4:	6819      	ldreq	r1, [r3, #0]
 8003ba6:	685b      	ldreq	r3, [r3, #4]
 8003ba8:	1949      	addeq	r1, r1, r5
 8003baa:	6021      	streq	r1, [r4, #0]
 8003bac:	e7ed      	b.n	8003b8a <_free_r+0x22>
 8003bae:	461a      	mov	r2, r3
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	b10b      	cbz	r3, 8003bb8 <_free_r+0x50>
 8003bb4:	42a3      	cmp	r3, r4
 8003bb6:	d9fa      	bls.n	8003bae <_free_r+0x46>
 8003bb8:	6811      	ldr	r1, [r2, #0]
 8003bba:	1855      	adds	r5, r2, r1
 8003bbc:	42a5      	cmp	r5, r4
 8003bbe:	d10b      	bne.n	8003bd8 <_free_r+0x70>
 8003bc0:	6824      	ldr	r4, [r4, #0]
 8003bc2:	4421      	add	r1, r4
 8003bc4:	1854      	adds	r4, r2, r1
 8003bc6:	42a3      	cmp	r3, r4
 8003bc8:	6011      	str	r1, [r2, #0]
 8003bca:	d1e0      	bne.n	8003b8e <_free_r+0x26>
 8003bcc:	681c      	ldr	r4, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	6053      	str	r3, [r2, #4]
 8003bd2:	4421      	add	r1, r4
 8003bd4:	6011      	str	r1, [r2, #0]
 8003bd6:	e7da      	b.n	8003b8e <_free_r+0x26>
 8003bd8:	d902      	bls.n	8003be0 <_free_r+0x78>
 8003bda:	230c      	movs	r3, #12
 8003bdc:	6003      	str	r3, [r0, #0]
 8003bde:	e7d6      	b.n	8003b8e <_free_r+0x26>
 8003be0:	6825      	ldr	r5, [r4, #0]
 8003be2:	1961      	adds	r1, r4, r5
 8003be4:	428b      	cmp	r3, r1
 8003be6:	bf04      	itt	eq
 8003be8:	6819      	ldreq	r1, [r3, #0]
 8003bea:	685b      	ldreq	r3, [r3, #4]
 8003bec:	6063      	str	r3, [r4, #4]
 8003bee:	bf04      	itt	eq
 8003bf0:	1949      	addeq	r1, r1, r5
 8003bf2:	6021      	streq	r1, [r4, #0]
 8003bf4:	6054      	str	r4, [r2, #4]
 8003bf6:	e7ca      	b.n	8003b8e <_free_r+0x26>
 8003bf8:	b003      	add	sp, #12
 8003bfa:	bd30      	pop	{r4, r5, pc}
 8003bfc:	200001e0 	.word	0x200001e0

08003c00 <sbrk_aligned>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	4e0e      	ldr	r6, [pc, #56]	; (8003c3c <sbrk_aligned+0x3c>)
 8003c04:	460c      	mov	r4, r1
 8003c06:	6831      	ldr	r1, [r6, #0]
 8003c08:	4605      	mov	r5, r0
 8003c0a:	b911      	cbnz	r1, 8003c12 <sbrk_aligned+0x12>
 8003c0c:	f000 f88c 	bl	8003d28 <_sbrk_r>
 8003c10:	6030      	str	r0, [r6, #0]
 8003c12:	4621      	mov	r1, r4
 8003c14:	4628      	mov	r0, r5
 8003c16:	f000 f887 	bl	8003d28 <_sbrk_r>
 8003c1a:	1c43      	adds	r3, r0, #1
 8003c1c:	d00a      	beq.n	8003c34 <sbrk_aligned+0x34>
 8003c1e:	1cc4      	adds	r4, r0, #3
 8003c20:	f024 0403 	bic.w	r4, r4, #3
 8003c24:	42a0      	cmp	r0, r4
 8003c26:	d007      	beq.n	8003c38 <sbrk_aligned+0x38>
 8003c28:	1a21      	subs	r1, r4, r0
 8003c2a:	4628      	mov	r0, r5
 8003c2c:	f000 f87c 	bl	8003d28 <_sbrk_r>
 8003c30:	3001      	adds	r0, #1
 8003c32:	d101      	bne.n	8003c38 <sbrk_aligned+0x38>
 8003c34:	f04f 34ff 	mov.w	r4, #4294967295
 8003c38:	4620      	mov	r0, r4
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	200001e4 	.word	0x200001e4

08003c40 <_malloc_r>:
 8003c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c44:	1ccd      	adds	r5, r1, #3
 8003c46:	f025 0503 	bic.w	r5, r5, #3
 8003c4a:	3508      	adds	r5, #8
 8003c4c:	2d0c      	cmp	r5, #12
 8003c4e:	bf38      	it	cc
 8003c50:	250c      	movcc	r5, #12
 8003c52:	2d00      	cmp	r5, #0
 8003c54:	4607      	mov	r7, r0
 8003c56:	db01      	blt.n	8003c5c <_malloc_r+0x1c>
 8003c58:	42a9      	cmp	r1, r5
 8003c5a:	d905      	bls.n	8003c68 <_malloc_r+0x28>
 8003c5c:	230c      	movs	r3, #12
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	2600      	movs	r6, #0
 8003c62:	4630      	mov	r0, r6
 8003c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c68:	4e2e      	ldr	r6, [pc, #184]	; (8003d24 <_malloc_r+0xe4>)
 8003c6a:	f000 f9bd 	bl	8003fe8 <__malloc_lock>
 8003c6e:	6833      	ldr	r3, [r6, #0]
 8003c70:	461c      	mov	r4, r3
 8003c72:	bb34      	cbnz	r4, 8003cc2 <_malloc_r+0x82>
 8003c74:	4629      	mov	r1, r5
 8003c76:	4638      	mov	r0, r7
 8003c78:	f7ff ffc2 	bl	8003c00 <sbrk_aligned>
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	4604      	mov	r4, r0
 8003c80:	d14d      	bne.n	8003d1e <_malloc_r+0xde>
 8003c82:	6834      	ldr	r4, [r6, #0]
 8003c84:	4626      	mov	r6, r4
 8003c86:	2e00      	cmp	r6, #0
 8003c88:	d140      	bne.n	8003d0c <_malloc_r+0xcc>
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	4631      	mov	r1, r6
 8003c8e:	4638      	mov	r0, r7
 8003c90:	eb04 0803 	add.w	r8, r4, r3
 8003c94:	f000 f848 	bl	8003d28 <_sbrk_r>
 8003c98:	4580      	cmp	r8, r0
 8003c9a:	d13a      	bne.n	8003d12 <_malloc_r+0xd2>
 8003c9c:	6821      	ldr	r1, [r4, #0]
 8003c9e:	3503      	adds	r5, #3
 8003ca0:	1a6d      	subs	r5, r5, r1
 8003ca2:	f025 0503 	bic.w	r5, r5, #3
 8003ca6:	3508      	adds	r5, #8
 8003ca8:	2d0c      	cmp	r5, #12
 8003caa:	bf38      	it	cc
 8003cac:	250c      	movcc	r5, #12
 8003cae:	4629      	mov	r1, r5
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	f7ff ffa5 	bl	8003c00 <sbrk_aligned>
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	d02b      	beq.n	8003d12 <_malloc_r+0xd2>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	442b      	add	r3, r5
 8003cbe:	6023      	str	r3, [r4, #0]
 8003cc0:	e00e      	b.n	8003ce0 <_malloc_r+0xa0>
 8003cc2:	6822      	ldr	r2, [r4, #0]
 8003cc4:	1b52      	subs	r2, r2, r5
 8003cc6:	d41e      	bmi.n	8003d06 <_malloc_r+0xc6>
 8003cc8:	2a0b      	cmp	r2, #11
 8003cca:	d916      	bls.n	8003cfa <_malloc_r+0xba>
 8003ccc:	1961      	adds	r1, r4, r5
 8003cce:	42a3      	cmp	r3, r4
 8003cd0:	6025      	str	r5, [r4, #0]
 8003cd2:	bf18      	it	ne
 8003cd4:	6059      	strne	r1, [r3, #4]
 8003cd6:	6863      	ldr	r3, [r4, #4]
 8003cd8:	bf08      	it	eq
 8003cda:	6031      	streq	r1, [r6, #0]
 8003cdc:	5162      	str	r2, [r4, r5]
 8003cde:	604b      	str	r3, [r1, #4]
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	f104 060b 	add.w	r6, r4, #11
 8003ce6:	f000 f985 	bl	8003ff4 <__malloc_unlock>
 8003cea:	f026 0607 	bic.w	r6, r6, #7
 8003cee:	1d23      	adds	r3, r4, #4
 8003cf0:	1af2      	subs	r2, r6, r3
 8003cf2:	d0b6      	beq.n	8003c62 <_malloc_r+0x22>
 8003cf4:	1b9b      	subs	r3, r3, r6
 8003cf6:	50a3      	str	r3, [r4, r2]
 8003cf8:	e7b3      	b.n	8003c62 <_malloc_r+0x22>
 8003cfa:	6862      	ldr	r2, [r4, #4]
 8003cfc:	42a3      	cmp	r3, r4
 8003cfe:	bf0c      	ite	eq
 8003d00:	6032      	streq	r2, [r6, #0]
 8003d02:	605a      	strne	r2, [r3, #4]
 8003d04:	e7ec      	b.n	8003ce0 <_malloc_r+0xa0>
 8003d06:	4623      	mov	r3, r4
 8003d08:	6864      	ldr	r4, [r4, #4]
 8003d0a:	e7b2      	b.n	8003c72 <_malloc_r+0x32>
 8003d0c:	4634      	mov	r4, r6
 8003d0e:	6876      	ldr	r6, [r6, #4]
 8003d10:	e7b9      	b.n	8003c86 <_malloc_r+0x46>
 8003d12:	230c      	movs	r3, #12
 8003d14:	603b      	str	r3, [r7, #0]
 8003d16:	4638      	mov	r0, r7
 8003d18:	f000 f96c 	bl	8003ff4 <__malloc_unlock>
 8003d1c:	e7a1      	b.n	8003c62 <_malloc_r+0x22>
 8003d1e:	6025      	str	r5, [r4, #0]
 8003d20:	e7de      	b.n	8003ce0 <_malloc_r+0xa0>
 8003d22:	bf00      	nop
 8003d24:	200001e0 	.word	0x200001e0

08003d28 <_sbrk_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4d06      	ldr	r5, [pc, #24]	; (8003d44 <_sbrk_r+0x1c>)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	4604      	mov	r4, r0
 8003d30:	4608      	mov	r0, r1
 8003d32:	602b      	str	r3, [r5, #0]
 8003d34:	f7fd fa80 	bl	8001238 <_sbrk>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d102      	bne.n	8003d42 <_sbrk_r+0x1a>
 8003d3c:	682b      	ldr	r3, [r5, #0]
 8003d3e:	b103      	cbz	r3, 8003d42 <_sbrk_r+0x1a>
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	200001e8 	.word	0x200001e8

08003d48 <siprintf>:
 8003d48:	b40e      	push	{r1, r2, r3}
 8003d4a:	b500      	push	{lr}
 8003d4c:	b09c      	sub	sp, #112	; 0x70
 8003d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d50:	9002      	str	r0, [sp, #8]
 8003d52:	9006      	str	r0, [sp, #24]
 8003d54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d58:	4809      	ldr	r0, [pc, #36]	; (8003d80 <siprintf+0x38>)
 8003d5a:	9107      	str	r1, [sp, #28]
 8003d5c:	9104      	str	r1, [sp, #16]
 8003d5e:	4909      	ldr	r1, [pc, #36]	; (8003d84 <siprintf+0x3c>)
 8003d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d64:	9105      	str	r1, [sp, #20]
 8003d66:	6800      	ldr	r0, [r0, #0]
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	a902      	add	r1, sp, #8
 8003d6c:	f000 f9a4 	bl	80040b8 <_svfiprintf_r>
 8003d70:	9b02      	ldr	r3, [sp, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	b01c      	add	sp, #112	; 0x70
 8003d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d7c:	b003      	add	sp, #12
 8003d7e:	4770      	bx	lr
 8003d80:	20000038 	.word	0x20000038
 8003d84:	ffff0208 	.word	0xffff0208

08003d88 <strcat>:
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	7814      	ldrb	r4, [r2, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	3201      	adds	r2, #1
 8003d92:	2c00      	cmp	r4, #0
 8003d94:	d1fa      	bne.n	8003d8c <strcat+0x4>
 8003d96:	3b01      	subs	r3, #1
 8003d98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003da0:	2a00      	cmp	r2, #0
 8003da2:	d1f9      	bne.n	8003d98 <strcat+0x10>
 8003da4:	bd10      	pop	{r4, pc}

08003da6 <strcpy>:
 8003da6:	4603      	mov	r3, r0
 8003da8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dac:	f803 2b01 	strb.w	r2, [r3], #1
 8003db0:	2a00      	cmp	r2, #0
 8003db2:	d1f9      	bne.n	8003da8 <strcpy+0x2>
 8003db4:	4770      	bx	lr
	...

08003db8 <strtok>:
 8003db8:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <strtok+0x5c>)
 8003dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003dbc:	681e      	ldr	r6, [r3, #0]
 8003dbe:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003dc0:	4605      	mov	r5, r0
 8003dc2:	b9fc      	cbnz	r4, 8003e04 <strtok+0x4c>
 8003dc4:	2050      	movs	r0, #80	; 0x50
 8003dc6:	9101      	str	r1, [sp, #4]
 8003dc8:	f7ff febe 	bl	8003b48 <malloc>
 8003dcc:	9901      	ldr	r1, [sp, #4]
 8003dce:	65b0      	str	r0, [r6, #88]	; 0x58
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	b920      	cbnz	r0, 8003dde <strtok+0x26>
 8003dd4:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <strtok+0x60>)
 8003dd6:	4811      	ldr	r0, [pc, #68]	; (8003e1c <strtok+0x64>)
 8003dd8:	2157      	movs	r1, #87	; 0x57
 8003dda:	f000 f8d5 	bl	8003f88 <__assert_func>
 8003dde:	e9c0 4400 	strd	r4, r4, [r0]
 8003de2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003de6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003dea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003dee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003df2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003df6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003dfa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003dfe:	6184      	str	r4, [r0, #24]
 8003e00:	7704      	strb	r4, [r0, #28]
 8003e02:	6244      	str	r4, [r0, #36]	; 0x24
 8003e04:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003e06:	2301      	movs	r3, #1
 8003e08:	4628      	mov	r0, r5
 8003e0a:	b002      	add	sp, #8
 8003e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e10:	f000 b806 	b.w	8003e20 <__strtok_r>
 8003e14:	20000038 	.word	0x20000038
 8003e18:	080052a0 	.word	0x080052a0
 8003e1c:	080052b7 	.word	0x080052b7

08003e20 <__strtok_r>:
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e22:	b908      	cbnz	r0, 8003e28 <__strtok_r+0x8>
 8003e24:	6810      	ldr	r0, [r2, #0]
 8003e26:	b188      	cbz	r0, 8003e4c <__strtok_r+0x2c>
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003e30:	460f      	mov	r7, r1
 8003e32:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003e36:	b91e      	cbnz	r6, 8003e40 <__strtok_r+0x20>
 8003e38:	b965      	cbnz	r5, 8003e54 <__strtok_r+0x34>
 8003e3a:	6015      	str	r5, [r2, #0]
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	e005      	b.n	8003e4c <__strtok_r+0x2c>
 8003e40:	42b5      	cmp	r5, r6
 8003e42:	d1f6      	bne.n	8003e32 <__strtok_r+0x12>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <__strtok_r+0xa>
 8003e48:	6014      	str	r4, [r2, #0]
 8003e4a:	7003      	strb	r3, [r0, #0]
 8003e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e4e:	461c      	mov	r4, r3
 8003e50:	e00c      	b.n	8003e6c <__strtok_r+0x4c>
 8003e52:	b915      	cbnz	r5, 8003e5a <__strtok_r+0x3a>
 8003e54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003e58:	460e      	mov	r6, r1
 8003e5a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003e5e:	42ab      	cmp	r3, r5
 8003e60:	d1f7      	bne.n	8003e52 <__strtok_r+0x32>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f3      	beq.n	8003e4e <__strtok_r+0x2e>
 8003e66:	2300      	movs	r3, #0
 8003e68:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003e6c:	6014      	str	r4, [r2, #0]
 8003e6e:	e7ed      	b.n	8003e4c <__strtok_r+0x2c>

08003e70 <_strtol_l.constprop.0>:
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e76:	d001      	beq.n	8003e7c <_strtol_l.constprop.0+0xc>
 8003e78:	2b24      	cmp	r3, #36	; 0x24
 8003e7a:	d906      	bls.n	8003e8a <_strtol_l.constprop.0+0x1a>
 8003e7c:	f7ff fe3a 	bl	8003af4 <__errno>
 8003e80:	2316      	movs	r3, #22
 8003e82:	6003      	str	r3, [r0, #0]
 8003e84:	2000      	movs	r0, #0
 8003e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003f70 <_strtol_l.constprop.0+0x100>
 8003e8e:	460d      	mov	r5, r1
 8003e90:	462e      	mov	r6, r5
 8003e92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003e96:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003e9a:	f017 0708 	ands.w	r7, r7, #8
 8003e9e:	d1f7      	bne.n	8003e90 <_strtol_l.constprop.0+0x20>
 8003ea0:	2c2d      	cmp	r4, #45	; 0x2d
 8003ea2:	d132      	bne.n	8003f0a <_strtol_l.constprop.0+0x9a>
 8003ea4:	782c      	ldrb	r4, [r5, #0]
 8003ea6:	2701      	movs	r7, #1
 8003ea8:	1cb5      	adds	r5, r6, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d05b      	beq.n	8003f66 <_strtol_l.constprop.0+0xf6>
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d109      	bne.n	8003ec6 <_strtol_l.constprop.0+0x56>
 8003eb2:	2c30      	cmp	r4, #48	; 0x30
 8003eb4:	d107      	bne.n	8003ec6 <_strtol_l.constprop.0+0x56>
 8003eb6:	782c      	ldrb	r4, [r5, #0]
 8003eb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003ebc:	2c58      	cmp	r4, #88	; 0x58
 8003ebe:	d14d      	bne.n	8003f5c <_strtol_l.constprop.0+0xec>
 8003ec0:	786c      	ldrb	r4, [r5, #1]
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	3502      	adds	r5, #2
 8003ec6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003eca:	f108 38ff 	add.w	r8, r8, #4294967295
 8003ece:	f04f 0c00 	mov.w	ip, #0
 8003ed2:	fbb8 f9f3 	udiv	r9, r8, r3
 8003ed6:	4666      	mov	r6, ip
 8003ed8:	fb03 8a19 	mls	sl, r3, r9, r8
 8003edc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003ee0:	f1be 0f09 	cmp.w	lr, #9
 8003ee4:	d816      	bhi.n	8003f14 <_strtol_l.constprop.0+0xa4>
 8003ee6:	4674      	mov	r4, lr
 8003ee8:	42a3      	cmp	r3, r4
 8003eea:	dd24      	ble.n	8003f36 <_strtol_l.constprop.0+0xc6>
 8003eec:	f1bc 0f00 	cmp.w	ip, #0
 8003ef0:	db1e      	blt.n	8003f30 <_strtol_l.constprop.0+0xc0>
 8003ef2:	45b1      	cmp	r9, r6
 8003ef4:	d31c      	bcc.n	8003f30 <_strtol_l.constprop.0+0xc0>
 8003ef6:	d101      	bne.n	8003efc <_strtol_l.constprop.0+0x8c>
 8003ef8:	45a2      	cmp	sl, r4
 8003efa:	db19      	blt.n	8003f30 <_strtol_l.constprop.0+0xc0>
 8003efc:	fb06 4603 	mla	r6, r6, r3, r4
 8003f00:	f04f 0c01 	mov.w	ip, #1
 8003f04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f08:	e7e8      	b.n	8003edc <_strtol_l.constprop.0+0x6c>
 8003f0a:	2c2b      	cmp	r4, #43	; 0x2b
 8003f0c:	bf04      	itt	eq
 8003f0e:	782c      	ldrbeq	r4, [r5, #0]
 8003f10:	1cb5      	addeq	r5, r6, #2
 8003f12:	e7ca      	b.n	8003eaa <_strtol_l.constprop.0+0x3a>
 8003f14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003f18:	f1be 0f19 	cmp.w	lr, #25
 8003f1c:	d801      	bhi.n	8003f22 <_strtol_l.constprop.0+0xb2>
 8003f1e:	3c37      	subs	r4, #55	; 0x37
 8003f20:	e7e2      	b.n	8003ee8 <_strtol_l.constprop.0+0x78>
 8003f22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003f26:	f1be 0f19 	cmp.w	lr, #25
 8003f2a:	d804      	bhi.n	8003f36 <_strtol_l.constprop.0+0xc6>
 8003f2c:	3c57      	subs	r4, #87	; 0x57
 8003f2e:	e7db      	b.n	8003ee8 <_strtol_l.constprop.0+0x78>
 8003f30:	f04f 3cff 	mov.w	ip, #4294967295
 8003f34:	e7e6      	b.n	8003f04 <_strtol_l.constprop.0+0x94>
 8003f36:	f1bc 0f00 	cmp.w	ip, #0
 8003f3a:	da05      	bge.n	8003f48 <_strtol_l.constprop.0+0xd8>
 8003f3c:	2322      	movs	r3, #34	; 0x22
 8003f3e:	6003      	str	r3, [r0, #0]
 8003f40:	4646      	mov	r6, r8
 8003f42:	b942      	cbnz	r2, 8003f56 <_strtol_l.constprop.0+0xe6>
 8003f44:	4630      	mov	r0, r6
 8003f46:	e79e      	b.n	8003e86 <_strtol_l.constprop.0+0x16>
 8003f48:	b107      	cbz	r7, 8003f4c <_strtol_l.constprop.0+0xdc>
 8003f4a:	4276      	negs	r6, r6
 8003f4c:	2a00      	cmp	r2, #0
 8003f4e:	d0f9      	beq.n	8003f44 <_strtol_l.constprop.0+0xd4>
 8003f50:	f1bc 0f00 	cmp.w	ip, #0
 8003f54:	d000      	beq.n	8003f58 <_strtol_l.constprop.0+0xe8>
 8003f56:	1e69      	subs	r1, r5, #1
 8003f58:	6011      	str	r1, [r2, #0]
 8003f5a:	e7f3      	b.n	8003f44 <_strtol_l.constprop.0+0xd4>
 8003f5c:	2430      	movs	r4, #48	; 0x30
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1b1      	bne.n	8003ec6 <_strtol_l.constprop.0+0x56>
 8003f62:	2308      	movs	r3, #8
 8003f64:	e7af      	b.n	8003ec6 <_strtol_l.constprop.0+0x56>
 8003f66:	2c30      	cmp	r4, #48	; 0x30
 8003f68:	d0a5      	beq.n	8003eb6 <_strtol_l.constprop.0+0x46>
 8003f6a:	230a      	movs	r3, #10
 8003f6c:	e7ab      	b.n	8003ec6 <_strtol_l.constprop.0+0x56>
 8003f6e:	bf00      	nop
 8003f70:	08005351 	.word	0x08005351

08003f74 <strtol>:
 8003f74:	4613      	mov	r3, r2
 8003f76:	460a      	mov	r2, r1
 8003f78:	4601      	mov	r1, r0
 8003f7a:	4802      	ldr	r0, [pc, #8]	; (8003f84 <strtol+0x10>)
 8003f7c:	6800      	ldr	r0, [r0, #0]
 8003f7e:	f7ff bf77 	b.w	8003e70 <_strtol_l.constprop.0>
 8003f82:	bf00      	nop
 8003f84:	20000038 	.word	0x20000038

08003f88 <__assert_func>:
 8003f88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f8a:	4614      	mov	r4, r2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <__assert_func+0x2c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4605      	mov	r5, r0
 8003f94:	68d8      	ldr	r0, [r3, #12]
 8003f96:	b14c      	cbz	r4, 8003fac <__assert_func+0x24>
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <__assert_func+0x30>)
 8003f9a:	9100      	str	r1, [sp, #0]
 8003f9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003fa0:	4906      	ldr	r1, [pc, #24]	; (8003fbc <__assert_func+0x34>)
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	f000 f80e 	bl	8003fc4 <fiprintf>
 8003fa8:	f000 fd34 	bl	8004a14 <abort>
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <__assert_func+0x38>)
 8003fae:	461c      	mov	r4, r3
 8003fb0:	e7f3      	b.n	8003f9a <__assert_func+0x12>
 8003fb2:	bf00      	nop
 8003fb4:	20000038 	.word	0x20000038
 8003fb8:	08005314 	.word	0x08005314
 8003fbc:	08005321 	.word	0x08005321
 8003fc0:	0800534f 	.word	0x0800534f

08003fc4 <fiprintf>:
 8003fc4:	b40e      	push	{r1, r2, r3}
 8003fc6:	b503      	push	{r0, r1, lr}
 8003fc8:	4601      	mov	r1, r0
 8003fca:	ab03      	add	r3, sp, #12
 8003fcc:	4805      	ldr	r0, [pc, #20]	; (8003fe4 <fiprintf+0x20>)
 8003fce:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fd2:	6800      	ldr	r0, [r0, #0]
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	f000 f999 	bl	800430c <_vfiprintf_r>
 8003fda:	b002      	add	sp, #8
 8003fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fe0:	b003      	add	sp, #12
 8003fe2:	4770      	bx	lr
 8003fe4:	20000038 	.word	0x20000038

08003fe8 <__malloc_lock>:
 8003fe8:	4801      	ldr	r0, [pc, #4]	; (8003ff0 <__malloc_lock+0x8>)
 8003fea:	f000 bed3 	b.w	8004d94 <__retarget_lock_acquire_recursive>
 8003fee:	bf00      	nop
 8003ff0:	200001ec 	.word	0x200001ec

08003ff4 <__malloc_unlock>:
 8003ff4:	4801      	ldr	r0, [pc, #4]	; (8003ffc <__malloc_unlock+0x8>)
 8003ff6:	f000 bece 	b.w	8004d96 <__retarget_lock_release_recursive>
 8003ffa:	bf00      	nop
 8003ffc:	200001ec 	.word	0x200001ec

08004000 <__ssputs_r>:
 8004000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004004:	688e      	ldr	r6, [r1, #8]
 8004006:	429e      	cmp	r6, r3
 8004008:	4682      	mov	sl, r0
 800400a:	460c      	mov	r4, r1
 800400c:	4690      	mov	r8, r2
 800400e:	461f      	mov	r7, r3
 8004010:	d838      	bhi.n	8004084 <__ssputs_r+0x84>
 8004012:	898a      	ldrh	r2, [r1, #12]
 8004014:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004018:	d032      	beq.n	8004080 <__ssputs_r+0x80>
 800401a:	6825      	ldr	r5, [r4, #0]
 800401c:	6909      	ldr	r1, [r1, #16]
 800401e:	eba5 0901 	sub.w	r9, r5, r1
 8004022:	6965      	ldr	r5, [r4, #20]
 8004024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004028:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800402c:	3301      	adds	r3, #1
 800402e:	444b      	add	r3, r9
 8004030:	106d      	asrs	r5, r5, #1
 8004032:	429d      	cmp	r5, r3
 8004034:	bf38      	it	cc
 8004036:	461d      	movcc	r5, r3
 8004038:	0553      	lsls	r3, r2, #21
 800403a:	d531      	bpl.n	80040a0 <__ssputs_r+0xa0>
 800403c:	4629      	mov	r1, r5
 800403e:	f7ff fdff 	bl	8003c40 <_malloc_r>
 8004042:	4606      	mov	r6, r0
 8004044:	b950      	cbnz	r0, 800405c <__ssputs_r+0x5c>
 8004046:	230c      	movs	r3, #12
 8004048:	f8ca 3000 	str.w	r3, [sl]
 800404c:	89a3      	ldrh	r3, [r4, #12]
 800404e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	f04f 30ff 	mov.w	r0, #4294967295
 8004058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800405c:	6921      	ldr	r1, [r4, #16]
 800405e:	464a      	mov	r2, r9
 8004060:	f000 ff00 	bl	8004e64 <memcpy>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800406a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800406e:	81a3      	strh	r3, [r4, #12]
 8004070:	6126      	str	r6, [r4, #16]
 8004072:	6165      	str	r5, [r4, #20]
 8004074:	444e      	add	r6, r9
 8004076:	eba5 0509 	sub.w	r5, r5, r9
 800407a:	6026      	str	r6, [r4, #0]
 800407c:	60a5      	str	r5, [r4, #8]
 800407e:	463e      	mov	r6, r7
 8004080:	42be      	cmp	r6, r7
 8004082:	d900      	bls.n	8004086 <__ssputs_r+0x86>
 8004084:	463e      	mov	r6, r7
 8004086:	6820      	ldr	r0, [r4, #0]
 8004088:	4632      	mov	r2, r6
 800408a:	4641      	mov	r1, r8
 800408c:	f000 fef8 	bl	8004e80 <memmove>
 8004090:	68a3      	ldr	r3, [r4, #8]
 8004092:	1b9b      	subs	r3, r3, r6
 8004094:	60a3      	str	r3, [r4, #8]
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	4433      	add	r3, r6
 800409a:	6023      	str	r3, [r4, #0]
 800409c:	2000      	movs	r0, #0
 800409e:	e7db      	b.n	8004058 <__ssputs_r+0x58>
 80040a0:	462a      	mov	r2, r5
 80040a2:	f000 ff07 	bl	8004eb4 <_realloc_r>
 80040a6:	4606      	mov	r6, r0
 80040a8:	2800      	cmp	r0, #0
 80040aa:	d1e1      	bne.n	8004070 <__ssputs_r+0x70>
 80040ac:	6921      	ldr	r1, [r4, #16]
 80040ae:	4650      	mov	r0, sl
 80040b0:	f7ff fd5a 	bl	8003b68 <_free_r>
 80040b4:	e7c7      	b.n	8004046 <__ssputs_r+0x46>
	...

080040b8 <_svfiprintf_r>:
 80040b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040bc:	4698      	mov	r8, r3
 80040be:	898b      	ldrh	r3, [r1, #12]
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	b09d      	sub	sp, #116	; 0x74
 80040c4:	4607      	mov	r7, r0
 80040c6:	460d      	mov	r5, r1
 80040c8:	4614      	mov	r4, r2
 80040ca:	d50e      	bpl.n	80040ea <_svfiprintf_r+0x32>
 80040cc:	690b      	ldr	r3, [r1, #16]
 80040ce:	b963      	cbnz	r3, 80040ea <_svfiprintf_r+0x32>
 80040d0:	2140      	movs	r1, #64	; 0x40
 80040d2:	f7ff fdb5 	bl	8003c40 <_malloc_r>
 80040d6:	6028      	str	r0, [r5, #0]
 80040d8:	6128      	str	r0, [r5, #16]
 80040da:	b920      	cbnz	r0, 80040e6 <_svfiprintf_r+0x2e>
 80040dc:	230c      	movs	r3, #12
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	f04f 30ff 	mov.w	r0, #4294967295
 80040e4:	e0d1      	b.n	800428a <_svfiprintf_r+0x1d2>
 80040e6:	2340      	movs	r3, #64	; 0x40
 80040e8:	616b      	str	r3, [r5, #20]
 80040ea:	2300      	movs	r3, #0
 80040ec:	9309      	str	r3, [sp, #36]	; 0x24
 80040ee:	2320      	movs	r3, #32
 80040f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80040f8:	2330      	movs	r3, #48	; 0x30
 80040fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80042a4 <_svfiprintf_r+0x1ec>
 80040fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004102:	f04f 0901 	mov.w	r9, #1
 8004106:	4623      	mov	r3, r4
 8004108:	469a      	mov	sl, r3
 800410a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800410e:	b10a      	cbz	r2, 8004114 <_svfiprintf_r+0x5c>
 8004110:	2a25      	cmp	r2, #37	; 0x25
 8004112:	d1f9      	bne.n	8004108 <_svfiprintf_r+0x50>
 8004114:	ebba 0b04 	subs.w	fp, sl, r4
 8004118:	d00b      	beq.n	8004132 <_svfiprintf_r+0x7a>
 800411a:	465b      	mov	r3, fp
 800411c:	4622      	mov	r2, r4
 800411e:	4629      	mov	r1, r5
 8004120:	4638      	mov	r0, r7
 8004122:	f7ff ff6d 	bl	8004000 <__ssputs_r>
 8004126:	3001      	adds	r0, #1
 8004128:	f000 80aa 	beq.w	8004280 <_svfiprintf_r+0x1c8>
 800412c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800412e:	445a      	add	r2, fp
 8004130:	9209      	str	r2, [sp, #36]	; 0x24
 8004132:	f89a 3000 	ldrb.w	r3, [sl]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80a2 	beq.w	8004280 <_svfiprintf_r+0x1c8>
 800413c:	2300      	movs	r3, #0
 800413e:	f04f 32ff 	mov.w	r2, #4294967295
 8004142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004146:	f10a 0a01 	add.w	sl, sl, #1
 800414a:	9304      	str	r3, [sp, #16]
 800414c:	9307      	str	r3, [sp, #28]
 800414e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004152:	931a      	str	r3, [sp, #104]	; 0x68
 8004154:	4654      	mov	r4, sl
 8004156:	2205      	movs	r2, #5
 8004158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800415c:	4851      	ldr	r0, [pc, #324]	; (80042a4 <_svfiprintf_r+0x1ec>)
 800415e:	f7fc f85f 	bl	8000220 <memchr>
 8004162:	9a04      	ldr	r2, [sp, #16]
 8004164:	b9d8      	cbnz	r0, 800419e <_svfiprintf_r+0xe6>
 8004166:	06d0      	lsls	r0, r2, #27
 8004168:	bf44      	itt	mi
 800416a:	2320      	movmi	r3, #32
 800416c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004170:	0711      	lsls	r1, r2, #28
 8004172:	bf44      	itt	mi
 8004174:	232b      	movmi	r3, #43	; 0x2b
 8004176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800417a:	f89a 3000 	ldrb.w	r3, [sl]
 800417e:	2b2a      	cmp	r3, #42	; 0x2a
 8004180:	d015      	beq.n	80041ae <_svfiprintf_r+0xf6>
 8004182:	9a07      	ldr	r2, [sp, #28]
 8004184:	4654      	mov	r4, sl
 8004186:	2000      	movs	r0, #0
 8004188:	f04f 0c0a 	mov.w	ip, #10
 800418c:	4621      	mov	r1, r4
 800418e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004192:	3b30      	subs	r3, #48	; 0x30
 8004194:	2b09      	cmp	r3, #9
 8004196:	d94e      	bls.n	8004236 <_svfiprintf_r+0x17e>
 8004198:	b1b0      	cbz	r0, 80041c8 <_svfiprintf_r+0x110>
 800419a:	9207      	str	r2, [sp, #28]
 800419c:	e014      	b.n	80041c8 <_svfiprintf_r+0x110>
 800419e:	eba0 0308 	sub.w	r3, r0, r8
 80041a2:	fa09 f303 	lsl.w	r3, r9, r3
 80041a6:	4313      	orrs	r3, r2
 80041a8:	9304      	str	r3, [sp, #16]
 80041aa:	46a2      	mov	sl, r4
 80041ac:	e7d2      	b.n	8004154 <_svfiprintf_r+0x9c>
 80041ae:	9b03      	ldr	r3, [sp, #12]
 80041b0:	1d19      	adds	r1, r3, #4
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	9103      	str	r1, [sp, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bfbb      	ittet	lt
 80041ba:	425b      	neglt	r3, r3
 80041bc:	f042 0202 	orrlt.w	r2, r2, #2
 80041c0:	9307      	strge	r3, [sp, #28]
 80041c2:	9307      	strlt	r3, [sp, #28]
 80041c4:	bfb8      	it	lt
 80041c6:	9204      	strlt	r2, [sp, #16]
 80041c8:	7823      	ldrb	r3, [r4, #0]
 80041ca:	2b2e      	cmp	r3, #46	; 0x2e
 80041cc:	d10c      	bne.n	80041e8 <_svfiprintf_r+0x130>
 80041ce:	7863      	ldrb	r3, [r4, #1]
 80041d0:	2b2a      	cmp	r3, #42	; 0x2a
 80041d2:	d135      	bne.n	8004240 <_svfiprintf_r+0x188>
 80041d4:	9b03      	ldr	r3, [sp, #12]
 80041d6:	1d1a      	adds	r2, r3, #4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	9203      	str	r2, [sp, #12]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bfb8      	it	lt
 80041e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80041e4:	3402      	adds	r4, #2
 80041e6:	9305      	str	r3, [sp, #20]
 80041e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80042b4 <_svfiprintf_r+0x1fc>
 80041ec:	7821      	ldrb	r1, [r4, #0]
 80041ee:	2203      	movs	r2, #3
 80041f0:	4650      	mov	r0, sl
 80041f2:	f7fc f815 	bl	8000220 <memchr>
 80041f6:	b140      	cbz	r0, 800420a <_svfiprintf_r+0x152>
 80041f8:	2340      	movs	r3, #64	; 0x40
 80041fa:	eba0 000a 	sub.w	r0, r0, sl
 80041fe:	fa03 f000 	lsl.w	r0, r3, r0
 8004202:	9b04      	ldr	r3, [sp, #16]
 8004204:	4303      	orrs	r3, r0
 8004206:	3401      	adds	r4, #1
 8004208:	9304      	str	r3, [sp, #16]
 800420a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800420e:	4826      	ldr	r0, [pc, #152]	; (80042a8 <_svfiprintf_r+0x1f0>)
 8004210:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004214:	2206      	movs	r2, #6
 8004216:	f7fc f803 	bl	8000220 <memchr>
 800421a:	2800      	cmp	r0, #0
 800421c:	d038      	beq.n	8004290 <_svfiprintf_r+0x1d8>
 800421e:	4b23      	ldr	r3, [pc, #140]	; (80042ac <_svfiprintf_r+0x1f4>)
 8004220:	bb1b      	cbnz	r3, 800426a <_svfiprintf_r+0x1b2>
 8004222:	9b03      	ldr	r3, [sp, #12]
 8004224:	3307      	adds	r3, #7
 8004226:	f023 0307 	bic.w	r3, r3, #7
 800422a:	3308      	adds	r3, #8
 800422c:	9303      	str	r3, [sp, #12]
 800422e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004230:	4433      	add	r3, r6
 8004232:	9309      	str	r3, [sp, #36]	; 0x24
 8004234:	e767      	b.n	8004106 <_svfiprintf_r+0x4e>
 8004236:	fb0c 3202 	mla	r2, ip, r2, r3
 800423a:	460c      	mov	r4, r1
 800423c:	2001      	movs	r0, #1
 800423e:	e7a5      	b.n	800418c <_svfiprintf_r+0xd4>
 8004240:	2300      	movs	r3, #0
 8004242:	3401      	adds	r4, #1
 8004244:	9305      	str	r3, [sp, #20]
 8004246:	4619      	mov	r1, r3
 8004248:	f04f 0c0a 	mov.w	ip, #10
 800424c:	4620      	mov	r0, r4
 800424e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004252:	3a30      	subs	r2, #48	; 0x30
 8004254:	2a09      	cmp	r2, #9
 8004256:	d903      	bls.n	8004260 <_svfiprintf_r+0x1a8>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0c5      	beq.n	80041e8 <_svfiprintf_r+0x130>
 800425c:	9105      	str	r1, [sp, #20]
 800425e:	e7c3      	b.n	80041e8 <_svfiprintf_r+0x130>
 8004260:	fb0c 2101 	mla	r1, ip, r1, r2
 8004264:	4604      	mov	r4, r0
 8004266:	2301      	movs	r3, #1
 8004268:	e7f0      	b.n	800424c <_svfiprintf_r+0x194>
 800426a:	ab03      	add	r3, sp, #12
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	462a      	mov	r2, r5
 8004270:	4b0f      	ldr	r3, [pc, #60]	; (80042b0 <_svfiprintf_r+0x1f8>)
 8004272:	a904      	add	r1, sp, #16
 8004274:	4638      	mov	r0, r7
 8004276:	f3af 8000 	nop.w
 800427a:	1c42      	adds	r2, r0, #1
 800427c:	4606      	mov	r6, r0
 800427e:	d1d6      	bne.n	800422e <_svfiprintf_r+0x176>
 8004280:	89ab      	ldrh	r3, [r5, #12]
 8004282:	065b      	lsls	r3, r3, #25
 8004284:	f53f af2c 	bmi.w	80040e0 <_svfiprintf_r+0x28>
 8004288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800428a:	b01d      	add	sp, #116	; 0x74
 800428c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004290:	ab03      	add	r3, sp, #12
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	462a      	mov	r2, r5
 8004296:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <_svfiprintf_r+0x1f8>)
 8004298:	a904      	add	r1, sp, #16
 800429a:	4638      	mov	r0, r7
 800429c:	f000 f9d4 	bl	8004648 <_printf_i>
 80042a0:	e7eb      	b.n	800427a <_svfiprintf_r+0x1c2>
 80042a2:	bf00      	nop
 80042a4:	08005451 	.word	0x08005451
 80042a8:	0800545b 	.word	0x0800545b
 80042ac:	00000000 	.word	0x00000000
 80042b0:	08004001 	.word	0x08004001
 80042b4:	08005457 	.word	0x08005457

080042b8 <__sfputc_r>:
 80042b8:	6893      	ldr	r3, [r2, #8]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	b410      	push	{r4}
 80042c0:	6093      	str	r3, [r2, #8]
 80042c2:	da08      	bge.n	80042d6 <__sfputc_r+0x1e>
 80042c4:	6994      	ldr	r4, [r2, #24]
 80042c6:	42a3      	cmp	r3, r4
 80042c8:	db01      	blt.n	80042ce <__sfputc_r+0x16>
 80042ca:	290a      	cmp	r1, #10
 80042cc:	d103      	bne.n	80042d6 <__sfputc_r+0x1e>
 80042ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042d2:	f000 badf 	b.w	8004894 <__swbuf_r>
 80042d6:	6813      	ldr	r3, [r2, #0]
 80042d8:	1c58      	adds	r0, r3, #1
 80042da:	6010      	str	r0, [r2, #0]
 80042dc:	7019      	strb	r1, [r3, #0]
 80042de:	4608      	mov	r0, r1
 80042e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <__sfputs_r>:
 80042e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e8:	4606      	mov	r6, r0
 80042ea:	460f      	mov	r7, r1
 80042ec:	4614      	mov	r4, r2
 80042ee:	18d5      	adds	r5, r2, r3
 80042f0:	42ac      	cmp	r4, r5
 80042f2:	d101      	bne.n	80042f8 <__sfputs_r+0x12>
 80042f4:	2000      	movs	r0, #0
 80042f6:	e007      	b.n	8004308 <__sfputs_r+0x22>
 80042f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042fc:	463a      	mov	r2, r7
 80042fe:	4630      	mov	r0, r6
 8004300:	f7ff ffda 	bl	80042b8 <__sfputc_r>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d1f3      	bne.n	80042f0 <__sfputs_r+0xa>
 8004308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800430c <_vfiprintf_r>:
 800430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004310:	460d      	mov	r5, r1
 8004312:	b09d      	sub	sp, #116	; 0x74
 8004314:	4614      	mov	r4, r2
 8004316:	4698      	mov	r8, r3
 8004318:	4606      	mov	r6, r0
 800431a:	b118      	cbz	r0, 8004324 <_vfiprintf_r+0x18>
 800431c:	6983      	ldr	r3, [r0, #24]
 800431e:	b90b      	cbnz	r3, 8004324 <_vfiprintf_r+0x18>
 8004320:	f000 fc9a 	bl	8004c58 <__sinit>
 8004324:	4b89      	ldr	r3, [pc, #548]	; (800454c <_vfiprintf_r+0x240>)
 8004326:	429d      	cmp	r5, r3
 8004328:	d11b      	bne.n	8004362 <_vfiprintf_r+0x56>
 800432a:	6875      	ldr	r5, [r6, #4]
 800432c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800432e:	07d9      	lsls	r1, r3, #31
 8004330:	d405      	bmi.n	800433e <_vfiprintf_r+0x32>
 8004332:	89ab      	ldrh	r3, [r5, #12]
 8004334:	059a      	lsls	r2, r3, #22
 8004336:	d402      	bmi.n	800433e <_vfiprintf_r+0x32>
 8004338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800433a:	f000 fd2b 	bl	8004d94 <__retarget_lock_acquire_recursive>
 800433e:	89ab      	ldrh	r3, [r5, #12]
 8004340:	071b      	lsls	r3, r3, #28
 8004342:	d501      	bpl.n	8004348 <_vfiprintf_r+0x3c>
 8004344:	692b      	ldr	r3, [r5, #16]
 8004346:	b9eb      	cbnz	r3, 8004384 <_vfiprintf_r+0x78>
 8004348:	4629      	mov	r1, r5
 800434a:	4630      	mov	r0, r6
 800434c:	f000 faf4 	bl	8004938 <__swsetup_r>
 8004350:	b1c0      	cbz	r0, 8004384 <_vfiprintf_r+0x78>
 8004352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004354:	07dc      	lsls	r4, r3, #31
 8004356:	d50e      	bpl.n	8004376 <_vfiprintf_r+0x6a>
 8004358:	f04f 30ff 	mov.w	r0, #4294967295
 800435c:	b01d      	add	sp, #116	; 0x74
 800435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004362:	4b7b      	ldr	r3, [pc, #492]	; (8004550 <_vfiprintf_r+0x244>)
 8004364:	429d      	cmp	r5, r3
 8004366:	d101      	bne.n	800436c <_vfiprintf_r+0x60>
 8004368:	68b5      	ldr	r5, [r6, #8]
 800436a:	e7df      	b.n	800432c <_vfiprintf_r+0x20>
 800436c:	4b79      	ldr	r3, [pc, #484]	; (8004554 <_vfiprintf_r+0x248>)
 800436e:	429d      	cmp	r5, r3
 8004370:	bf08      	it	eq
 8004372:	68f5      	ldreq	r5, [r6, #12]
 8004374:	e7da      	b.n	800432c <_vfiprintf_r+0x20>
 8004376:	89ab      	ldrh	r3, [r5, #12]
 8004378:	0598      	lsls	r0, r3, #22
 800437a:	d4ed      	bmi.n	8004358 <_vfiprintf_r+0x4c>
 800437c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800437e:	f000 fd0a 	bl	8004d96 <__retarget_lock_release_recursive>
 8004382:	e7e9      	b.n	8004358 <_vfiprintf_r+0x4c>
 8004384:	2300      	movs	r3, #0
 8004386:	9309      	str	r3, [sp, #36]	; 0x24
 8004388:	2320      	movs	r3, #32
 800438a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800438e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004392:	2330      	movs	r3, #48	; 0x30
 8004394:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004558 <_vfiprintf_r+0x24c>
 8004398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800439c:	f04f 0901 	mov.w	r9, #1
 80043a0:	4623      	mov	r3, r4
 80043a2:	469a      	mov	sl, r3
 80043a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043a8:	b10a      	cbz	r2, 80043ae <_vfiprintf_r+0xa2>
 80043aa:	2a25      	cmp	r2, #37	; 0x25
 80043ac:	d1f9      	bne.n	80043a2 <_vfiprintf_r+0x96>
 80043ae:	ebba 0b04 	subs.w	fp, sl, r4
 80043b2:	d00b      	beq.n	80043cc <_vfiprintf_r+0xc0>
 80043b4:	465b      	mov	r3, fp
 80043b6:	4622      	mov	r2, r4
 80043b8:	4629      	mov	r1, r5
 80043ba:	4630      	mov	r0, r6
 80043bc:	f7ff ff93 	bl	80042e6 <__sfputs_r>
 80043c0:	3001      	adds	r0, #1
 80043c2:	f000 80aa 	beq.w	800451a <_vfiprintf_r+0x20e>
 80043c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043c8:	445a      	add	r2, fp
 80043ca:	9209      	str	r2, [sp, #36]	; 0x24
 80043cc:	f89a 3000 	ldrb.w	r3, [sl]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 80a2 	beq.w	800451a <_vfiprintf_r+0x20e>
 80043d6:	2300      	movs	r3, #0
 80043d8:	f04f 32ff 	mov.w	r2, #4294967295
 80043dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043e0:	f10a 0a01 	add.w	sl, sl, #1
 80043e4:	9304      	str	r3, [sp, #16]
 80043e6:	9307      	str	r3, [sp, #28]
 80043e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043ec:	931a      	str	r3, [sp, #104]	; 0x68
 80043ee:	4654      	mov	r4, sl
 80043f0:	2205      	movs	r2, #5
 80043f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f6:	4858      	ldr	r0, [pc, #352]	; (8004558 <_vfiprintf_r+0x24c>)
 80043f8:	f7fb ff12 	bl	8000220 <memchr>
 80043fc:	9a04      	ldr	r2, [sp, #16]
 80043fe:	b9d8      	cbnz	r0, 8004438 <_vfiprintf_r+0x12c>
 8004400:	06d1      	lsls	r1, r2, #27
 8004402:	bf44      	itt	mi
 8004404:	2320      	movmi	r3, #32
 8004406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800440a:	0713      	lsls	r3, r2, #28
 800440c:	bf44      	itt	mi
 800440e:	232b      	movmi	r3, #43	; 0x2b
 8004410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004414:	f89a 3000 	ldrb.w	r3, [sl]
 8004418:	2b2a      	cmp	r3, #42	; 0x2a
 800441a:	d015      	beq.n	8004448 <_vfiprintf_r+0x13c>
 800441c:	9a07      	ldr	r2, [sp, #28]
 800441e:	4654      	mov	r4, sl
 8004420:	2000      	movs	r0, #0
 8004422:	f04f 0c0a 	mov.w	ip, #10
 8004426:	4621      	mov	r1, r4
 8004428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800442c:	3b30      	subs	r3, #48	; 0x30
 800442e:	2b09      	cmp	r3, #9
 8004430:	d94e      	bls.n	80044d0 <_vfiprintf_r+0x1c4>
 8004432:	b1b0      	cbz	r0, 8004462 <_vfiprintf_r+0x156>
 8004434:	9207      	str	r2, [sp, #28]
 8004436:	e014      	b.n	8004462 <_vfiprintf_r+0x156>
 8004438:	eba0 0308 	sub.w	r3, r0, r8
 800443c:	fa09 f303 	lsl.w	r3, r9, r3
 8004440:	4313      	orrs	r3, r2
 8004442:	9304      	str	r3, [sp, #16]
 8004444:	46a2      	mov	sl, r4
 8004446:	e7d2      	b.n	80043ee <_vfiprintf_r+0xe2>
 8004448:	9b03      	ldr	r3, [sp, #12]
 800444a:	1d19      	adds	r1, r3, #4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	9103      	str	r1, [sp, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	bfbb      	ittet	lt
 8004454:	425b      	neglt	r3, r3
 8004456:	f042 0202 	orrlt.w	r2, r2, #2
 800445a:	9307      	strge	r3, [sp, #28]
 800445c:	9307      	strlt	r3, [sp, #28]
 800445e:	bfb8      	it	lt
 8004460:	9204      	strlt	r2, [sp, #16]
 8004462:	7823      	ldrb	r3, [r4, #0]
 8004464:	2b2e      	cmp	r3, #46	; 0x2e
 8004466:	d10c      	bne.n	8004482 <_vfiprintf_r+0x176>
 8004468:	7863      	ldrb	r3, [r4, #1]
 800446a:	2b2a      	cmp	r3, #42	; 0x2a
 800446c:	d135      	bne.n	80044da <_vfiprintf_r+0x1ce>
 800446e:	9b03      	ldr	r3, [sp, #12]
 8004470:	1d1a      	adds	r2, r3, #4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	9203      	str	r2, [sp, #12]
 8004476:	2b00      	cmp	r3, #0
 8004478:	bfb8      	it	lt
 800447a:	f04f 33ff 	movlt.w	r3, #4294967295
 800447e:	3402      	adds	r4, #2
 8004480:	9305      	str	r3, [sp, #20]
 8004482:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004568 <_vfiprintf_r+0x25c>
 8004486:	7821      	ldrb	r1, [r4, #0]
 8004488:	2203      	movs	r2, #3
 800448a:	4650      	mov	r0, sl
 800448c:	f7fb fec8 	bl	8000220 <memchr>
 8004490:	b140      	cbz	r0, 80044a4 <_vfiprintf_r+0x198>
 8004492:	2340      	movs	r3, #64	; 0x40
 8004494:	eba0 000a 	sub.w	r0, r0, sl
 8004498:	fa03 f000 	lsl.w	r0, r3, r0
 800449c:	9b04      	ldr	r3, [sp, #16]
 800449e:	4303      	orrs	r3, r0
 80044a0:	3401      	adds	r4, #1
 80044a2:	9304      	str	r3, [sp, #16]
 80044a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a8:	482c      	ldr	r0, [pc, #176]	; (800455c <_vfiprintf_r+0x250>)
 80044aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044ae:	2206      	movs	r2, #6
 80044b0:	f7fb feb6 	bl	8000220 <memchr>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d03f      	beq.n	8004538 <_vfiprintf_r+0x22c>
 80044b8:	4b29      	ldr	r3, [pc, #164]	; (8004560 <_vfiprintf_r+0x254>)
 80044ba:	bb1b      	cbnz	r3, 8004504 <_vfiprintf_r+0x1f8>
 80044bc:	9b03      	ldr	r3, [sp, #12]
 80044be:	3307      	adds	r3, #7
 80044c0:	f023 0307 	bic.w	r3, r3, #7
 80044c4:	3308      	adds	r3, #8
 80044c6:	9303      	str	r3, [sp, #12]
 80044c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ca:	443b      	add	r3, r7
 80044cc:	9309      	str	r3, [sp, #36]	; 0x24
 80044ce:	e767      	b.n	80043a0 <_vfiprintf_r+0x94>
 80044d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80044d4:	460c      	mov	r4, r1
 80044d6:	2001      	movs	r0, #1
 80044d8:	e7a5      	b.n	8004426 <_vfiprintf_r+0x11a>
 80044da:	2300      	movs	r3, #0
 80044dc:	3401      	adds	r4, #1
 80044de:	9305      	str	r3, [sp, #20]
 80044e0:	4619      	mov	r1, r3
 80044e2:	f04f 0c0a 	mov.w	ip, #10
 80044e6:	4620      	mov	r0, r4
 80044e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ec:	3a30      	subs	r2, #48	; 0x30
 80044ee:	2a09      	cmp	r2, #9
 80044f0:	d903      	bls.n	80044fa <_vfiprintf_r+0x1ee>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0c5      	beq.n	8004482 <_vfiprintf_r+0x176>
 80044f6:	9105      	str	r1, [sp, #20]
 80044f8:	e7c3      	b.n	8004482 <_vfiprintf_r+0x176>
 80044fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80044fe:	4604      	mov	r4, r0
 8004500:	2301      	movs	r3, #1
 8004502:	e7f0      	b.n	80044e6 <_vfiprintf_r+0x1da>
 8004504:	ab03      	add	r3, sp, #12
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	462a      	mov	r2, r5
 800450a:	4b16      	ldr	r3, [pc, #88]	; (8004564 <_vfiprintf_r+0x258>)
 800450c:	a904      	add	r1, sp, #16
 800450e:	4630      	mov	r0, r6
 8004510:	f3af 8000 	nop.w
 8004514:	4607      	mov	r7, r0
 8004516:	1c78      	adds	r0, r7, #1
 8004518:	d1d6      	bne.n	80044c8 <_vfiprintf_r+0x1bc>
 800451a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800451c:	07d9      	lsls	r1, r3, #31
 800451e:	d405      	bmi.n	800452c <_vfiprintf_r+0x220>
 8004520:	89ab      	ldrh	r3, [r5, #12]
 8004522:	059a      	lsls	r2, r3, #22
 8004524:	d402      	bmi.n	800452c <_vfiprintf_r+0x220>
 8004526:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004528:	f000 fc35 	bl	8004d96 <__retarget_lock_release_recursive>
 800452c:	89ab      	ldrh	r3, [r5, #12]
 800452e:	065b      	lsls	r3, r3, #25
 8004530:	f53f af12 	bmi.w	8004358 <_vfiprintf_r+0x4c>
 8004534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004536:	e711      	b.n	800435c <_vfiprintf_r+0x50>
 8004538:	ab03      	add	r3, sp, #12
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	462a      	mov	r2, r5
 800453e:	4b09      	ldr	r3, [pc, #36]	; (8004564 <_vfiprintf_r+0x258>)
 8004540:	a904      	add	r1, sp, #16
 8004542:	4630      	mov	r0, r6
 8004544:	f000 f880 	bl	8004648 <_printf_i>
 8004548:	e7e4      	b.n	8004514 <_vfiprintf_r+0x208>
 800454a:	bf00      	nop
 800454c:	080054a4 	.word	0x080054a4
 8004550:	080054c4 	.word	0x080054c4
 8004554:	08005484 	.word	0x08005484
 8004558:	08005451 	.word	0x08005451
 800455c:	0800545b 	.word	0x0800545b
 8004560:	00000000 	.word	0x00000000
 8004564:	080042e7 	.word	0x080042e7
 8004568:	08005457 	.word	0x08005457

0800456c <_printf_common>:
 800456c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004570:	4616      	mov	r6, r2
 8004572:	4699      	mov	r9, r3
 8004574:	688a      	ldr	r2, [r1, #8]
 8004576:	690b      	ldr	r3, [r1, #16]
 8004578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800457c:	4293      	cmp	r3, r2
 800457e:	bfb8      	it	lt
 8004580:	4613      	movlt	r3, r2
 8004582:	6033      	str	r3, [r6, #0]
 8004584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004588:	4607      	mov	r7, r0
 800458a:	460c      	mov	r4, r1
 800458c:	b10a      	cbz	r2, 8004592 <_printf_common+0x26>
 800458e:	3301      	adds	r3, #1
 8004590:	6033      	str	r3, [r6, #0]
 8004592:	6823      	ldr	r3, [r4, #0]
 8004594:	0699      	lsls	r1, r3, #26
 8004596:	bf42      	ittt	mi
 8004598:	6833      	ldrmi	r3, [r6, #0]
 800459a:	3302      	addmi	r3, #2
 800459c:	6033      	strmi	r3, [r6, #0]
 800459e:	6825      	ldr	r5, [r4, #0]
 80045a0:	f015 0506 	ands.w	r5, r5, #6
 80045a4:	d106      	bne.n	80045b4 <_printf_common+0x48>
 80045a6:	f104 0a19 	add.w	sl, r4, #25
 80045aa:	68e3      	ldr	r3, [r4, #12]
 80045ac:	6832      	ldr	r2, [r6, #0]
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	42ab      	cmp	r3, r5
 80045b2:	dc26      	bgt.n	8004602 <_printf_common+0x96>
 80045b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045b8:	1e13      	subs	r3, r2, #0
 80045ba:	6822      	ldr	r2, [r4, #0]
 80045bc:	bf18      	it	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	0692      	lsls	r2, r2, #26
 80045c2:	d42b      	bmi.n	800461c <_printf_common+0xb0>
 80045c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045c8:	4649      	mov	r1, r9
 80045ca:	4638      	mov	r0, r7
 80045cc:	47c0      	blx	r8
 80045ce:	3001      	adds	r0, #1
 80045d0:	d01e      	beq.n	8004610 <_printf_common+0xa4>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	68e5      	ldr	r5, [r4, #12]
 80045d6:	6832      	ldr	r2, [r6, #0]
 80045d8:	f003 0306 	and.w	r3, r3, #6
 80045dc:	2b04      	cmp	r3, #4
 80045de:	bf08      	it	eq
 80045e0:	1aad      	subeq	r5, r5, r2
 80045e2:	68a3      	ldr	r3, [r4, #8]
 80045e4:	6922      	ldr	r2, [r4, #16]
 80045e6:	bf0c      	ite	eq
 80045e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045ec:	2500      	movne	r5, #0
 80045ee:	4293      	cmp	r3, r2
 80045f0:	bfc4      	itt	gt
 80045f2:	1a9b      	subgt	r3, r3, r2
 80045f4:	18ed      	addgt	r5, r5, r3
 80045f6:	2600      	movs	r6, #0
 80045f8:	341a      	adds	r4, #26
 80045fa:	42b5      	cmp	r5, r6
 80045fc:	d11a      	bne.n	8004634 <_printf_common+0xc8>
 80045fe:	2000      	movs	r0, #0
 8004600:	e008      	b.n	8004614 <_printf_common+0xa8>
 8004602:	2301      	movs	r3, #1
 8004604:	4652      	mov	r2, sl
 8004606:	4649      	mov	r1, r9
 8004608:	4638      	mov	r0, r7
 800460a:	47c0      	blx	r8
 800460c:	3001      	adds	r0, #1
 800460e:	d103      	bne.n	8004618 <_printf_common+0xac>
 8004610:	f04f 30ff 	mov.w	r0, #4294967295
 8004614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004618:	3501      	adds	r5, #1
 800461a:	e7c6      	b.n	80045aa <_printf_common+0x3e>
 800461c:	18e1      	adds	r1, r4, r3
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	2030      	movs	r0, #48	; 0x30
 8004622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004626:	4422      	add	r2, r4
 8004628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800462c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004630:	3302      	adds	r3, #2
 8004632:	e7c7      	b.n	80045c4 <_printf_common+0x58>
 8004634:	2301      	movs	r3, #1
 8004636:	4622      	mov	r2, r4
 8004638:	4649      	mov	r1, r9
 800463a:	4638      	mov	r0, r7
 800463c:	47c0      	blx	r8
 800463e:	3001      	adds	r0, #1
 8004640:	d0e6      	beq.n	8004610 <_printf_common+0xa4>
 8004642:	3601      	adds	r6, #1
 8004644:	e7d9      	b.n	80045fa <_printf_common+0x8e>
	...

08004648 <_printf_i>:
 8004648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800464c:	7e0f      	ldrb	r7, [r1, #24]
 800464e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004650:	2f78      	cmp	r7, #120	; 0x78
 8004652:	4691      	mov	r9, r2
 8004654:	4680      	mov	r8, r0
 8004656:	460c      	mov	r4, r1
 8004658:	469a      	mov	sl, r3
 800465a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800465e:	d807      	bhi.n	8004670 <_printf_i+0x28>
 8004660:	2f62      	cmp	r7, #98	; 0x62
 8004662:	d80a      	bhi.n	800467a <_printf_i+0x32>
 8004664:	2f00      	cmp	r7, #0
 8004666:	f000 80d8 	beq.w	800481a <_printf_i+0x1d2>
 800466a:	2f58      	cmp	r7, #88	; 0x58
 800466c:	f000 80a3 	beq.w	80047b6 <_printf_i+0x16e>
 8004670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004678:	e03a      	b.n	80046f0 <_printf_i+0xa8>
 800467a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800467e:	2b15      	cmp	r3, #21
 8004680:	d8f6      	bhi.n	8004670 <_printf_i+0x28>
 8004682:	a101      	add	r1, pc, #4	; (adr r1, 8004688 <_printf_i+0x40>)
 8004684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004688:	080046e1 	.word	0x080046e1
 800468c:	080046f5 	.word	0x080046f5
 8004690:	08004671 	.word	0x08004671
 8004694:	08004671 	.word	0x08004671
 8004698:	08004671 	.word	0x08004671
 800469c:	08004671 	.word	0x08004671
 80046a0:	080046f5 	.word	0x080046f5
 80046a4:	08004671 	.word	0x08004671
 80046a8:	08004671 	.word	0x08004671
 80046ac:	08004671 	.word	0x08004671
 80046b0:	08004671 	.word	0x08004671
 80046b4:	08004801 	.word	0x08004801
 80046b8:	08004725 	.word	0x08004725
 80046bc:	080047e3 	.word	0x080047e3
 80046c0:	08004671 	.word	0x08004671
 80046c4:	08004671 	.word	0x08004671
 80046c8:	08004823 	.word	0x08004823
 80046cc:	08004671 	.word	0x08004671
 80046d0:	08004725 	.word	0x08004725
 80046d4:	08004671 	.word	0x08004671
 80046d8:	08004671 	.word	0x08004671
 80046dc:	080047eb 	.word	0x080047eb
 80046e0:	682b      	ldr	r3, [r5, #0]
 80046e2:	1d1a      	adds	r2, r3, #4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	602a      	str	r2, [r5, #0]
 80046e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0a3      	b.n	800483c <_printf_i+0x1f4>
 80046f4:	6820      	ldr	r0, [r4, #0]
 80046f6:	6829      	ldr	r1, [r5, #0]
 80046f8:	0606      	lsls	r6, r0, #24
 80046fa:	f101 0304 	add.w	r3, r1, #4
 80046fe:	d50a      	bpl.n	8004716 <_printf_i+0xce>
 8004700:	680e      	ldr	r6, [r1, #0]
 8004702:	602b      	str	r3, [r5, #0]
 8004704:	2e00      	cmp	r6, #0
 8004706:	da03      	bge.n	8004710 <_printf_i+0xc8>
 8004708:	232d      	movs	r3, #45	; 0x2d
 800470a:	4276      	negs	r6, r6
 800470c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004710:	485e      	ldr	r0, [pc, #376]	; (800488c <_printf_i+0x244>)
 8004712:	230a      	movs	r3, #10
 8004714:	e019      	b.n	800474a <_printf_i+0x102>
 8004716:	680e      	ldr	r6, [r1, #0]
 8004718:	602b      	str	r3, [r5, #0]
 800471a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800471e:	bf18      	it	ne
 8004720:	b236      	sxthne	r6, r6
 8004722:	e7ef      	b.n	8004704 <_printf_i+0xbc>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	1d19      	adds	r1, r3, #4
 800472a:	6029      	str	r1, [r5, #0]
 800472c:	0601      	lsls	r1, r0, #24
 800472e:	d501      	bpl.n	8004734 <_printf_i+0xec>
 8004730:	681e      	ldr	r6, [r3, #0]
 8004732:	e002      	b.n	800473a <_printf_i+0xf2>
 8004734:	0646      	lsls	r6, r0, #25
 8004736:	d5fb      	bpl.n	8004730 <_printf_i+0xe8>
 8004738:	881e      	ldrh	r6, [r3, #0]
 800473a:	4854      	ldr	r0, [pc, #336]	; (800488c <_printf_i+0x244>)
 800473c:	2f6f      	cmp	r7, #111	; 0x6f
 800473e:	bf0c      	ite	eq
 8004740:	2308      	moveq	r3, #8
 8004742:	230a      	movne	r3, #10
 8004744:	2100      	movs	r1, #0
 8004746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800474a:	6865      	ldr	r5, [r4, #4]
 800474c:	60a5      	str	r5, [r4, #8]
 800474e:	2d00      	cmp	r5, #0
 8004750:	bfa2      	ittt	ge
 8004752:	6821      	ldrge	r1, [r4, #0]
 8004754:	f021 0104 	bicge.w	r1, r1, #4
 8004758:	6021      	strge	r1, [r4, #0]
 800475a:	b90e      	cbnz	r6, 8004760 <_printf_i+0x118>
 800475c:	2d00      	cmp	r5, #0
 800475e:	d04d      	beq.n	80047fc <_printf_i+0x1b4>
 8004760:	4615      	mov	r5, r2
 8004762:	fbb6 f1f3 	udiv	r1, r6, r3
 8004766:	fb03 6711 	mls	r7, r3, r1, r6
 800476a:	5dc7      	ldrb	r7, [r0, r7]
 800476c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004770:	4637      	mov	r7, r6
 8004772:	42bb      	cmp	r3, r7
 8004774:	460e      	mov	r6, r1
 8004776:	d9f4      	bls.n	8004762 <_printf_i+0x11a>
 8004778:	2b08      	cmp	r3, #8
 800477a:	d10b      	bne.n	8004794 <_printf_i+0x14c>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	07de      	lsls	r6, r3, #31
 8004780:	d508      	bpl.n	8004794 <_printf_i+0x14c>
 8004782:	6923      	ldr	r3, [r4, #16]
 8004784:	6861      	ldr	r1, [r4, #4]
 8004786:	4299      	cmp	r1, r3
 8004788:	bfde      	ittt	le
 800478a:	2330      	movle	r3, #48	; 0x30
 800478c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004790:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004794:	1b52      	subs	r2, r2, r5
 8004796:	6122      	str	r2, [r4, #16]
 8004798:	f8cd a000 	str.w	sl, [sp]
 800479c:	464b      	mov	r3, r9
 800479e:	aa03      	add	r2, sp, #12
 80047a0:	4621      	mov	r1, r4
 80047a2:	4640      	mov	r0, r8
 80047a4:	f7ff fee2 	bl	800456c <_printf_common>
 80047a8:	3001      	adds	r0, #1
 80047aa:	d14c      	bne.n	8004846 <_printf_i+0x1fe>
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	b004      	add	sp, #16
 80047b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b6:	4835      	ldr	r0, [pc, #212]	; (800488c <_printf_i+0x244>)
 80047b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047bc:	6829      	ldr	r1, [r5, #0]
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80047c4:	6029      	str	r1, [r5, #0]
 80047c6:	061d      	lsls	r5, r3, #24
 80047c8:	d514      	bpl.n	80047f4 <_printf_i+0x1ac>
 80047ca:	07df      	lsls	r7, r3, #31
 80047cc:	bf44      	itt	mi
 80047ce:	f043 0320 	orrmi.w	r3, r3, #32
 80047d2:	6023      	strmi	r3, [r4, #0]
 80047d4:	b91e      	cbnz	r6, 80047de <_printf_i+0x196>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	f023 0320 	bic.w	r3, r3, #32
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	2310      	movs	r3, #16
 80047e0:	e7b0      	b.n	8004744 <_printf_i+0xfc>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	f043 0320 	orr.w	r3, r3, #32
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	2378      	movs	r3, #120	; 0x78
 80047ec:	4828      	ldr	r0, [pc, #160]	; (8004890 <_printf_i+0x248>)
 80047ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047f2:	e7e3      	b.n	80047bc <_printf_i+0x174>
 80047f4:	0659      	lsls	r1, r3, #25
 80047f6:	bf48      	it	mi
 80047f8:	b2b6      	uxthmi	r6, r6
 80047fa:	e7e6      	b.n	80047ca <_printf_i+0x182>
 80047fc:	4615      	mov	r5, r2
 80047fe:	e7bb      	b.n	8004778 <_printf_i+0x130>
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	6826      	ldr	r6, [r4, #0]
 8004804:	6961      	ldr	r1, [r4, #20]
 8004806:	1d18      	adds	r0, r3, #4
 8004808:	6028      	str	r0, [r5, #0]
 800480a:	0635      	lsls	r5, r6, #24
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	d501      	bpl.n	8004814 <_printf_i+0x1cc>
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	e002      	b.n	800481a <_printf_i+0x1d2>
 8004814:	0670      	lsls	r0, r6, #25
 8004816:	d5fb      	bpl.n	8004810 <_printf_i+0x1c8>
 8004818:	8019      	strh	r1, [r3, #0]
 800481a:	2300      	movs	r3, #0
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	4615      	mov	r5, r2
 8004820:	e7ba      	b.n	8004798 <_printf_i+0x150>
 8004822:	682b      	ldr	r3, [r5, #0]
 8004824:	1d1a      	adds	r2, r3, #4
 8004826:	602a      	str	r2, [r5, #0]
 8004828:	681d      	ldr	r5, [r3, #0]
 800482a:	6862      	ldr	r2, [r4, #4]
 800482c:	2100      	movs	r1, #0
 800482e:	4628      	mov	r0, r5
 8004830:	f7fb fcf6 	bl	8000220 <memchr>
 8004834:	b108      	cbz	r0, 800483a <_printf_i+0x1f2>
 8004836:	1b40      	subs	r0, r0, r5
 8004838:	6060      	str	r0, [r4, #4]
 800483a:	6863      	ldr	r3, [r4, #4]
 800483c:	6123      	str	r3, [r4, #16]
 800483e:	2300      	movs	r3, #0
 8004840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004844:	e7a8      	b.n	8004798 <_printf_i+0x150>
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	462a      	mov	r2, r5
 800484a:	4649      	mov	r1, r9
 800484c:	4640      	mov	r0, r8
 800484e:	47d0      	blx	sl
 8004850:	3001      	adds	r0, #1
 8004852:	d0ab      	beq.n	80047ac <_printf_i+0x164>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	079b      	lsls	r3, r3, #30
 8004858:	d413      	bmi.n	8004882 <_printf_i+0x23a>
 800485a:	68e0      	ldr	r0, [r4, #12]
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	4298      	cmp	r0, r3
 8004860:	bfb8      	it	lt
 8004862:	4618      	movlt	r0, r3
 8004864:	e7a4      	b.n	80047b0 <_printf_i+0x168>
 8004866:	2301      	movs	r3, #1
 8004868:	4632      	mov	r2, r6
 800486a:	4649      	mov	r1, r9
 800486c:	4640      	mov	r0, r8
 800486e:	47d0      	blx	sl
 8004870:	3001      	adds	r0, #1
 8004872:	d09b      	beq.n	80047ac <_printf_i+0x164>
 8004874:	3501      	adds	r5, #1
 8004876:	68e3      	ldr	r3, [r4, #12]
 8004878:	9903      	ldr	r1, [sp, #12]
 800487a:	1a5b      	subs	r3, r3, r1
 800487c:	42ab      	cmp	r3, r5
 800487e:	dcf2      	bgt.n	8004866 <_printf_i+0x21e>
 8004880:	e7eb      	b.n	800485a <_printf_i+0x212>
 8004882:	2500      	movs	r5, #0
 8004884:	f104 0619 	add.w	r6, r4, #25
 8004888:	e7f5      	b.n	8004876 <_printf_i+0x22e>
 800488a:	bf00      	nop
 800488c:	08005462 	.word	0x08005462
 8004890:	08005473 	.word	0x08005473

08004894 <__swbuf_r>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	460e      	mov	r6, r1
 8004898:	4614      	mov	r4, r2
 800489a:	4605      	mov	r5, r0
 800489c:	b118      	cbz	r0, 80048a6 <__swbuf_r+0x12>
 800489e:	6983      	ldr	r3, [r0, #24]
 80048a0:	b90b      	cbnz	r3, 80048a6 <__swbuf_r+0x12>
 80048a2:	f000 f9d9 	bl	8004c58 <__sinit>
 80048a6:	4b21      	ldr	r3, [pc, #132]	; (800492c <__swbuf_r+0x98>)
 80048a8:	429c      	cmp	r4, r3
 80048aa:	d12b      	bne.n	8004904 <__swbuf_r+0x70>
 80048ac:	686c      	ldr	r4, [r5, #4]
 80048ae:	69a3      	ldr	r3, [r4, #24]
 80048b0:	60a3      	str	r3, [r4, #8]
 80048b2:	89a3      	ldrh	r3, [r4, #12]
 80048b4:	071a      	lsls	r2, r3, #28
 80048b6:	d52f      	bpl.n	8004918 <__swbuf_r+0x84>
 80048b8:	6923      	ldr	r3, [r4, #16]
 80048ba:	b36b      	cbz	r3, 8004918 <__swbuf_r+0x84>
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	6820      	ldr	r0, [r4, #0]
 80048c0:	1ac0      	subs	r0, r0, r3
 80048c2:	6963      	ldr	r3, [r4, #20]
 80048c4:	b2f6      	uxtb	r6, r6
 80048c6:	4283      	cmp	r3, r0
 80048c8:	4637      	mov	r7, r6
 80048ca:	dc04      	bgt.n	80048d6 <__swbuf_r+0x42>
 80048cc:	4621      	mov	r1, r4
 80048ce:	4628      	mov	r0, r5
 80048d0:	f000 f92e 	bl	8004b30 <_fflush_r>
 80048d4:	bb30      	cbnz	r0, 8004924 <__swbuf_r+0x90>
 80048d6:	68a3      	ldr	r3, [r4, #8]
 80048d8:	3b01      	subs	r3, #1
 80048da:	60a3      	str	r3, [r4, #8]
 80048dc:	6823      	ldr	r3, [r4, #0]
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	6022      	str	r2, [r4, #0]
 80048e2:	701e      	strb	r6, [r3, #0]
 80048e4:	6963      	ldr	r3, [r4, #20]
 80048e6:	3001      	adds	r0, #1
 80048e8:	4283      	cmp	r3, r0
 80048ea:	d004      	beq.n	80048f6 <__swbuf_r+0x62>
 80048ec:	89a3      	ldrh	r3, [r4, #12]
 80048ee:	07db      	lsls	r3, r3, #31
 80048f0:	d506      	bpl.n	8004900 <__swbuf_r+0x6c>
 80048f2:	2e0a      	cmp	r6, #10
 80048f4:	d104      	bne.n	8004900 <__swbuf_r+0x6c>
 80048f6:	4621      	mov	r1, r4
 80048f8:	4628      	mov	r0, r5
 80048fa:	f000 f919 	bl	8004b30 <_fflush_r>
 80048fe:	b988      	cbnz	r0, 8004924 <__swbuf_r+0x90>
 8004900:	4638      	mov	r0, r7
 8004902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004904:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <__swbuf_r+0x9c>)
 8004906:	429c      	cmp	r4, r3
 8004908:	d101      	bne.n	800490e <__swbuf_r+0x7a>
 800490a:	68ac      	ldr	r4, [r5, #8]
 800490c:	e7cf      	b.n	80048ae <__swbuf_r+0x1a>
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <__swbuf_r+0xa0>)
 8004910:	429c      	cmp	r4, r3
 8004912:	bf08      	it	eq
 8004914:	68ec      	ldreq	r4, [r5, #12]
 8004916:	e7ca      	b.n	80048ae <__swbuf_r+0x1a>
 8004918:	4621      	mov	r1, r4
 800491a:	4628      	mov	r0, r5
 800491c:	f000 f80c 	bl	8004938 <__swsetup_r>
 8004920:	2800      	cmp	r0, #0
 8004922:	d0cb      	beq.n	80048bc <__swbuf_r+0x28>
 8004924:	f04f 37ff 	mov.w	r7, #4294967295
 8004928:	e7ea      	b.n	8004900 <__swbuf_r+0x6c>
 800492a:	bf00      	nop
 800492c:	080054a4 	.word	0x080054a4
 8004930:	080054c4 	.word	0x080054c4
 8004934:	08005484 	.word	0x08005484

08004938 <__swsetup_r>:
 8004938:	4b32      	ldr	r3, [pc, #200]	; (8004a04 <__swsetup_r+0xcc>)
 800493a:	b570      	push	{r4, r5, r6, lr}
 800493c:	681d      	ldr	r5, [r3, #0]
 800493e:	4606      	mov	r6, r0
 8004940:	460c      	mov	r4, r1
 8004942:	b125      	cbz	r5, 800494e <__swsetup_r+0x16>
 8004944:	69ab      	ldr	r3, [r5, #24]
 8004946:	b913      	cbnz	r3, 800494e <__swsetup_r+0x16>
 8004948:	4628      	mov	r0, r5
 800494a:	f000 f985 	bl	8004c58 <__sinit>
 800494e:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <__swsetup_r+0xd0>)
 8004950:	429c      	cmp	r4, r3
 8004952:	d10f      	bne.n	8004974 <__swsetup_r+0x3c>
 8004954:	686c      	ldr	r4, [r5, #4]
 8004956:	89a3      	ldrh	r3, [r4, #12]
 8004958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800495c:	0719      	lsls	r1, r3, #28
 800495e:	d42c      	bmi.n	80049ba <__swsetup_r+0x82>
 8004960:	06dd      	lsls	r5, r3, #27
 8004962:	d411      	bmi.n	8004988 <__swsetup_r+0x50>
 8004964:	2309      	movs	r3, #9
 8004966:	6033      	str	r3, [r6, #0]
 8004968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	f04f 30ff 	mov.w	r0, #4294967295
 8004972:	e03e      	b.n	80049f2 <__swsetup_r+0xba>
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <__swsetup_r+0xd4>)
 8004976:	429c      	cmp	r4, r3
 8004978:	d101      	bne.n	800497e <__swsetup_r+0x46>
 800497a:	68ac      	ldr	r4, [r5, #8]
 800497c:	e7eb      	b.n	8004956 <__swsetup_r+0x1e>
 800497e:	4b24      	ldr	r3, [pc, #144]	; (8004a10 <__swsetup_r+0xd8>)
 8004980:	429c      	cmp	r4, r3
 8004982:	bf08      	it	eq
 8004984:	68ec      	ldreq	r4, [r5, #12]
 8004986:	e7e6      	b.n	8004956 <__swsetup_r+0x1e>
 8004988:	0758      	lsls	r0, r3, #29
 800498a:	d512      	bpl.n	80049b2 <__swsetup_r+0x7a>
 800498c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800498e:	b141      	cbz	r1, 80049a2 <__swsetup_r+0x6a>
 8004990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004994:	4299      	cmp	r1, r3
 8004996:	d002      	beq.n	800499e <__swsetup_r+0x66>
 8004998:	4630      	mov	r0, r6
 800499a:	f7ff f8e5 	bl	8003b68 <_free_r>
 800499e:	2300      	movs	r3, #0
 80049a0:	6363      	str	r3, [r4, #52]	; 0x34
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049a8:	81a3      	strh	r3, [r4, #12]
 80049aa:	2300      	movs	r3, #0
 80049ac:	6063      	str	r3, [r4, #4]
 80049ae:	6923      	ldr	r3, [r4, #16]
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	f043 0308 	orr.w	r3, r3, #8
 80049b8:	81a3      	strh	r3, [r4, #12]
 80049ba:	6923      	ldr	r3, [r4, #16]
 80049bc:	b94b      	cbnz	r3, 80049d2 <__swsetup_r+0x9a>
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049c8:	d003      	beq.n	80049d2 <__swsetup_r+0x9a>
 80049ca:	4621      	mov	r1, r4
 80049cc:	4630      	mov	r0, r6
 80049ce:	f000 fa09 	bl	8004de4 <__smakebuf_r>
 80049d2:	89a0      	ldrh	r0, [r4, #12]
 80049d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049d8:	f010 0301 	ands.w	r3, r0, #1
 80049dc:	d00a      	beq.n	80049f4 <__swsetup_r+0xbc>
 80049de:	2300      	movs	r3, #0
 80049e0:	60a3      	str	r3, [r4, #8]
 80049e2:	6963      	ldr	r3, [r4, #20]
 80049e4:	425b      	negs	r3, r3
 80049e6:	61a3      	str	r3, [r4, #24]
 80049e8:	6923      	ldr	r3, [r4, #16]
 80049ea:	b943      	cbnz	r3, 80049fe <__swsetup_r+0xc6>
 80049ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049f0:	d1ba      	bne.n	8004968 <__swsetup_r+0x30>
 80049f2:	bd70      	pop	{r4, r5, r6, pc}
 80049f4:	0781      	lsls	r1, r0, #30
 80049f6:	bf58      	it	pl
 80049f8:	6963      	ldrpl	r3, [r4, #20]
 80049fa:	60a3      	str	r3, [r4, #8]
 80049fc:	e7f4      	b.n	80049e8 <__swsetup_r+0xb0>
 80049fe:	2000      	movs	r0, #0
 8004a00:	e7f7      	b.n	80049f2 <__swsetup_r+0xba>
 8004a02:	bf00      	nop
 8004a04:	20000038 	.word	0x20000038
 8004a08:	080054a4 	.word	0x080054a4
 8004a0c:	080054c4 	.word	0x080054c4
 8004a10:	08005484 	.word	0x08005484

08004a14 <abort>:
 8004a14:	b508      	push	{r3, lr}
 8004a16:	2006      	movs	r0, #6
 8004a18:	f000 faa4 	bl	8004f64 <raise>
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	f7fc fb93 	bl	8001148 <_exit>
	...

08004a24 <__sflush_r>:
 8004a24:	898a      	ldrh	r2, [r1, #12]
 8004a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	0710      	lsls	r0, r2, #28
 8004a2e:	460c      	mov	r4, r1
 8004a30:	d458      	bmi.n	8004ae4 <__sflush_r+0xc0>
 8004a32:	684b      	ldr	r3, [r1, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	dc05      	bgt.n	8004a44 <__sflush_r+0x20>
 8004a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	dc02      	bgt.n	8004a44 <__sflush_r+0x20>
 8004a3e:	2000      	movs	r0, #0
 8004a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a46:	2e00      	cmp	r6, #0
 8004a48:	d0f9      	beq.n	8004a3e <__sflush_r+0x1a>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a50:	682f      	ldr	r7, [r5, #0]
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	d032      	beq.n	8004abc <__sflush_r+0x98>
 8004a56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a58:	89a3      	ldrh	r3, [r4, #12]
 8004a5a:	075a      	lsls	r2, r3, #29
 8004a5c:	d505      	bpl.n	8004a6a <__sflush_r+0x46>
 8004a5e:	6863      	ldr	r3, [r4, #4]
 8004a60:	1ac0      	subs	r0, r0, r3
 8004a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a64:	b10b      	cbz	r3, 8004a6a <__sflush_r+0x46>
 8004a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a68:	1ac0      	subs	r0, r0, r3
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a70:	6a21      	ldr	r1, [r4, #32]
 8004a72:	4628      	mov	r0, r5
 8004a74:	47b0      	blx	r6
 8004a76:	1c43      	adds	r3, r0, #1
 8004a78:	89a3      	ldrh	r3, [r4, #12]
 8004a7a:	d106      	bne.n	8004a8a <__sflush_r+0x66>
 8004a7c:	6829      	ldr	r1, [r5, #0]
 8004a7e:	291d      	cmp	r1, #29
 8004a80:	d82c      	bhi.n	8004adc <__sflush_r+0xb8>
 8004a82:	4a2a      	ldr	r2, [pc, #168]	; (8004b2c <__sflush_r+0x108>)
 8004a84:	40ca      	lsrs	r2, r1
 8004a86:	07d6      	lsls	r6, r2, #31
 8004a88:	d528      	bpl.n	8004adc <__sflush_r+0xb8>
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	6062      	str	r2, [r4, #4]
 8004a8e:	04d9      	lsls	r1, r3, #19
 8004a90:	6922      	ldr	r2, [r4, #16]
 8004a92:	6022      	str	r2, [r4, #0]
 8004a94:	d504      	bpl.n	8004aa0 <__sflush_r+0x7c>
 8004a96:	1c42      	adds	r2, r0, #1
 8004a98:	d101      	bne.n	8004a9e <__sflush_r+0x7a>
 8004a9a:	682b      	ldr	r3, [r5, #0]
 8004a9c:	b903      	cbnz	r3, 8004aa0 <__sflush_r+0x7c>
 8004a9e:	6560      	str	r0, [r4, #84]	; 0x54
 8004aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aa2:	602f      	str	r7, [r5, #0]
 8004aa4:	2900      	cmp	r1, #0
 8004aa6:	d0ca      	beq.n	8004a3e <__sflush_r+0x1a>
 8004aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aac:	4299      	cmp	r1, r3
 8004aae:	d002      	beq.n	8004ab6 <__sflush_r+0x92>
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f7ff f859 	bl	8003b68 <_free_r>
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	6360      	str	r0, [r4, #52]	; 0x34
 8004aba:	e7c1      	b.n	8004a40 <__sflush_r+0x1c>
 8004abc:	6a21      	ldr	r1, [r4, #32]
 8004abe:	2301      	movs	r3, #1
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	47b0      	blx	r6
 8004ac4:	1c41      	adds	r1, r0, #1
 8004ac6:	d1c7      	bne.n	8004a58 <__sflush_r+0x34>
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0c4      	beq.n	8004a58 <__sflush_r+0x34>
 8004ace:	2b1d      	cmp	r3, #29
 8004ad0:	d001      	beq.n	8004ad6 <__sflush_r+0xb2>
 8004ad2:	2b16      	cmp	r3, #22
 8004ad4:	d101      	bne.n	8004ada <__sflush_r+0xb6>
 8004ad6:	602f      	str	r7, [r5, #0]
 8004ad8:	e7b1      	b.n	8004a3e <__sflush_r+0x1a>
 8004ada:	89a3      	ldrh	r3, [r4, #12]
 8004adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ae0:	81a3      	strh	r3, [r4, #12]
 8004ae2:	e7ad      	b.n	8004a40 <__sflush_r+0x1c>
 8004ae4:	690f      	ldr	r7, [r1, #16]
 8004ae6:	2f00      	cmp	r7, #0
 8004ae8:	d0a9      	beq.n	8004a3e <__sflush_r+0x1a>
 8004aea:	0793      	lsls	r3, r2, #30
 8004aec:	680e      	ldr	r6, [r1, #0]
 8004aee:	bf08      	it	eq
 8004af0:	694b      	ldreq	r3, [r1, #20]
 8004af2:	600f      	str	r7, [r1, #0]
 8004af4:	bf18      	it	ne
 8004af6:	2300      	movne	r3, #0
 8004af8:	eba6 0807 	sub.w	r8, r6, r7
 8004afc:	608b      	str	r3, [r1, #8]
 8004afe:	f1b8 0f00 	cmp.w	r8, #0
 8004b02:	dd9c      	ble.n	8004a3e <__sflush_r+0x1a>
 8004b04:	6a21      	ldr	r1, [r4, #32]
 8004b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b08:	4643      	mov	r3, r8
 8004b0a:	463a      	mov	r2, r7
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	47b0      	blx	r6
 8004b10:	2800      	cmp	r0, #0
 8004b12:	dc06      	bgt.n	8004b22 <__sflush_r+0xfe>
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	e78e      	b.n	8004a40 <__sflush_r+0x1c>
 8004b22:	4407      	add	r7, r0
 8004b24:	eba8 0800 	sub.w	r8, r8, r0
 8004b28:	e7e9      	b.n	8004afe <__sflush_r+0xda>
 8004b2a:	bf00      	nop
 8004b2c:	20400001 	.word	0x20400001

08004b30 <_fflush_r>:
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	690b      	ldr	r3, [r1, #16]
 8004b34:	4605      	mov	r5, r0
 8004b36:	460c      	mov	r4, r1
 8004b38:	b913      	cbnz	r3, 8004b40 <_fflush_r+0x10>
 8004b3a:	2500      	movs	r5, #0
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	bd38      	pop	{r3, r4, r5, pc}
 8004b40:	b118      	cbz	r0, 8004b4a <_fflush_r+0x1a>
 8004b42:	6983      	ldr	r3, [r0, #24]
 8004b44:	b90b      	cbnz	r3, 8004b4a <_fflush_r+0x1a>
 8004b46:	f000 f887 	bl	8004c58 <__sinit>
 8004b4a:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <_fflush_r+0x6c>)
 8004b4c:	429c      	cmp	r4, r3
 8004b4e:	d11b      	bne.n	8004b88 <_fflush_r+0x58>
 8004b50:	686c      	ldr	r4, [r5, #4]
 8004b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0ef      	beq.n	8004b3a <_fflush_r+0xa>
 8004b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b5c:	07d0      	lsls	r0, r2, #31
 8004b5e:	d404      	bmi.n	8004b6a <_fflush_r+0x3a>
 8004b60:	0599      	lsls	r1, r3, #22
 8004b62:	d402      	bmi.n	8004b6a <_fflush_r+0x3a>
 8004b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b66:	f000 f915 	bl	8004d94 <__retarget_lock_acquire_recursive>
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	f7ff ff59 	bl	8004a24 <__sflush_r>
 8004b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b74:	07da      	lsls	r2, r3, #31
 8004b76:	4605      	mov	r5, r0
 8004b78:	d4e0      	bmi.n	8004b3c <_fflush_r+0xc>
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	059b      	lsls	r3, r3, #22
 8004b7e:	d4dd      	bmi.n	8004b3c <_fflush_r+0xc>
 8004b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b82:	f000 f908 	bl	8004d96 <__retarget_lock_release_recursive>
 8004b86:	e7d9      	b.n	8004b3c <_fflush_r+0xc>
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <_fflush_r+0x70>)
 8004b8a:	429c      	cmp	r4, r3
 8004b8c:	d101      	bne.n	8004b92 <_fflush_r+0x62>
 8004b8e:	68ac      	ldr	r4, [r5, #8]
 8004b90:	e7df      	b.n	8004b52 <_fflush_r+0x22>
 8004b92:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <_fflush_r+0x74>)
 8004b94:	429c      	cmp	r4, r3
 8004b96:	bf08      	it	eq
 8004b98:	68ec      	ldreq	r4, [r5, #12]
 8004b9a:	e7da      	b.n	8004b52 <_fflush_r+0x22>
 8004b9c:	080054a4 	.word	0x080054a4
 8004ba0:	080054c4 	.word	0x080054c4
 8004ba4:	08005484 	.word	0x08005484

08004ba8 <std>:
 8004ba8:	2300      	movs	r3, #0
 8004baa:	b510      	push	{r4, lr}
 8004bac:	4604      	mov	r4, r0
 8004bae:	e9c0 3300 	strd	r3, r3, [r0]
 8004bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bb6:	6083      	str	r3, [r0, #8]
 8004bb8:	8181      	strh	r1, [r0, #12]
 8004bba:	6643      	str	r3, [r0, #100]	; 0x64
 8004bbc:	81c2      	strh	r2, [r0, #14]
 8004bbe:	6183      	str	r3, [r0, #24]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	305c      	adds	r0, #92	; 0x5c
 8004bc6:	f7fe ffc7 	bl	8003b58 <memset>
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <std+0x38>)
 8004bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <std+0x3c>)
 8004bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bd2:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <std+0x40>)
 8004bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <std+0x44>)
 8004bd8:	6224      	str	r4, [r4, #32]
 8004bda:	6323      	str	r3, [r4, #48]	; 0x30
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	bf00      	nop
 8004be0:	08004f9d 	.word	0x08004f9d
 8004be4:	08004fbf 	.word	0x08004fbf
 8004be8:	08004ff7 	.word	0x08004ff7
 8004bec:	0800501b 	.word	0x0800501b

08004bf0 <_cleanup_r>:
 8004bf0:	4901      	ldr	r1, [pc, #4]	; (8004bf8 <_cleanup_r+0x8>)
 8004bf2:	f000 b8af 	b.w	8004d54 <_fwalk_reent>
 8004bf6:	bf00      	nop
 8004bf8:	08004b31 	.word	0x08004b31

08004bfc <__sfmoreglue>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	2268      	movs	r2, #104	; 0x68
 8004c00:	1e4d      	subs	r5, r1, #1
 8004c02:	4355      	muls	r5, r2
 8004c04:	460e      	mov	r6, r1
 8004c06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c0a:	f7ff f819 	bl	8003c40 <_malloc_r>
 8004c0e:	4604      	mov	r4, r0
 8004c10:	b140      	cbz	r0, 8004c24 <__sfmoreglue+0x28>
 8004c12:	2100      	movs	r1, #0
 8004c14:	e9c0 1600 	strd	r1, r6, [r0]
 8004c18:	300c      	adds	r0, #12
 8004c1a:	60a0      	str	r0, [r4, #8]
 8004c1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c20:	f7fe ff9a 	bl	8003b58 <memset>
 8004c24:	4620      	mov	r0, r4
 8004c26:	bd70      	pop	{r4, r5, r6, pc}

08004c28 <__sfp_lock_acquire>:
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <__sfp_lock_acquire+0x8>)
 8004c2a:	f000 b8b3 	b.w	8004d94 <__retarget_lock_acquire_recursive>
 8004c2e:	bf00      	nop
 8004c30:	200001ed 	.word	0x200001ed

08004c34 <__sfp_lock_release>:
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <__sfp_lock_release+0x8>)
 8004c36:	f000 b8ae 	b.w	8004d96 <__retarget_lock_release_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	200001ed 	.word	0x200001ed

08004c40 <__sinit_lock_acquire>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__sinit_lock_acquire+0x8>)
 8004c42:	f000 b8a7 	b.w	8004d94 <__retarget_lock_acquire_recursive>
 8004c46:	bf00      	nop
 8004c48:	200001ee 	.word	0x200001ee

08004c4c <__sinit_lock_release>:
 8004c4c:	4801      	ldr	r0, [pc, #4]	; (8004c54 <__sinit_lock_release+0x8>)
 8004c4e:	f000 b8a2 	b.w	8004d96 <__retarget_lock_release_recursive>
 8004c52:	bf00      	nop
 8004c54:	200001ee 	.word	0x200001ee

08004c58 <__sinit>:
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	f7ff fff0 	bl	8004c40 <__sinit_lock_acquire>
 8004c60:	69a3      	ldr	r3, [r4, #24]
 8004c62:	b11b      	cbz	r3, 8004c6c <__sinit+0x14>
 8004c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c68:	f7ff bff0 	b.w	8004c4c <__sinit_lock_release>
 8004c6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c70:	6523      	str	r3, [r4, #80]	; 0x50
 8004c72:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <__sinit+0x68>)
 8004c74:	4a13      	ldr	r2, [pc, #76]	; (8004cc4 <__sinit+0x6c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c7a:	42a3      	cmp	r3, r4
 8004c7c:	bf04      	itt	eq
 8004c7e:	2301      	moveq	r3, #1
 8004c80:	61a3      	streq	r3, [r4, #24]
 8004c82:	4620      	mov	r0, r4
 8004c84:	f000 f820 	bl	8004cc8 <__sfp>
 8004c88:	6060      	str	r0, [r4, #4]
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f000 f81c 	bl	8004cc8 <__sfp>
 8004c90:	60a0      	str	r0, [r4, #8]
 8004c92:	4620      	mov	r0, r4
 8004c94:	f000 f818 	bl	8004cc8 <__sfp>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	60e0      	str	r0, [r4, #12]
 8004c9c:	2104      	movs	r1, #4
 8004c9e:	6860      	ldr	r0, [r4, #4]
 8004ca0:	f7ff ff82 	bl	8004ba8 <std>
 8004ca4:	68a0      	ldr	r0, [r4, #8]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	2109      	movs	r1, #9
 8004caa:	f7ff ff7d 	bl	8004ba8 <std>
 8004cae:	68e0      	ldr	r0, [r4, #12]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	2112      	movs	r1, #18
 8004cb4:	f7ff ff78 	bl	8004ba8 <std>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	61a3      	str	r3, [r4, #24]
 8004cbc:	e7d2      	b.n	8004c64 <__sinit+0xc>
 8004cbe:	bf00      	nop
 8004cc0:	0800529c 	.word	0x0800529c
 8004cc4:	08004bf1 	.word	0x08004bf1

08004cc8 <__sfp>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	4607      	mov	r7, r0
 8004ccc:	f7ff ffac 	bl	8004c28 <__sfp_lock_acquire>
 8004cd0:	4b1e      	ldr	r3, [pc, #120]	; (8004d4c <__sfp+0x84>)
 8004cd2:	681e      	ldr	r6, [r3, #0]
 8004cd4:	69b3      	ldr	r3, [r6, #24]
 8004cd6:	b913      	cbnz	r3, 8004cde <__sfp+0x16>
 8004cd8:	4630      	mov	r0, r6
 8004cda:	f7ff ffbd 	bl	8004c58 <__sinit>
 8004cde:	3648      	adds	r6, #72	; 0x48
 8004ce0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	d503      	bpl.n	8004cf0 <__sfp+0x28>
 8004ce8:	6833      	ldr	r3, [r6, #0]
 8004cea:	b30b      	cbz	r3, 8004d30 <__sfp+0x68>
 8004cec:	6836      	ldr	r6, [r6, #0]
 8004cee:	e7f7      	b.n	8004ce0 <__sfp+0x18>
 8004cf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004cf4:	b9d5      	cbnz	r5, 8004d2c <__sfp+0x64>
 8004cf6:	4b16      	ldr	r3, [pc, #88]	; (8004d50 <__sfp+0x88>)
 8004cf8:	60e3      	str	r3, [r4, #12]
 8004cfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cfe:	6665      	str	r5, [r4, #100]	; 0x64
 8004d00:	f000 f847 	bl	8004d92 <__retarget_lock_init_recursive>
 8004d04:	f7ff ff96 	bl	8004c34 <__sfp_lock_release>
 8004d08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d10:	6025      	str	r5, [r4, #0]
 8004d12:	61a5      	str	r5, [r4, #24]
 8004d14:	2208      	movs	r2, #8
 8004d16:	4629      	mov	r1, r5
 8004d18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d1c:	f7fe ff1c 	bl	8003b58 <memset>
 8004d20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d28:	4620      	mov	r0, r4
 8004d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2c:	3468      	adds	r4, #104	; 0x68
 8004d2e:	e7d9      	b.n	8004ce4 <__sfp+0x1c>
 8004d30:	2104      	movs	r1, #4
 8004d32:	4638      	mov	r0, r7
 8004d34:	f7ff ff62 	bl	8004bfc <__sfmoreglue>
 8004d38:	4604      	mov	r4, r0
 8004d3a:	6030      	str	r0, [r6, #0]
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d1d5      	bne.n	8004cec <__sfp+0x24>
 8004d40:	f7ff ff78 	bl	8004c34 <__sfp_lock_release>
 8004d44:	230c      	movs	r3, #12
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	e7ee      	b.n	8004d28 <__sfp+0x60>
 8004d4a:	bf00      	nop
 8004d4c:	0800529c 	.word	0x0800529c
 8004d50:	ffff0001 	.word	0xffff0001

08004d54 <_fwalk_reent>:
 8004d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d58:	4606      	mov	r6, r0
 8004d5a:	4688      	mov	r8, r1
 8004d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d60:	2700      	movs	r7, #0
 8004d62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d66:	f1b9 0901 	subs.w	r9, r9, #1
 8004d6a:	d505      	bpl.n	8004d78 <_fwalk_reent+0x24>
 8004d6c:	6824      	ldr	r4, [r4, #0]
 8004d6e:	2c00      	cmp	r4, #0
 8004d70:	d1f7      	bne.n	8004d62 <_fwalk_reent+0xe>
 8004d72:	4638      	mov	r0, r7
 8004d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d78:	89ab      	ldrh	r3, [r5, #12]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d907      	bls.n	8004d8e <_fwalk_reent+0x3a>
 8004d7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d82:	3301      	adds	r3, #1
 8004d84:	d003      	beq.n	8004d8e <_fwalk_reent+0x3a>
 8004d86:	4629      	mov	r1, r5
 8004d88:	4630      	mov	r0, r6
 8004d8a:	47c0      	blx	r8
 8004d8c:	4307      	orrs	r7, r0
 8004d8e:	3568      	adds	r5, #104	; 0x68
 8004d90:	e7e9      	b.n	8004d66 <_fwalk_reent+0x12>

08004d92 <__retarget_lock_init_recursive>:
 8004d92:	4770      	bx	lr

08004d94 <__retarget_lock_acquire_recursive>:
 8004d94:	4770      	bx	lr

08004d96 <__retarget_lock_release_recursive>:
 8004d96:	4770      	bx	lr

08004d98 <__swhatbuf_r>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	460e      	mov	r6, r1
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	2900      	cmp	r1, #0
 8004da2:	b096      	sub	sp, #88	; 0x58
 8004da4:	4614      	mov	r4, r2
 8004da6:	461d      	mov	r5, r3
 8004da8:	da08      	bge.n	8004dbc <__swhatbuf_r+0x24>
 8004daa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	602a      	str	r2, [r5, #0]
 8004db2:	061a      	lsls	r2, r3, #24
 8004db4:	d410      	bmi.n	8004dd8 <__swhatbuf_r+0x40>
 8004db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dba:	e00e      	b.n	8004dda <__swhatbuf_r+0x42>
 8004dbc:	466a      	mov	r2, sp
 8004dbe:	f000 f953 	bl	8005068 <_fstat_r>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	dbf1      	blt.n	8004daa <__swhatbuf_r+0x12>
 8004dc6:	9a01      	ldr	r2, [sp, #4]
 8004dc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dd0:	425a      	negs	r2, r3
 8004dd2:	415a      	adcs	r2, r3
 8004dd4:	602a      	str	r2, [r5, #0]
 8004dd6:	e7ee      	b.n	8004db6 <__swhatbuf_r+0x1e>
 8004dd8:	2340      	movs	r3, #64	; 0x40
 8004dda:	2000      	movs	r0, #0
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	b016      	add	sp, #88	; 0x58
 8004de0:	bd70      	pop	{r4, r5, r6, pc}
	...

08004de4 <__smakebuf_r>:
 8004de4:	898b      	ldrh	r3, [r1, #12]
 8004de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004de8:	079d      	lsls	r5, r3, #30
 8004dea:	4606      	mov	r6, r0
 8004dec:	460c      	mov	r4, r1
 8004dee:	d507      	bpl.n	8004e00 <__smakebuf_r+0x1c>
 8004df0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	6123      	str	r3, [r4, #16]
 8004df8:	2301      	movs	r3, #1
 8004dfa:	6163      	str	r3, [r4, #20]
 8004dfc:	b002      	add	sp, #8
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	ab01      	add	r3, sp, #4
 8004e02:	466a      	mov	r2, sp
 8004e04:	f7ff ffc8 	bl	8004d98 <__swhatbuf_r>
 8004e08:	9900      	ldr	r1, [sp, #0]
 8004e0a:	4605      	mov	r5, r0
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f7fe ff17 	bl	8003c40 <_malloc_r>
 8004e12:	b948      	cbnz	r0, 8004e28 <__smakebuf_r+0x44>
 8004e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e18:	059a      	lsls	r2, r3, #22
 8004e1a:	d4ef      	bmi.n	8004dfc <__smakebuf_r+0x18>
 8004e1c:	f023 0303 	bic.w	r3, r3, #3
 8004e20:	f043 0302 	orr.w	r3, r3, #2
 8004e24:	81a3      	strh	r3, [r4, #12]
 8004e26:	e7e3      	b.n	8004df0 <__smakebuf_r+0xc>
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <__smakebuf_r+0x7c>)
 8004e2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	6020      	str	r0, [r4, #0]
 8004e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e34:	81a3      	strh	r3, [r4, #12]
 8004e36:	9b00      	ldr	r3, [sp, #0]
 8004e38:	6163      	str	r3, [r4, #20]
 8004e3a:	9b01      	ldr	r3, [sp, #4]
 8004e3c:	6120      	str	r0, [r4, #16]
 8004e3e:	b15b      	cbz	r3, 8004e58 <__smakebuf_r+0x74>
 8004e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e44:	4630      	mov	r0, r6
 8004e46:	f000 f921 	bl	800508c <_isatty_r>
 8004e4a:	b128      	cbz	r0, 8004e58 <__smakebuf_r+0x74>
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	f023 0303 	bic.w	r3, r3, #3
 8004e52:	f043 0301 	orr.w	r3, r3, #1
 8004e56:	81a3      	strh	r3, [r4, #12]
 8004e58:	89a0      	ldrh	r0, [r4, #12]
 8004e5a:	4305      	orrs	r5, r0
 8004e5c:	81a5      	strh	r5, [r4, #12]
 8004e5e:	e7cd      	b.n	8004dfc <__smakebuf_r+0x18>
 8004e60:	08004bf1 	.word	0x08004bf1

08004e64 <memcpy>:
 8004e64:	440a      	add	r2, r1
 8004e66:	4291      	cmp	r1, r2
 8004e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e6c:	d100      	bne.n	8004e70 <memcpy+0xc>
 8004e6e:	4770      	bx	lr
 8004e70:	b510      	push	{r4, lr}
 8004e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e7a:	4291      	cmp	r1, r2
 8004e7c:	d1f9      	bne.n	8004e72 <memcpy+0xe>
 8004e7e:	bd10      	pop	{r4, pc}

08004e80 <memmove>:
 8004e80:	4288      	cmp	r0, r1
 8004e82:	b510      	push	{r4, lr}
 8004e84:	eb01 0402 	add.w	r4, r1, r2
 8004e88:	d902      	bls.n	8004e90 <memmove+0x10>
 8004e8a:	4284      	cmp	r4, r0
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	d807      	bhi.n	8004ea0 <memmove+0x20>
 8004e90:	1e43      	subs	r3, r0, #1
 8004e92:	42a1      	cmp	r1, r4
 8004e94:	d008      	beq.n	8004ea8 <memmove+0x28>
 8004e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e9e:	e7f8      	b.n	8004e92 <memmove+0x12>
 8004ea0:	4402      	add	r2, r0
 8004ea2:	4601      	mov	r1, r0
 8004ea4:	428a      	cmp	r2, r1
 8004ea6:	d100      	bne.n	8004eaa <memmove+0x2a>
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eb2:	e7f7      	b.n	8004ea4 <memmove+0x24>

08004eb4 <_realloc_r>:
 8004eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb8:	4680      	mov	r8, r0
 8004eba:	4614      	mov	r4, r2
 8004ebc:	460e      	mov	r6, r1
 8004ebe:	b921      	cbnz	r1, 8004eca <_realloc_r+0x16>
 8004ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	f7fe bebb 	b.w	8003c40 <_malloc_r>
 8004eca:	b92a      	cbnz	r2, 8004ed8 <_realloc_r+0x24>
 8004ecc:	f7fe fe4c 	bl	8003b68 <_free_r>
 8004ed0:	4625      	mov	r5, r4
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed8:	f000 f8fa 	bl	80050d0 <_malloc_usable_size_r>
 8004edc:	4284      	cmp	r4, r0
 8004ede:	4607      	mov	r7, r0
 8004ee0:	d802      	bhi.n	8004ee8 <_realloc_r+0x34>
 8004ee2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ee6:	d812      	bhi.n	8004f0e <_realloc_r+0x5a>
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4640      	mov	r0, r8
 8004eec:	f7fe fea8 	bl	8003c40 <_malloc_r>
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d0ed      	beq.n	8004ed2 <_realloc_r+0x1e>
 8004ef6:	42bc      	cmp	r4, r7
 8004ef8:	4622      	mov	r2, r4
 8004efa:	4631      	mov	r1, r6
 8004efc:	bf28      	it	cs
 8004efe:	463a      	movcs	r2, r7
 8004f00:	f7ff ffb0 	bl	8004e64 <memcpy>
 8004f04:	4631      	mov	r1, r6
 8004f06:	4640      	mov	r0, r8
 8004f08:	f7fe fe2e 	bl	8003b68 <_free_r>
 8004f0c:	e7e1      	b.n	8004ed2 <_realloc_r+0x1e>
 8004f0e:	4635      	mov	r5, r6
 8004f10:	e7df      	b.n	8004ed2 <_realloc_r+0x1e>

08004f12 <_raise_r>:
 8004f12:	291f      	cmp	r1, #31
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4604      	mov	r4, r0
 8004f18:	460d      	mov	r5, r1
 8004f1a:	d904      	bls.n	8004f26 <_raise_r+0x14>
 8004f1c:	2316      	movs	r3, #22
 8004f1e:	6003      	str	r3, [r0, #0]
 8004f20:	f04f 30ff 	mov.w	r0, #4294967295
 8004f24:	bd38      	pop	{r3, r4, r5, pc}
 8004f26:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f28:	b112      	cbz	r2, 8004f30 <_raise_r+0x1e>
 8004f2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f2e:	b94b      	cbnz	r3, 8004f44 <_raise_r+0x32>
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 f831 	bl	8004f98 <_getpid_r>
 8004f36:	462a      	mov	r2, r5
 8004f38:	4601      	mov	r1, r0
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f40:	f000 b818 	b.w	8004f74 <_kill_r>
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d00a      	beq.n	8004f5e <_raise_r+0x4c>
 8004f48:	1c59      	adds	r1, r3, #1
 8004f4a:	d103      	bne.n	8004f54 <_raise_r+0x42>
 8004f4c:	2316      	movs	r3, #22
 8004f4e:	6003      	str	r3, [r0, #0]
 8004f50:	2001      	movs	r0, #1
 8004f52:	e7e7      	b.n	8004f24 <_raise_r+0x12>
 8004f54:	2400      	movs	r4, #0
 8004f56:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	4798      	blx	r3
 8004f5e:	2000      	movs	r0, #0
 8004f60:	e7e0      	b.n	8004f24 <_raise_r+0x12>
	...

08004f64 <raise>:
 8004f64:	4b02      	ldr	r3, [pc, #8]	; (8004f70 <raise+0xc>)
 8004f66:	4601      	mov	r1, r0
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	f7ff bfd2 	b.w	8004f12 <_raise_r>
 8004f6e:	bf00      	nop
 8004f70:	20000038 	.word	0x20000038

08004f74 <_kill_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4d07      	ldr	r5, [pc, #28]	; (8004f94 <_kill_r+0x20>)
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	4608      	mov	r0, r1
 8004f7e:	4611      	mov	r1, r2
 8004f80:	602b      	str	r3, [r5, #0]
 8004f82:	f7fc f8d1 	bl	8001128 <_kill>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d102      	bne.n	8004f90 <_kill_r+0x1c>
 8004f8a:	682b      	ldr	r3, [r5, #0]
 8004f8c:	b103      	cbz	r3, 8004f90 <_kill_r+0x1c>
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	bd38      	pop	{r3, r4, r5, pc}
 8004f92:	bf00      	nop
 8004f94:	200001e8 	.word	0x200001e8

08004f98 <_getpid_r>:
 8004f98:	f7fc b8be 	b.w	8001118 <_getpid>

08004f9c <__sread>:
 8004f9c:	b510      	push	{r4, lr}
 8004f9e:	460c      	mov	r4, r1
 8004fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa4:	f000 f89c 	bl	80050e0 <_read_r>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	bfab      	itete	ge
 8004fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fae:	89a3      	ldrhlt	r3, [r4, #12]
 8004fb0:	181b      	addge	r3, r3, r0
 8004fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fb6:	bfac      	ite	ge
 8004fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fba:	81a3      	strhlt	r3, [r4, #12]
 8004fbc:	bd10      	pop	{r4, pc}

08004fbe <__swrite>:
 8004fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc2:	461f      	mov	r7, r3
 8004fc4:	898b      	ldrh	r3, [r1, #12]
 8004fc6:	05db      	lsls	r3, r3, #23
 8004fc8:	4605      	mov	r5, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	4616      	mov	r6, r2
 8004fce:	d505      	bpl.n	8004fdc <__swrite+0x1e>
 8004fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f000 f868 	bl	80050ac <_lseek_r>
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fe6:	81a3      	strh	r3, [r4, #12]
 8004fe8:	4632      	mov	r2, r6
 8004fea:	463b      	mov	r3, r7
 8004fec:	4628      	mov	r0, r5
 8004fee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff2:	f000 b817 	b.w	8005024 <_write_r>

08004ff6 <__sseek>:
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffe:	f000 f855 	bl	80050ac <_lseek_r>
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	bf15      	itete	ne
 8005008:	6560      	strne	r0, [r4, #84]	; 0x54
 800500a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800500e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005012:	81a3      	strheq	r3, [r4, #12]
 8005014:	bf18      	it	ne
 8005016:	81a3      	strhne	r3, [r4, #12]
 8005018:	bd10      	pop	{r4, pc}

0800501a <__sclose>:
 800501a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501e:	f000 b813 	b.w	8005048 <_close_r>
	...

08005024 <_write_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	4d07      	ldr	r5, [pc, #28]	; (8005044 <_write_r+0x20>)
 8005028:	4604      	mov	r4, r0
 800502a:	4608      	mov	r0, r1
 800502c:	4611      	mov	r1, r2
 800502e:	2200      	movs	r2, #0
 8005030:	602a      	str	r2, [r5, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	f7fc f8af 	bl	8001196 <_write>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_write_r+0x1e>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	b103      	cbz	r3, 8005042 <_write_r+0x1e>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	200001e8 	.word	0x200001e8

08005048 <_close_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4d06      	ldr	r5, [pc, #24]	; (8005064 <_close_r+0x1c>)
 800504c:	2300      	movs	r3, #0
 800504e:	4604      	mov	r4, r0
 8005050:	4608      	mov	r0, r1
 8005052:	602b      	str	r3, [r5, #0]
 8005054:	f7fc f8bb 	bl	80011ce <_close>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d102      	bne.n	8005062 <_close_r+0x1a>
 800505c:	682b      	ldr	r3, [r5, #0]
 800505e:	b103      	cbz	r3, 8005062 <_close_r+0x1a>
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	bd38      	pop	{r3, r4, r5, pc}
 8005064:	200001e8 	.word	0x200001e8

08005068 <_fstat_r>:
 8005068:	b538      	push	{r3, r4, r5, lr}
 800506a:	4d07      	ldr	r5, [pc, #28]	; (8005088 <_fstat_r+0x20>)
 800506c:	2300      	movs	r3, #0
 800506e:	4604      	mov	r4, r0
 8005070:	4608      	mov	r0, r1
 8005072:	4611      	mov	r1, r2
 8005074:	602b      	str	r3, [r5, #0]
 8005076:	f7fc f8b6 	bl	80011e6 <_fstat>
 800507a:	1c43      	adds	r3, r0, #1
 800507c:	d102      	bne.n	8005084 <_fstat_r+0x1c>
 800507e:	682b      	ldr	r3, [r5, #0]
 8005080:	b103      	cbz	r3, 8005084 <_fstat_r+0x1c>
 8005082:	6023      	str	r3, [r4, #0]
 8005084:	bd38      	pop	{r3, r4, r5, pc}
 8005086:	bf00      	nop
 8005088:	200001e8 	.word	0x200001e8

0800508c <_isatty_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4d06      	ldr	r5, [pc, #24]	; (80050a8 <_isatty_r+0x1c>)
 8005090:	2300      	movs	r3, #0
 8005092:	4604      	mov	r4, r0
 8005094:	4608      	mov	r0, r1
 8005096:	602b      	str	r3, [r5, #0]
 8005098:	f7fc f8b5 	bl	8001206 <_isatty>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d102      	bne.n	80050a6 <_isatty_r+0x1a>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	b103      	cbz	r3, 80050a6 <_isatty_r+0x1a>
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	200001e8 	.word	0x200001e8

080050ac <_lseek_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4d07      	ldr	r5, [pc, #28]	; (80050cc <_lseek_r+0x20>)
 80050b0:	4604      	mov	r4, r0
 80050b2:	4608      	mov	r0, r1
 80050b4:	4611      	mov	r1, r2
 80050b6:	2200      	movs	r2, #0
 80050b8:	602a      	str	r2, [r5, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	f7fc f8ae 	bl	800121c <_lseek>
 80050c0:	1c43      	adds	r3, r0, #1
 80050c2:	d102      	bne.n	80050ca <_lseek_r+0x1e>
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	b103      	cbz	r3, 80050ca <_lseek_r+0x1e>
 80050c8:	6023      	str	r3, [r4, #0]
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	200001e8 	.word	0x200001e8

080050d0 <_malloc_usable_size_r>:
 80050d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d4:	1f18      	subs	r0, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bfbc      	itt	lt
 80050da:	580b      	ldrlt	r3, [r1, r0]
 80050dc:	18c0      	addlt	r0, r0, r3
 80050de:	4770      	bx	lr

080050e0 <_read_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d07      	ldr	r5, [pc, #28]	; (8005100 <_read_r+0x20>)
 80050e4:	4604      	mov	r4, r0
 80050e6:	4608      	mov	r0, r1
 80050e8:	4611      	mov	r1, r2
 80050ea:	2200      	movs	r2, #0
 80050ec:	602a      	str	r2, [r5, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	f7fc f834 	bl	800115c <_read>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_read_r+0x1e>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_read_r+0x1e>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	200001e8 	.word	0x200001e8

08005104 <_init>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	bf00      	nop
 8005108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510a:	bc08      	pop	{r3}
 800510c:	469e      	mov	lr, r3
 800510e:	4770      	bx	lr

08005110 <_fini>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	bf00      	nop
 8005114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005116:	bc08      	pop	{r3}
 8005118:	469e      	mov	lr, r3
 800511a:	4770      	bx	lr
